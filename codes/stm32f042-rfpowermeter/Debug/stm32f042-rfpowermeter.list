
stm32f042-rfpowermeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001594  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e4  080064e4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080064e4  080064e4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064e4  080064e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080064ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000080  0800656c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000628  0800656c  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a378  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e60  00000000  00000000  0002a420  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000920  00000000  00000000  0002c280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002cba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015351  00000000  00000000  0002d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000955a  00000000  00000000  000426f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071259  00000000  00000000  0004bc4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bcea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000235c  00000000  00000000  000bcf20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f38 	.word	0x08004f38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08004f38 	.word	0x08004f38

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fa5b 	bl	80008b8 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f9dd 	bl	80007cc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fa4d 	bl	80008b8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fa43 	bl	80008b8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f9eb 	bl	800081c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f9e1 	bl	800081c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fd63 	bl	8000f44 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fb99 	bl	8000bbc <__aeabi_fsub>
 800048a:	f000 fd5b 	bl	8000f44 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	4647      	mov	r7, r8
 800049c:	46ce      	mov	lr, r9
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5b      	lsrs	r3, r3, #9
 80004a2:	0044      	lsls	r4, r0, #1
 80004a4:	0fc2      	lsrs	r2, r0, #31
 80004a6:	469c      	mov	ip, r3
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	00dd      	lsls	r5, r3, #3
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	0e24      	lsrs	r4, r4, #24
 80004b0:	0a5b      	lsrs	r3, r3, #9
 80004b2:	0e00      	lsrs	r0, r0, #24
 80004b4:	b580      	push	{r7, lr}
 80004b6:	4698      	mov	r8, r3
 80004b8:	0026      	movs	r6, r4
 80004ba:	4691      	mov	r9, r2
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	1a27      	subs	r7, r4, r0
 80004c2:	428a      	cmp	r2, r1
 80004c4:	d029      	beq.n	800051a <__aeabi_fadd+0x82>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	dd15      	ble.n	80004f6 <__aeabi_fadd+0x5e>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d14a      	bne.n	8000564 <__aeabi_fadd+0xcc>
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d000      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 80004d2:	e095      	b.n	8000600 <__aeabi_fadd+0x168>
 80004d4:	08ed      	lsrs	r5, r5, #3
 80004d6:	2cff      	cmp	r4, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x44>
 80004da:	e088      	b.n	80005ee <__aeabi_fadd+0x156>
 80004dc:	026b      	lsls	r3, r5, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	b2e6      	uxtb	r6, r4
 80004e2:	025b      	lsls	r3, r3, #9
 80004e4:	05f6      	lsls	r6, r6, #23
 80004e6:	0a58      	lsrs	r0, r3, #9
 80004e8:	4330      	orrs	r0, r6
 80004ea:	07d2      	lsls	r2, r2, #31
 80004ec:	4310      	orrs	r0, r2
 80004ee:	bc0c      	pop	{r2, r3}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f6:	2f00      	cmp	r7, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e087      	b.n	800060c <__aeabi_fadd+0x174>
 80004fc:	1c60      	adds	r0, r4, #1
 80004fe:	b2c0      	uxtb	r0, r0
 8000500:	2801      	cmp	r0, #1
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x6e>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1dc>
 8000506:	1aee      	subs	r6, r5, r3
 8000508:	0172      	lsls	r2, r6, #5
 800050a:	d500      	bpl.n	800050e <__aeabi_fadd+0x76>
 800050c:	e0c5      	b.n	800069a <__aeabi_fadd+0x202>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d13d      	bne.n	800058e <__aeabi_fadd+0xf6>
 8000512:	2200      	movs	r2, #0
 8000514:	2600      	movs	r6, #0
 8000516:	2300      	movs	r3, #0
 8000518:	e7e3      	b.n	80004e2 <__aeabi_fadd+0x4a>
 800051a:	2f00      	cmp	r7, #0
 800051c:	dc00      	bgt.n	8000520 <__aeabi_fadd+0x88>
 800051e:	e096      	b.n	800064e <__aeabi_fadd+0x1b6>
 8000520:	2800      	cmp	r0, #0
 8000522:	d05d      	beq.n	80005e0 <__aeabi_fadd+0x148>
 8000524:	2cff      	cmp	r4, #255	; 0xff
 8000526:	d060      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	04d2      	lsls	r2, r2, #19
 800052c:	4313      	orrs	r3, r2
 800052e:	2f1b      	cmp	r7, #27
 8000530:	dd00      	ble.n	8000534 <__aeabi_fadd+0x9c>
 8000532:	e0ec      	b.n	800070e <__aeabi_fadd+0x276>
 8000534:	2220      	movs	r2, #32
 8000536:	1bd2      	subs	r2, r2, r7
 8000538:	0018      	movs	r0, r3
 800053a:	4093      	lsls	r3, r2
 800053c:	40f8      	lsrs	r0, r7
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	4193      	sbcs	r3, r2
 8000542:	4303      	orrs	r3, r0
 8000544:	18ed      	adds	r5, r5, r3
 8000546:	016b      	lsls	r3, r5, #5
 8000548:	d57b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800054a:	3401      	adds	r4, #1
 800054c:	2cff      	cmp	r4, #255	; 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xba>
 8000550:	e0b7      	b.n	80006c2 <__aeabi_fadd+0x22a>
 8000552:	2201      	movs	r2, #1
 8000554:	2607      	movs	r6, #7
 8000556:	402a      	ands	r2, r5
 8000558:	086b      	lsrs	r3, r5, #1
 800055a:	4d9a      	ldr	r5, [pc, #616]	; (80007c4 <__aeabi_fadd+0x32c>)
 800055c:	401d      	ands	r5, r3
 800055e:	4315      	orrs	r5, r2
 8000560:	402e      	ands	r6, r5
 8000562:	e029      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000564:	2cff      	cmp	r4, #255	; 0xff
 8000566:	d0b5      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	04d2      	lsls	r2, r2, #19
 800056c:	4313      	orrs	r3, r2
 800056e:	2f1b      	cmp	r7, #27
 8000570:	dd00      	ble.n	8000574 <__aeabi_fadd+0xdc>
 8000572:	e0b2      	b.n	80006da <__aeabi_fadd+0x242>
 8000574:	2220      	movs	r2, #32
 8000576:	1bd2      	subs	r2, r2, r7
 8000578:	0019      	movs	r1, r3
 800057a:	4093      	lsls	r3, r2
 800057c:	40f9      	lsrs	r1, r7
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	4193      	sbcs	r3, r2
 8000582:	430b      	orrs	r3, r1
 8000584:	1aed      	subs	r5, r5, r3
 8000586:	016b      	lsls	r3, r5, #5
 8000588:	d55b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800058a:	01ad      	lsls	r5, r5, #6
 800058c:	09ae      	lsrs	r6, r5, #6
 800058e:	0030      	movs	r0, r6
 8000590:	f000 fd82 	bl	8001098 <__clzsi2>
 8000594:	3805      	subs	r0, #5
 8000596:	4086      	lsls	r6, r0
 8000598:	4284      	cmp	r4, r0
 800059a:	dc65      	bgt.n	8000668 <__aeabi_fadd+0x1d0>
 800059c:	1b04      	subs	r4, r0, r4
 800059e:	0033      	movs	r3, r6
 80005a0:	2020      	movs	r0, #32
 80005a2:	3401      	adds	r4, #1
 80005a4:	40e3      	lsrs	r3, r4
 80005a6:	1b04      	subs	r4, r0, r4
 80005a8:	40a6      	lsls	r6, r4
 80005aa:	1e75      	subs	r5, r6, #1
 80005ac:	41ae      	sbcs	r6, r5
 80005ae:	4333      	orrs	r3, r6
 80005b0:	2607      	movs	r6, #7
 80005b2:	001d      	movs	r5, r3
 80005b4:	2400      	movs	r4, #0
 80005b6:	401e      	ands	r6, r3
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	401a      	ands	r2, r3
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d004      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005c2:	230f      	movs	r3, #15
 80005c4:	402b      	ands	r3, r5
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d000      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005ca:	3504      	adds	r5, #4
 80005cc:	016b      	lsls	r3, r5, #5
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_fadd+0x13a>
 80005d0:	e780      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005d2:	3401      	adds	r4, #1
 80005d4:	b2e6      	uxtb	r6, r4
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d12f      	bne.n	800063a <__aeabi_fadd+0x1a2>
 80005da:	26ff      	movs	r6, #255	; 0xff
 80005dc:	2300      	movs	r3, #0
 80005de:	e780      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d152      	bne.n	800068a <__aeabi_fadd+0x1f2>
 80005e4:	2cff      	cmp	r4, #255	; 0xff
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x152>
 80005e8:	e774      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005ea:	000a      	movs	r2, r1
 80005ec:	08ed      	lsrs	r5, r5, #3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0f3      	beq.n	80005da <__aeabi_fadd+0x142>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	432b      	orrs	r3, r5
 80005f8:	025b      	lsls	r3, r3, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	26ff      	movs	r6, #255	; 0xff
 80005fe:	e770      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000600:	3f01      	subs	r7, #1
 8000602:	2f00      	cmp	r7, #0
 8000604:	d0be      	beq.n	8000584 <__aeabi_fadd+0xec>
 8000606:	2cff      	cmp	r4, #255	; 0xff
 8000608:	d1b1      	bne.n	800056e <__aeabi_fadd+0xd6>
 800060a:	e763      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800060c:	2c00      	cmp	r4, #0
 800060e:	d047      	beq.n	80006a0 <__aeabi_fadd+0x208>
 8000610:	28ff      	cmp	r0, #255	; 0xff
 8000612:	d069      	beq.n	80006e8 <__aeabi_fadd+0x250>
 8000614:	2480      	movs	r4, #128	; 0x80
 8000616:	04e4      	lsls	r4, r4, #19
 8000618:	427a      	negs	r2, r7
 800061a:	4325      	orrs	r5, r4
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd00      	ble.n	8000622 <__aeabi_fadd+0x18a>
 8000620:	e0c5      	b.n	80007ae <__aeabi_fadd+0x316>
 8000622:	002c      	movs	r4, r5
 8000624:	2620      	movs	r6, #32
 8000626:	40d4      	lsrs	r4, r2
 8000628:	1ab2      	subs	r2, r6, r2
 800062a:	4095      	lsls	r5, r2
 800062c:	1e6a      	subs	r2, r5, #1
 800062e:	4195      	sbcs	r5, r2
 8000630:	4325      	orrs	r5, r4
 8000632:	1b5d      	subs	r5, r3, r5
 8000634:	0004      	movs	r4, r0
 8000636:	4689      	mov	r9, r1
 8000638:	e7a5      	b.n	8000586 <__aeabi_fadd+0xee>
 800063a:	01ab      	lsls	r3, r5, #6
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	e750      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000640:	2400      	movs	r4, #0
 8000642:	2201      	movs	r2, #1
 8000644:	464b      	mov	r3, r9
 8000646:	401a      	ands	r2, r3
 8000648:	076b      	lsls	r3, r5, #29
 800064a:	d1ba      	bne.n	80005c2 <__aeabi_fadd+0x12a>
 800064c:	e742      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d13b      	bne.n	80006ca <__aeabi_fadd+0x232>
 8000652:	3401      	adds	r4, #1
 8000654:	b2e0      	uxtb	r0, r4
 8000656:	2801      	cmp	r0, #1
 8000658:	dd4a      	ble.n	80006f0 <__aeabi_fadd+0x258>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d0bd      	beq.n	80005da <__aeabi_fadd+0x142>
 800065e:	2607      	movs	r6, #7
 8000660:	18ed      	adds	r5, r5, r3
 8000662:	086d      	lsrs	r5, r5, #1
 8000664:	402e      	ands	r6, r5
 8000666:	e7a7      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000668:	2307      	movs	r3, #7
 800066a:	4d57      	ldr	r5, [pc, #348]	; (80007c8 <__aeabi_fadd+0x330>)
 800066c:	1a24      	subs	r4, r4, r0
 800066e:	4035      	ands	r5, r6
 8000670:	401e      	ands	r6, r3
 8000672:	e7a1      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d11b      	bne.n	80006b0 <__aeabi_fadd+0x218>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d16e      	bne.n	800075a <__aeabi_fadd+0x2c2>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1ea>
 8000680:	e09a      	b.n	80007b8 <__aeabi_fadd+0x320>
 8000682:	000a      	movs	r2, r1
 8000684:	001d      	movs	r5, r3
 8000686:	003c      	movs	r4, r7
 8000688:	e724      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800068a:	3f01      	subs	r7, #1
 800068c:	2f00      	cmp	r7, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x1fa>
 8000690:	e758      	b.n	8000544 <__aeabi_fadd+0xac>
 8000692:	2cff      	cmp	r4, #255	; 0xff
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x200>
 8000696:	e74a      	b.n	800052e <__aeabi_fadd+0x96>
 8000698:	e7a7      	b.n	80005ea <__aeabi_fadd+0x152>
 800069a:	1b5e      	subs	r6, r3, r5
 800069c:	4689      	mov	r9, r1
 800069e:	e776      	b.n	800058e <__aeabi_fadd+0xf6>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d11c      	bne.n	80006de <__aeabi_fadd+0x246>
 80006a4:	000a      	movs	r2, r1
 80006a6:	28ff      	cmp	r0, #255	; 0xff
 80006a8:	d01f      	beq.n	80006ea <__aeabi_fadd+0x252>
 80006aa:	0004      	movs	r4, r0
 80006ac:	001d      	movs	r5, r3
 80006ae:	e711      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d15d      	bne.n	8000770 <__aeabi_fadd+0x2d8>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d117      	bne.n	80006e8 <__aeabi_fadd+0x250>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	2200      	movs	r2, #0
 80006bc:	03db      	lsls	r3, r3, #15
 80006be:	26ff      	movs	r6, #255	; 0xff
 80006c0:	e70f      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006c2:	000a      	movs	r2, r1
 80006c4:	26ff      	movs	r6, #255	; 0xff
 80006c6:	2300      	movs	r3, #0
 80006c8:	e70b      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d121      	bne.n	8000712 <__aeabi_fadd+0x27a>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d166      	bne.n	80007a0 <__aeabi_fadd+0x308>
 80006d2:	28ff      	cmp	r0, #255	; 0xff
 80006d4:	d1e9      	bne.n	80006aa <__aeabi_fadd+0x212>
 80006d6:	001d      	movs	r5, r3
 80006d8:	e787      	b.n	80005ea <__aeabi_fadd+0x152>
 80006da:	2301      	movs	r3, #1
 80006dc:	e752      	b.n	8000584 <__aeabi_fadd+0xec>
 80006de:	1c7a      	adds	r2, r7, #1
 80006e0:	d0a7      	beq.n	8000632 <__aeabi_fadd+0x19a>
 80006e2:	43fa      	mvns	r2, r7
 80006e4:	28ff      	cmp	r0, #255	; 0xff
 80006e6:	d199      	bne.n	800061c <__aeabi_fadd+0x184>
 80006e8:	000a      	movs	r2, r1
 80006ea:	001d      	movs	r5, r3
 80006ec:	24ff      	movs	r4, #255	; 0xff
 80006ee:	e6f1      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d121      	bne.n	8000738 <__aeabi_fadd+0x2a0>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d04f      	beq.n	8000798 <__aeabi_fadd+0x300>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d04c      	beq.n	8000796 <__aeabi_fadd+0x2fe>
 80006fc:	18ed      	adds	r5, r5, r3
 80006fe:	016b      	lsls	r3, r5, #5
 8000700:	d59e      	bpl.n	8000640 <__aeabi_fadd+0x1a8>
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <__aeabi_fadd+0x330>)
 8000704:	3607      	adds	r6, #7
 8000706:	402e      	ands	r6, r5
 8000708:	2401      	movs	r4, #1
 800070a:	401d      	ands	r5, r3
 800070c:	e754      	b.n	80005b8 <__aeabi_fadd+0x120>
 800070e:	2301      	movs	r3, #1
 8000710:	e718      	b.n	8000544 <__aeabi_fadd+0xac>
 8000712:	28ff      	cmp	r0, #255	; 0xff
 8000714:	d0df      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 8000716:	2480      	movs	r4, #128	; 0x80
 8000718:	04e4      	lsls	r4, r4, #19
 800071a:	427f      	negs	r7, r7
 800071c:	4325      	orrs	r5, r4
 800071e:	2f1b      	cmp	r7, #27
 8000720:	dc4d      	bgt.n	80007be <__aeabi_fadd+0x326>
 8000722:	2620      	movs	r6, #32
 8000724:	1bf6      	subs	r6, r6, r7
 8000726:	002c      	movs	r4, r5
 8000728:	40b5      	lsls	r5, r6
 800072a:	40fc      	lsrs	r4, r7
 800072c:	1e6a      	subs	r2, r5, #1
 800072e:	4195      	sbcs	r5, r2
 8000730:	4325      	orrs	r5, r4
 8000732:	18ed      	adds	r5, r5, r3
 8000734:	0004      	movs	r4, r0
 8000736:	e706      	b.n	8000546 <__aeabi_fadd+0xae>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d0cc      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2aa>
 8000740:	e753      	b.n	80005ea <__aeabi_fadd+0x152>
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	4660      	mov	r0, ip
 8000746:	03c9      	lsls	r1, r1, #15
 8000748:	4208      	tst	r0, r1
 800074a:	d003      	beq.n	8000754 <__aeabi_fadd+0x2bc>
 800074c:	4640      	mov	r0, r8
 800074e:	4208      	tst	r0, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x2bc>
 8000752:	001d      	movs	r5, r3
 8000754:	2101      	movs	r1, #1
 8000756:	4011      	ands	r1, r2
 8000758:	e747      	b.n	80005ea <__aeabi_fadd+0x152>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 800075e:	e6b9      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000760:	1aea      	subs	r2, r5, r3
 8000762:	0150      	lsls	r0, r2, #5
 8000764:	d525      	bpl.n	80007b2 <__aeabi_fadd+0x31a>
 8000766:	2607      	movs	r6, #7
 8000768:	1b5d      	subs	r5, r3, r5
 800076a:	402e      	ands	r6, r5
 800076c:	4689      	mov	r9, r1
 800076e:	e723      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000770:	24ff      	movs	r4, #255	; 0xff
 8000772:	2b00      	cmp	r3, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x2e0>
 8000776:	e6ad      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4660      	mov	r0, ip
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4210      	tst	r0, r2
 8000780:	d004      	beq.n	800078c <__aeabi_fadd+0x2f4>
 8000782:	4640      	mov	r0, r8
 8000784:	4210      	tst	r0, r2
 8000786:	d101      	bne.n	800078c <__aeabi_fadd+0x2f4>
 8000788:	001d      	movs	r5, r3
 800078a:	4689      	mov	r9, r1
 800078c:	2201      	movs	r2, #1
 800078e:	464b      	mov	r3, r9
 8000790:	24ff      	movs	r4, #255	; 0xff
 8000792:	401a      	ands	r2, r3
 8000794:	e69e      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000796:	002b      	movs	r3, r5
 8000798:	08dd      	lsrs	r5, r3, #3
 800079a:	000a      	movs	r2, r1
 800079c:	2400      	movs	r4, #0
 800079e:	e69d      	b.n	80004dc <__aeabi_fadd+0x44>
 80007a0:	1c7a      	adds	r2, r7, #1
 80007a2:	d0c6      	beq.n	8000732 <__aeabi_fadd+0x29a>
 80007a4:	43ff      	mvns	r7, r7
 80007a6:	28ff      	cmp	r0, #255	; 0xff
 80007a8:	d1b9      	bne.n	800071e <__aeabi_fadd+0x286>
 80007aa:	001d      	movs	r5, r3
 80007ac:	e71d      	b.n	80005ea <__aeabi_fadd+0x152>
 80007ae:	2501      	movs	r5, #1
 80007b0:	e73f      	b.n	8000632 <__aeabi_fadd+0x19a>
 80007b2:	1e15      	subs	r5, r2, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x320>
 80007b6:	e744      	b.n	8000642 <__aeabi_fadd+0x1aa>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	e691      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80007be:	2501      	movs	r5, #1
 80007c0:	e7b7      	b.n	8000732 <__aeabi_fadd+0x29a>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	7dffffff 	.word	0x7dffffff
 80007c8:	fbffffff 	.word	0xfbffffff

080007cc <__eqsf2>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	0042      	lsls	r2, r0, #1
 80007d0:	024e      	lsls	r6, r1, #9
 80007d2:	004c      	lsls	r4, r1, #1
 80007d4:	0245      	lsls	r5, r0, #9
 80007d6:	0a6d      	lsrs	r5, r5, #9
 80007d8:	0e12      	lsrs	r2, r2, #24
 80007da:	0fc3      	lsrs	r3, r0, #31
 80007dc:	0a76      	lsrs	r6, r6, #9
 80007de:	0e24      	lsrs	r4, r4, #24
 80007e0:	0fc9      	lsrs	r1, r1, #31
 80007e2:	2aff      	cmp	r2, #255	; 0xff
 80007e4:	d00f      	beq.n	8000806 <__eqsf2+0x3a>
 80007e6:	2cff      	cmp	r4, #255	; 0xff
 80007e8:	d011      	beq.n	800080e <__eqsf2+0x42>
 80007ea:	2001      	movs	r0, #1
 80007ec:	42a2      	cmp	r2, r4
 80007ee:	d000      	beq.n	80007f2 <__eqsf2+0x26>
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	42b5      	cmp	r5, r6
 80007f4:	d1fc      	bne.n	80007f0 <__eqsf2+0x24>
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d00d      	beq.n	8000816 <__eqsf2+0x4a>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d1f8      	bne.n	80007f0 <__eqsf2+0x24>
 80007fe:	0028      	movs	r0, r5
 8000800:	1e45      	subs	r5, r0, #1
 8000802:	41a8      	sbcs	r0, r5
 8000804:	e7f4      	b.n	80007f0 <__eqsf2+0x24>
 8000806:	2001      	movs	r0, #1
 8000808:	2d00      	cmp	r5, #0
 800080a:	d1f1      	bne.n	80007f0 <__eqsf2+0x24>
 800080c:	e7eb      	b.n	80007e6 <__eqsf2+0x1a>
 800080e:	2001      	movs	r0, #1
 8000810:	2e00      	cmp	r6, #0
 8000812:	d1ed      	bne.n	80007f0 <__eqsf2+0x24>
 8000814:	e7e9      	b.n	80007ea <__eqsf2+0x1e>
 8000816:	2000      	movs	r0, #0
 8000818:	e7ea      	b.n	80007f0 <__eqsf2+0x24>
 800081a:	46c0      	nop			; (mov r8, r8)

0800081c <__gesf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	004a      	lsls	r2, r1, #1
 8000820:	024e      	lsls	r6, r1, #9
 8000822:	0245      	lsls	r5, r0, #9
 8000824:	0044      	lsls	r4, r0, #1
 8000826:	0a6d      	lsrs	r5, r5, #9
 8000828:	0e24      	lsrs	r4, r4, #24
 800082a:	0fc3      	lsrs	r3, r0, #31
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e12      	lsrs	r2, r2, #24
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	2cff      	cmp	r4, #255	; 0xff
 8000834:	d015      	beq.n	8000862 <__gesf2+0x46>
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d00e      	beq.n	8000858 <__gesf2+0x3c>
 800083a:	2c00      	cmp	r4, #0
 800083c:	d115      	bne.n	800086a <__gesf2+0x4e>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d101      	bne.n	8000846 <__gesf2+0x2a>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d01c      	beq.n	8000880 <__gesf2+0x64>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d014      	beq.n	8000874 <__gesf2+0x58>
 800084a:	428b      	cmp	r3, r1
 800084c:	d027      	beq.n	800089e <__gesf2+0x82>
 800084e:	2002      	movs	r0, #2
 8000850:	3b01      	subs	r3, #1
 8000852:	4018      	ands	r0, r3
 8000854:	3801      	subs	r0, #1
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	2e00      	cmp	r6, #0
 800085a:	d0ee      	beq.n	800083a <__gesf2+0x1e>
 800085c:	2002      	movs	r0, #2
 800085e:	4240      	negs	r0, r0
 8000860:	e7f9      	b.n	8000856 <__gesf2+0x3a>
 8000862:	2d00      	cmp	r5, #0
 8000864:	d1fa      	bne.n	800085c <__gesf2+0x40>
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d00e      	beq.n	8000888 <__gesf2+0x6c>
 800086a:	2a00      	cmp	r2, #0
 800086c:	d10e      	bne.n	800088c <__gesf2+0x70>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d0ed      	beq.n	800084e <__gesf2+0x32>
 8000872:	e00b      	b.n	800088c <__gesf2+0x70>
 8000874:	2301      	movs	r3, #1
 8000876:	3901      	subs	r1, #1
 8000878:	4399      	bics	r1, r3
 800087a:	0008      	movs	r0, r1
 800087c:	3001      	adds	r0, #1
 800087e:	e7ea      	b.n	8000856 <__gesf2+0x3a>
 8000880:	2000      	movs	r0, #0
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0e7      	beq.n	8000856 <__gesf2+0x3a>
 8000886:	e7e2      	b.n	800084e <__gesf2+0x32>
 8000888:	2e00      	cmp	r6, #0
 800088a:	d1e7      	bne.n	800085c <__gesf2+0x40>
 800088c:	428b      	cmp	r3, r1
 800088e:	d1de      	bne.n	800084e <__gesf2+0x32>
 8000890:	4294      	cmp	r4, r2
 8000892:	dd05      	ble.n	80008a0 <__gesf2+0x84>
 8000894:	2102      	movs	r1, #2
 8000896:	1e58      	subs	r0, r3, #1
 8000898:	4008      	ands	r0, r1
 800089a:	3801      	subs	r0, #1
 800089c:	e7db      	b.n	8000856 <__gesf2+0x3a>
 800089e:	2400      	movs	r4, #0
 80008a0:	42a2      	cmp	r2, r4
 80008a2:	dc04      	bgt.n	80008ae <__gesf2+0x92>
 80008a4:	42b5      	cmp	r5, r6
 80008a6:	d8d2      	bhi.n	800084e <__gesf2+0x32>
 80008a8:	2000      	movs	r0, #0
 80008aa:	42b5      	cmp	r5, r6
 80008ac:	d2d3      	bcs.n	8000856 <__gesf2+0x3a>
 80008ae:	1e58      	subs	r0, r3, #1
 80008b0:	2301      	movs	r3, #1
 80008b2:	4398      	bics	r0, r3
 80008b4:	3001      	adds	r0, #1
 80008b6:	e7ce      	b.n	8000856 <__gesf2+0x3a>

080008b8 <__lesf2>:
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	0042      	lsls	r2, r0, #1
 80008bc:	0244      	lsls	r4, r0, #9
 80008be:	024d      	lsls	r5, r1, #9
 80008c0:	0fc3      	lsrs	r3, r0, #31
 80008c2:	0048      	lsls	r0, r1, #1
 80008c4:	0a64      	lsrs	r4, r4, #9
 80008c6:	0e12      	lsrs	r2, r2, #24
 80008c8:	0a6d      	lsrs	r5, r5, #9
 80008ca:	0e00      	lsrs	r0, r0, #24
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	2aff      	cmp	r2, #255	; 0xff
 80008d0:	d012      	beq.n	80008f8 <__lesf2+0x40>
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d00c      	beq.n	80008f0 <__lesf2+0x38>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d112      	bne.n	8000900 <__lesf2+0x48>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d119      	bne.n	8000912 <__lesf2+0x5a>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d117      	bne.n	8000912 <__lesf2+0x5a>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d02b      	beq.n	800093e <__lesf2+0x86>
 80008e6:	2002      	movs	r0, #2
 80008e8:	3b01      	subs	r3, #1
 80008ea:	4018      	ands	r0, r3
 80008ec:	3801      	subs	r0, #1
 80008ee:	e026      	b.n	800093e <__lesf2+0x86>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d0f0      	beq.n	80008d6 <__lesf2+0x1e>
 80008f4:	2002      	movs	r0, #2
 80008f6:	e022      	b.n	800093e <__lesf2+0x86>
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d1fb      	bne.n	80008f4 <__lesf2+0x3c>
 80008fc:	28ff      	cmp	r0, #255	; 0xff
 80008fe:	d01f      	beq.n	8000940 <__lesf2+0x88>
 8000900:	2800      	cmp	r0, #0
 8000902:	d11f      	bne.n	8000944 <__lesf2+0x8c>
 8000904:	2d00      	cmp	r5, #0
 8000906:	d11d      	bne.n	8000944 <__lesf2+0x8c>
 8000908:	2002      	movs	r0, #2
 800090a:	3b01      	subs	r3, #1
 800090c:	4018      	ands	r0, r3
 800090e:	3801      	subs	r0, #1
 8000910:	e015      	b.n	800093e <__lesf2+0x86>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d00e      	beq.n	8000934 <__lesf2+0x7c>
 8000916:	428b      	cmp	r3, r1
 8000918:	d1e5      	bne.n	80008e6 <__lesf2+0x2e>
 800091a:	2200      	movs	r2, #0
 800091c:	4290      	cmp	r0, r2
 800091e:	dc04      	bgt.n	800092a <__lesf2+0x72>
 8000920:	42ac      	cmp	r4, r5
 8000922:	d8e0      	bhi.n	80008e6 <__lesf2+0x2e>
 8000924:	2000      	movs	r0, #0
 8000926:	42ac      	cmp	r4, r5
 8000928:	d209      	bcs.n	800093e <__lesf2+0x86>
 800092a:	1e58      	subs	r0, r3, #1
 800092c:	2301      	movs	r3, #1
 800092e:	4398      	bics	r0, r3
 8000930:	3001      	adds	r0, #1
 8000932:	e004      	b.n	800093e <__lesf2+0x86>
 8000934:	2301      	movs	r3, #1
 8000936:	3901      	subs	r1, #1
 8000938:	4399      	bics	r1, r3
 800093a:	0008      	movs	r0, r1
 800093c:	3001      	adds	r0, #1
 800093e:	bd30      	pop	{r4, r5, pc}
 8000940:	2d00      	cmp	r5, #0
 8000942:	d1d7      	bne.n	80008f4 <__lesf2+0x3c>
 8000944:	428b      	cmp	r3, r1
 8000946:	d1ce      	bne.n	80008e6 <__lesf2+0x2e>
 8000948:	4282      	cmp	r2, r0
 800094a:	dde7      	ble.n	800091c <__lesf2+0x64>
 800094c:	2102      	movs	r1, #2
 800094e:	1e58      	subs	r0, r3, #1
 8000950:	4008      	ands	r0, r1
 8000952:	3801      	subs	r0, #1
 8000954:	e7f3      	b.n	800093e <__lesf2+0x86>
 8000956:	46c0      	nop			; (mov r8, r8)

08000958 <__aeabi_fmul>:
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	464e      	mov	r6, r9
 800095c:	4657      	mov	r7, sl
 800095e:	4645      	mov	r5, r8
 8000960:	46de      	mov	lr, fp
 8000962:	b5e0      	push	{r5, r6, r7, lr}
 8000964:	0243      	lsls	r3, r0, #9
 8000966:	0a5b      	lsrs	r3, r3, #9
 8000968:	0045      	lsls	r5, r0, #1
 800096a:	b083      	sub	sp, #12
 800096c:	1c0f      	adds	r7, r1, #0
 800096e:	4699      	mov	r9, r3
 8000970:	0e2d      	lsrs	r5, r5, #24
 8000972:	0fc6      	lsrs	r6, r0, #31
 8000974:	2d00      	cmp	r5, #0
 8000976:	d057      	beq.n	8000a28 <__aeabi_fmul+0xd0>
 8000978:	2dff      	cmp	r5, #255	; 0xff
 800097a:	d024      	beq.n	80009c6 <__aeabi_fmul+0x6e>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	04c0      	lsls	r0, r0, #19
 8000982:	4318      	orrs	r0, r3
 8000984:	2300      	movs	r3, #0
 8000986:	4681      	mov	r9, r0
 8000988:	469a      	mov	sl, r3
 800098a:	469b      	mov	fp, r3
 800098c:	3d7f      	subs	r5, #127	; 0x7f
 800098e:	027c      	lsls	r4, r7, #9
 8000990:	007a      	lsls	r2, r7, #1
 8000992:	0ffb      	lsrs	r3, r7, #31
 8000994:	0a64      	lsrs	r4, r4, #9
 8000996:	0e12      	lsrs	r2, r2, #24
 8000998:	4698      	mov	r8, r3
 800099a:	d023      	beq.n	80009e4 <__aeabi_fmul+0x8c>
 800099c:	2aff      	cmp	r2, #255	; 0xff
 800099e:	d04b      	beq.n	8000a38 <__aeabi_fmul+0xe0>
 80009a0:	00e3      	lsls	r3, r4, #3
 80009a2:	2480      	movs	r4, #128	; 0x80
 80009a4:	2000      	movs	r0, #0
 80009a6:	04e4      	lsls	r4, r4, #19
 80009a8:	3a7f      	subs	r2, #127	; 0x7f
 80009aa:	431c      	orrs	r4, r3
 80009ac:	18ad      	adds	r5, r5, r2
 80009ae:	1c6b      	adds	r3, r5, #1
 80009b0:	4647      	mov	r7, r8
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	4653      	mov	r3, sl
 80009b6:	4077      	eors	r7, r6
 80009b8:	003a      	movs	r2, r7
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d848      	bhi.n	8000a50 <__aeabi_fmul+0xf8>
 80009be:	497d      	ldr	r1, [pc, #500]	; (8000bb4 <__aeabi_fmul+0x25c>)
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	58cb      	ldr	r3, [r1, r3]
 80009c4:	469f      	mov	pc, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_fmul+0x74>
 80009ca:	e085      	b.n	8000ad8 <__aeabi_fmul+0x180>
 80009cc:	3308      	adds	r3, #8
 80009ce:	469a      	mov	sl, r3
 80009d0:	3b06      	subs	r3, #6
 80009d2:	469b      	mov	fp, r3
 80009d4:	027c      	lsls	r4, r7, #9
 80009d6:	007a      	lsls	r2, r7, #1
 80009d8:	0ffb      	lsrs	r3, r7, #31
 80009da:	25ff      	movs	r5, #255	; 0xff
 80009dc:	0a64      	lsrs	r4, r4, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	4698      	mov	r8, r3
 80009e2:	d1db      	bne.n	800099c <__aeabi_fmul+0x44>
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fmul+0x92>
 80009e8:	e090      	b.n	8000b0c <__aeabi_fmul+0x1b4>
 80009ea:	4652      	mov	r2, sl
 80009ec:	2301      	movs	r3, #1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4692      	mov	sl, r2
 80009f2:	2001      	movs	r0, #1
 80009f4:	e7db      	b.n	80009ae <__aeabi_fmul+0x56>
 80009f6:	464c      	mov	r4, r9
 80009f8:	4658      	mov	r0, fp
 80009fa:	0017      	movs	r7, r2
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d024      	beq.n	8000a4a <__aeabi_fmul+0xf2>
 8000a00:	2803      	cmp	r0, #3
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fmul+0xae>
 8000a04:	e0cf      	b.n	8000ba6 <__aeabi_fmul+0x24e>
 8000a06:	2200      	movs	r2, #0
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2801      	cmp	r0, #1
 8000a0c:	d14d      	bne.n	8000aaa <__aeabi_fmul+0x152>
 8000a0e:	0258      	lsls	r0, r3, #9
 8000a10:	05d2      	lsls	r2, r2, #23
 8000a12:	0a40      	lsrs	r0, r0, #9
 8000a14:	07ff      	lsls	r7, r7, #31
 8000a16:	4310      	orrs	r0, r2
 8000a18:	4338      	orrs	r0, r7
 8000a1a:	b003      	add	sp, #12
 8000a1c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a1e:	4690      	mov	r8, r2
 8000a20:	4699      	mov	r9, r3
 8000a22:	46a2      	mov	sl, r4
 8000a24:	46ab      	mov	fp, r5
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d15b      	bne.n	8000ae4 <__aeabi_fmul+0x18c>
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	469a      	mov	sl, r3
 8000a30:	3b03      	subs	r3, #3
 8000a32:	2500      	movs	r5, #0
 8000a34:	469b      	mov	fp, r3
 8000a36:	e7aa      	b.n	800098e <__aeabi_fmul+0x36>
 8000a38:	35ff      	adds	r5, #255	; 0xff
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d160      	bne.n	8000b00 <__aeabi_fmul+0x1a8>
 8000a3e:	4652      	mov	r2, sl
 8000a40:	2302      	movs	r3, #2
 8000a42:	431a      	orrs	r2, r3
 8000a44:	4692      	mov	sl, r2
 8000a46:	2002      	movs	r0, #2
 8000a48:	e7b1      	b.n	80009ae <__aeabi_fmul+0x56>
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e7de      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000a50:	464b      	mov	r3, r9
 8000a52:	0c1b      	lsrs	r3, r3, #16
 8000a54:	469c      	mov	ip, r3
 8000a56:	464b      	mov	r3, r9
 8000a58:	0426      	lsls	r6, r4, #16
 8000a5a:	0c36      	lsrs	r6, r6, #16
 8000a5c:	0418      	lsls	r0, r3, #16
 8000a5e:	4661      	mov	r1, ip
 8000a60:	0033      	movs	r3, r6
 8000a62:	0c22      	lsrs	r2, r4, #16
 8000a64:	4664      	mov	r4, ip
 8000a66:	0c00      	lsrs	r0, r0, #16
 8000a68:	4343      	muls	r3, r0
 8000a6a:	434e      	muls	r6, r1
 8000a6c:	4350      	muls	r0, r2
 8000a6e:	4354      	muls	r4, r2
 8000a70:	1980      	adds	r0, r0, r6
 8000a72:	0c1a      	lsrs	r2, r3, #16
 8000a74:	1812      	adds	r2, r2, r0
 8000a76:	4296      	cmp	r6, r2
 8000a78:	d903      	bls.n	8000a82 <__aeabi_fmul+0x12a>
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0249      	lsls	r1, r1, #9
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4464      	add	r4, ip
 8000a82:	041b      	lsls	r3, r3, #16
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	0410      	lsls	r0, r2, #16
 8000a88:	18c0      	adds	r0, r0, r3
 8000a8a:	0183      	lsls	r3, r0, #6
 8000a8c:	1e5e      	subs	r6, r3, #1
 8000a8e:	41b3      	sbcs	r3, r6
 8000a90:	0e80      	lsrs	r0, r0, #26
 8000a92:	4318      	orrs	r0, r3
 8000a94:	0c13      	lsrs	r3, r2, #16
 8000a96:	191b      	adds	r3, r3, r4
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	4303      	orrs	r3, r0
 8000a9c:	001c      	movs	r4, r3
 8000a9e:	0123      	lsls	r3, r4, #4
 8000aa0:	d579      	bpl.n	8000b96 <__aeabi_fmul+0x23e>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	0862      	lsrs	r2, r4, #1
 8000aa6:	401c      	ands	r4, r3
 8000aa8:	4314      	orrs	r4, r2
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	327f      	adds	r2, #127	; 0x7f
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	dd4d      	ble.n	8000b4e <__aeabi_fmul+0x1f6>
 8000ab2:	0763      	lsls	r3, r4, #29
 8000ab4:	d004      	beq.n	8000ac0 <__aeabi_fmul+0x168>
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	4023      	ands	r3, r4
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fmul+0x168>
 8000abe:	3404      	adds	r4, #4
 8000ac0:	0123      	lsls	r3, r4, #4
 8000ac2:	d503      	bpl.n	8000acc <__aeabi_fmul+0x174>
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <__aeabi_fmul+0x260>)
 8000ac6:	9a01      	ldr	r2, [sp, #4]
 8000ac8:	401c      	ands	r4, r3
 8000aca:	3280      	adds	r2, #128	; 0x80
 8000acc:	2afe      	cmp	r2, #254	; 0xfe
 8000ace:	dcbc      	bgt.n	8000a4a <__aeabi_fmul+0xf2>
 8000ad0:	01a3      	lsls	r3, r4, #6
 8000ad2:	0a5b      	lsrs	r3, r3, #9
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	e79a      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000ad8:	230c      	movs	r3, #12
 8000ada:	469a      	mov	sl, r3
 8000adc:	3b09      	subs	r3, #9
 8000ade:	25ff      	movs	r5, #255	; 0xff
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e754      	b.n	800098e <__aeabi_fmul+0x36>
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fad7 	bl	8001098 <__clzsi2>
 8000aea:	464a      	mov	r2, r9
 8000aec:	1f43      	subs	r3, r0, #5
 8000aee:	2576      	movs	r5, #118	; 0x76
 8000af0:	409a      	lsls	r2, r3
 8000af2:	2300      	movs	r3, #0
 8000af4:	426d      	negs	r5, r5
 8000af6:	4691      	mov	r9, r2
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	469a      	mov	sl, r3
 8000afc:	469b      	mov	fp, r3
 8000afe:	e746      	b.n	800098e <__aeabi_fmul+0x36>
 8000b00:	4652      	mov	r2, sl
 8000b02:	2303      	movs	r3, #3
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4692      	mov	sl, r2
 8000b08:	2003      	movs	r0, #3
 8000b0a:	e750      	b.n	80009ae <__aeabi_fmul+0x56>
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	f000 fac3 	bl	8001098 <__clzsi2>
 8000b12:	1f43      	subs	r3, r0, #5
 8000b14:	1a2d      	subs	r5, r5, r0
 8000b16:	409c      	lsls	r4, r3
 8000b18:	3d76      	subs	r5, #118	; 0x76
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	e747      	b.n	80009ae <__aeabi_fmul+0x56>
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	2700      	movs	r7, #0
 8000b22:	03db      	lsls	r3, r3, #15
 8000b24:	22ff      	movs	r2, #255	; 0xff
 8000b26:	e772      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b28:	4642      	mov	r2, r8
 8000b2a:	e766      	b.n	80009fa <__aeabi_fmul+0xa2>
 8000b2c:	464c      	mov	r4, r9
 8000b2e:	0032      	movs	r2, r6
 8000b30:	4658      	mov	r0, fp
 8000b32:	e762      	b.n	80009fa <__aeabi_fmul+0xa2>
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	464a      	mov	r2, r9
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	421a      	tst	r2, r3
 8000b3c:	d022      	beq.n	8000b84 <__aeabi_fmul+0x22c>
 8000b3e:	421c      	tst	r4, r3
 8000b40:	d120      	bne.n	8000b84 <__aeabi_fmul+0x22c>
 8000b42:	4323      	orrs	r3, r4
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	0a5b      	lsrs	r3, r3, #9
 8000b48:	4647      	mov	r7, r8
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	e75f      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	1a9a      	subs	r2, r3, r2
 8000b52:	2a1b      	cmp	r2, #27
 8000b54:	dc21      	bgt.n	8000b9a <__aeabi_fmul+0x242>
 8000b56:	0023      	movs	r3, r4
 8000b58:	9901      	ldr	r1, [sp, #4]
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	319e      	adds	r1, #158	; 0x9e
 8000b5e:	408c      	lsls	r4, r1
 8000b60:	001a      	movs	r2, r3
 8000b62:	0023      	movs	r3, r4
 8000b64:	1e5c      	subs	r4, r3, #1
 8000b66:	41a3      	sbcs	r3, r4
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	075a      	lsls	r2, r3, #29
 8000b6c:	d004      	beq.n	8000b78 <__aeabi_fmul+0x220>
 8000b6e:	220f      	movs	r2, #15
 8000b70:	401a      	ands	r2, r3
 8000b72:	2a04      	cmp	r2, #4
 8000b74:	d000      	beq.n	8000b78 <__aeabi_fmul+0x220>
 8000b76:	3304      	adds	r3, #4
 8000b78:	015a      	lsls	r2, r3, #5
 8000b7a:	d411      	bmi.n	8000ba0 <__aeabi_fmul+0x248>
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	0a5b      	lsrs	r3, r3, #9
 8000b80:	2200      	movs	r2, #0
 8000b82:	e744      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	464a      	mov	r2, r9
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	0a5b      	lsrs	r3, r3, #9
 8000b90:	0037      	movs	r7, r6
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	e73b      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b96:	9501      	str	r5, [sp, #4]
 8000b98:	e787      	b.n	8000aaa <__aeabi_fmul+0x152>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e736      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e733      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	03db      	lsls	r3, r3, #15
 8000baa:	4323      	orrs	r3, r4
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	0a5b      	lsrs	r3, r3, #9
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	e72c      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000bb4:	08004f98 	.word	0x08004f98
 8000bb8:	f7ffffff 	.word	0xf7ffffff

08000bbc <__aeabi_fsub>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	4647      	mov	r7, r8
 8000bc0:	46ce      	mov	lr, r9
 8000bc2:	0044      	lsls	r4, r0, #1
 8000bc4:	0fc2      	lsrs	r2, r0, #31
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	0247      	lsls	r7, r0, #9
 8000bca:	0248      	lsls	r0, r1, #9
 8000bcc:	0a40      	lsrs	r0, r0, #9
 8000bce:	4684      	mov	ip, r0
 8000bd0:	4666      	mov	r6, ip
 8000bd2:	0048      	lsls	r0, r1, #1
 8000bd4:	0a7f      	lsrs	r7, r7, #9
 8000bd6:	0e24      	lsrs	r4, r4, #24
 8000bd8:	00f6      	lsls	r6, r6, #3
 8000bda:	0025      	movs	r5, r4
 8000bdc:	4690      	mov	r8, r2
 8000bde:	00fb      	lsls	r3, r7, #3
 8000be0:	0e00      	lsrs	r0, r0, #24
 8000be2:	0fc9      	lsrs	r1, r1, #31
 8000be4:	46b1      	mov	r9, r6
 8000be6:	28ff      	cmp	r0, #255	; 0xff
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x30>
 8000bea:	e085      	b.n	8000cf8 <__aeabi_fsub+0x13c>
 8000bec:	2601      	movs	r6, #1
 8000bee:	4071      	eors	r1, r6
 8000bf0:	1a26      	subs	r6, r4, r0
 8000bf2:	4291      	cmp	r1, r2
 8000bf4:	d057      	beq.n	8000ca6 <__aeabi_fsub+0xea>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	dd43      	ble.n	8000c82 <__aeabi_fsub+0xc6>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fsub+0x44>
 8000bfe:	e07f      	b.n	8000d00 <__aeabi_fsub+0x144>
 8000c00:	4649      	mov	r1, r9
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fsub+0x4c>
 8000c06:	e0aa      	b.n	8000d5e <__aeabi_fsub+0x1a2>
 8000c08:	3e01      	subs	r6, #1
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_fsub+0x54>
 8000c0e:	e0f7      	b.n	8000e00 <__aeabi_fsub+0x244>
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	015a      	lsls	r2, r3, #5
 8000c14:	d400      	bmi.n	8000c18 <__aeabi_fsub+0x5c>
 8000c16:	e08b      	b.n	8000d30 <__aeabi_fsub+0x174>
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	099c      	lsrs	r4, r3, #6
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f000 fa3b 	bl	8001098 <__clzsi2>
 8000c22:	3805      	subs	r0, #5
 8000c24:	4084      	lsls	r4, r0
 8000c26:	4285      	cmp	r5, r0
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_fsub+0x70>
 8000c2a:	e0d3      	b.n	8000dd4 <__aeabi_fsub+0x218>
 8000c2c:	1b45      	subs	r5, r0, r5
 8000c2e:	0023      	movs	r3, r4
 8000c30:	2020      	movs	r0, #32
 8000c32:	3501      	adds	r5, #1
 8000c34:	40eb      	lsrs	r3, r5
 8000c36:	1b45      	subs	r5, r0, r5
 8000c38:	40ac      	lsls	r4, r5
 8000c3a:	1e62      	subs	r2, r4, #1
 8000c3c:	4194      	sbcs	r4, r2
 8000c3e:	4323      	orrs	r3, r4
 8000c40:	2407      	movs	r4, #7
 8000c42:	2500      	movs	r5, #0
 8000c44:	401c      	ands	r4, r3
 8000c46:	2201      	movs	r2, #1
 8000c48:	4641      	mov	r1, r8
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	2c00      	cmp	r4, #0
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fsub+0x9e>
 8000c50:	210f      	movs	r1, #15
 8000c52:	4019      	ands	r1, r3
 8000c54:	2904      	cmp	r1, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0x9e>
 8000c58:	3304      	adds	r3, #4
 8000c5a:	0159      	lsls	r1, r3, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0xa4>
 8000c5e:	e080      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000c60:	3501      	adds	r5, #1
 8000c62:	b2ec      	uxtb	r4, r5
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0xae>
 8000c68:	e0a3      	b.n	8000db2 <__aeabi_fsub+0x1f6>
 8000c6a:	24ff      	movs	r4, #255	; 0xff
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	025b      	lsls	r3, r3, #9
 8000c70:	05e4      	lsls	r4, r4, #23
 8000c72:	0a58      	lsrs	r0, r3, #9
 8000c74:	07d2      	lsls	r2, r2, #31
 8000c76:	4320      	orrs	r0, r4
 8000c78:	4310      	orrs	r0, r2
 8000c7a:	bc0c      	pop	{r2, r3}
 8000c7c:	4690      	mov	r8, r2
 8000c7e:	4699      	mov	r9, r3
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d174      	bne.n	8000d70 <__aeabi_fsub+0x1b4>
 8000c86:	1c60      	adds	r0, r4, #1
 8000c88:	b2c0      	uxtb	r0, r0
 8000c8a:	2801      	cmp	r0, #1
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xd4>
 8000c8e:	e0a7      	b.n	8000de0 <__aeabi_fsub+0x224>
 8000c90:	464a      	mov	r2, r9
 8000c92:	1a9c      	subs	r4, r3, r2
 8000c94:	0162      	lsls	r2, r4, #5
 8000c96:	d500      	bpl.n	8000c9a <__aeabi_fsub+0xde>
 8000c98:	e0b6      	b.n	8000e08 <__aeabi_fsub+0x24c>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d1be      	bne.n	8000c1c <__aeabi_fsub+0x60>
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2400      	movs	r4, #0
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e7e3      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_fsub+0xf0>
 8000caa:	e085      	b.n	8000db8 <__aeabi_fsub+0x1fc>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d046      	beq.n	8000d3e <__aeabi_fsub+0x182>
 8000cb0:	2cff      	cmp	r4, #255	; 0xff
 8000cb2:	d049      	beq.n	8000d48 <__aeabi_fsub+0x18c>
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	04d2      	lsls	r2, r2, #19
 8000cba:	4310      	orrs	r0, r2
 8000cbc:	4681      	mov	r9, r0
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2e1b      	cmp	r6, #27
 8000cc2:	dc09      	bgt.n	8000cd8 <__aeabi_fsub+0x11c>
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	464c      	mov	r4, r9
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	4084      	lsls	r4, r0
 8000ccc:	464a      	mov	r2, r9
 8000cce:	0020      	movs	r0, r4
 8000cd0:	40f2      	lsrs	r2, r6
 8000cd2:	1e44      	subs	r4, r0, #1
 8000cd4:	41a0      	sbcs	r0, r4
 8000cd6:	4302      	orrs	r2, r0
 8000cd8:	189b      	adds	r3, r3, r2
 8000cda:	015a      	lsls	r2, r3, #5
 8000cdc:	d528      	bpl.n	8000d30 <__aeabi_fsub+0x174>
 8000cde:	3501      	adds	r5, #1
 8000ce0:	2dff      	cmp	r5, #255	; 0xff
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_fsub+0x12a>
 8000ce4:	e0a8      	b.n	8000e38 <__aeabi_fsub+0x27c>
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2407      	movs	r4, #7
 8000cea:	4994      	ldr	r1, [pc, #592]	; (8000f3c <__aeabi_fsub+0x380>)
 8000cec:	401a      	ands	r2, r3
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	401c      	ands	r4, r3
 8000cf6:	e7a6      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_fsub+0x142>
 8000cfc:	e778      	b.n	8000bf0 <__aeabi_fsub+0x34>
 8000cfe:	e775      	b.n	8000bec <__aeabi_fsub+0x30>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d054      	beq.n	8000dae <__aeabi_fsub+0x1f2>
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	4649      	mov	r1, r9
 8000d08:	04d2      	lsls	r2, r2, #19
 8000d0a:	4311      	orrs	r1, r2
 8000d0c:	4689      	mov	r9, r1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2e1b      	cmp	r6, #27
 8000d12:	dc09      	bgt.n	8000d28 <__aeabi_fsub+0x16c>
 8000d14:	2120      	movs	r1, #32
 8000d16:	4648      	mov	r0, r9
 8000d18:	1b89      	subs	r1, r1, r6
 8000d1a:	4088      	lsls	r0, r1
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	0001      	movs	r1, r0
 8000d20:	40f2      	lsrs	r2, r6
 8000d22:	1e48      	subs	r0, r1, #1
 8000d24:	4181      	sbcs	r1, r0
 8000d26:	430a      	orrs	r2, r1
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d500      	bpl.n	8000d30 <__aeabi_fsub+0x174>
 8000d2e:	e773      	b.n	8000c18 <__aeabi_fsub+0x5c>
 8000d30:	2201      	movs	r2, #1
 8000d32:	4641      	mov	r1, r8
 8000d34:	400a      	ands	r2, r1
 8000d36:	0759      	lsls	r1, r3, #29
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fsub+0x180>
 8000d3a:	e789      	b.n	8000c50 <__aeabi_fsub+0x94>
 8000d3c:	e011      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d158      	bne.n	8000df6 <__aeabi_fsub+0x23a>
 8000d44:	2cff      	cmp	r4, #255	; 0xff
 8000d46:	d10c      	bne.n	8000d62 <__aeabi_fsub+0x1a6>
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x194>
 8000d4e:	e78c      	b.n	8000c6a <__aeabi_fsub+0xae>
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	03c0      	lsls	r0, r0, #15
 8000d54:	4303      	orrs	r3, r0
 8000d56:	025b      	lsls	r3, r3, #9
 8000d58:	0a5b      	lsrs	r3, r3, #9
 8000d5a:	24ff      	movs	r4, #255	; 0xff
 8000d5c:	e787      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000d5e:	2cff      	cmp	r4, #255	; 0xff
 8000d60:	d025      	beq.n	8000dae <__aeabi_fsub+0x1f2>
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	2dff      	cmp	r5, #255	; 0xff
 8000d66:	d0f0      	beq.n	8000d4a <__aeabi_fsub+0x18e>
 8000d68:	025b      	lsls	r3, r3, #9
 8000d6a:	0a5b      	lsrs	r3, r3, #9
 8000d6c:	b2ec      	uxtb	r4, r5
 8000d6e:	e77e      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000d70:	2c00      	cmp	r4, #0
 8000d72:	d04d      	beq.n	8000e10 <__aeabi_fsub+0x254>
 8000d74:	28ff      	cmp	r0, #255	; 0xff
 8000d76:	d018      	beq.n	8000daa <__aeabi_fsub+0x1ee>
 8000d78:	2480      	movs	r4, #128	; 0x80
 8000d7a:	04e4      	lsls	r4, r4, #19
 8000d7c:	4272      	negs	r2, r6
 8000d7e:	4323      	orrs	r3, r4
 8000d80:	2a1b      	cmp	r2, #27
 8000d82:	dd00      	ble.n	8000d86 <__aeabi_fsub+0x1ca>
 8000d84:	e0c4      	b.n	8000f10 <__aeabi_fsub+0x354>
 8000d86:	001c      	movs	r4, r3
 8000d88:	2520      	movs	r5, #32
 8000d8a:	40d4      	lsrs	r4, r2
 8000d8c:	1aaa      	subs	r2, r5, r2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	4193      	sbcs	r3, r2
 8000d94:	4323      	orrs	r3, r4
 8000d96:	464a      	mov	r2, r9
 8000d98:	0005      	movs	r5, r0
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	4688      	mov	r8, r1
 8000d9e:	e738      	b.n	8000c12 <__aeabi_fsub+0x56>
 8000da0:	1c72      	adds	r2, r6, #1
 8000da2:	d0f8      	beq.n	8000d96 <__aeabi_fsub+0x1da>
 8000da4:	43f2      	mvns	r2, r6
 8000da6:	28ff      	cmp	r0, #255	; 0xff
 8000da8:	d1ea      	bne.n	8000d80 <__aeabi_fsub+0x1c4>
 8000daa:	000a      	movs	r2, r1
 8000dac:	464b      	mov	r3, r9
 8000dae:	25ff      	movs	r5, #255	; 0xff
 8000db0:	e7d7      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	0a5b      	lsrs	r3, r3, #9
 8000db6:	e75a      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d141      	bne.n	8000e40 <__aeabi_fsub+0x284>
 8000dbc:	1c65      	adds	r5, r4, #1
 8000dbe:	b2e9      	uxtb	r1, r5
 8000dc0:	2901      	cmp	r1, #1
 8000dc2:	dd45      	ble.n	8000e50 <__aeabi_fsub+0x294>
 8000dc4:	2dff      	cmp	r5, #255	; 0xff
 8000dc6:	d100      	bne.n	8000dca <__aeabi_fsub+0x20e>
 8000dc8:	e74f      	b.n	8000c6a <__aeabi_fsub+0xae>
 8000dca:	2407      	movs	r4, #7
 8000dcc:	444b      	add	r3, r9
 8000dce:	085b      	lsrs	r3, r3, #1
 8000dd0:	401c      	ands	r4, r3
 8000dd2:	e738      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <__aeabi_fsub+0x384>)
 8000dd8:	1a2d      	subs	r5, r5, r0
 8000dda:	4023      	ands	r3, r4
 8000ddc:	4014      	ands	r4, r2
 8000dde:	e732      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d11d      	bne.n	8000e20 <__aeabi_fsub+0x264>
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d17a      	bne.n	8000ede <__aeabi_fsub+0x322>
 8000de8:	464b      	mov	r3, r9
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_fsub+0x234>
 8000dee:	e091      	b.n	8000f14 <__aeabi_fsub+0x358>
 8000df0:	000a      	movs	r2, r1
 8000df2:	2500      	movs	r5, #0
 8000df4:	e7b5      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000df6:	3e01      	subs	r6, #1
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d119      	bne.n	8000e30 <__aeabi_fsub+0x274>
 8000dfc:	444b      	add	r3, r9
 8000dfe:	e76c      	b.n	8000cda <__aeabi_fsub+0x11e>
 8000e00:	2cff      	cmp	r4, #255	; 0xff
 8000e02:	d184      	bne.n	8000d0e <__aeabi_fsub+0x152>
 8000e04:	25ff      	movs	r5, #255	; 0xff
 8000e06:	e7ac      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000e08:	464a      	mov	r2, r9
 8000e0a:	4688      	mov	r8, r1
 8000e0c:	1ad4      	subs	r4, r2, r3
 8000e0e:	e705      	b.n	8000c1c <__aeabi_fsub+0x60>
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1c5      	bne.n	8000da0 <__aeabi_fsub+0x1e4>
 8000e14:	000a      	movs	r2, r1
 8000e16:	28ff      	cmp	r0, #255	; 0xff
 8000e18:	d0c8      	beq.n	8000dac <__aeabi_fsub+0x1f0>
 8000e1a:	0005      	movs	r5, r0
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	e7a0      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d149      	bne.n	8000eb8 <__aeabi_fsub+0x2fc>
 8000e24:	464b      	mov	r3, r9
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d077      	beq.n	8000f1a <__aeabi_fsub+0x35e>
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	25ff      	movs	r5, #255	; 0xff
 8000e2e:	e798      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000e30:	2cff      	cmp	r4, #255	; 0xff
 8000e32:	d000      	beq.n	8000e36 <__aeabi_fsub+0x27a>
 8000e34:	e743      	b.n	8000cbe <__aeabi_fsub+0x102>
 8000e36:	e787      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000e38:	000a      	movs	r2, r1
 8000e3a:	24ff      	movs	r4, #255	; 0xff
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e716      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000e40:	2c00      	cmp	r4, #0
 8000e42:	d115      	bne.n	8000e70 <__aeabi_fsub+0x2b4>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d157      	bne.n	8000ef8 <__aeabi_fsub+0x33c>
 8000e48:	28ff      	cmp	r0, #255	; 0xff
 8000e4a:	d1e6      	bne.n	8000e1a <__aeabi_fsub+0x25e>
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	e77b      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d120      	bne.n	8000e96 <__aeabi_fsub+0x2da>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d057      	beq.n	8000f08 <__aeabi_fsub+0x34c>
 8000e58:	4649      	mov	r1, r9
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d053      	beq.n	8000f06 <__aeabi_fsub+0x34a>
 8000e5e:	444b      	add	r3, r9
 8000e60:	015a      	lsls	r2, r3, #5
 8000e62:	d568      	bpl.n	8000f36 <__aeabi_fsub+0x37a>
 8000e64:	2407      	movs	r4, #7
 8000e66:	4a36      	ldr	r2, [pc, #216]	; (8000f40 <__aeabi_fsub+0x384>)
 8000e68:	401c      	ands	r4, r3
 8000e6a:	2501      	movs	r5, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	e6ea      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000e70:	28ff      	cmp	r0, #255	; 0xff
 8000e72:	d0eb      	beq.n	8000e4c <__aeabi_fsub+0x290>
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	04d2      	lsls	r2, r2, #19
 8000e78:	4276      	negs	r6, r6
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	2e1b      	cmp	r6, #27
 8000e7e:	dc53      	bgt.n	8000f28 <__aeabi_fsub+0x36c>
 8000e80:	2520      	movs	r5, #32
 8000e82:	1bad      	subs	r5, r5, r6
 8000e84:	001a      	movs	r2, r3
 8000e86:	40ab      	lsls	r3, r5
 8000e88:	40f2      	lsrs	r2, r6
 8000e8a:	1e5c      	subs	r4, r3, #1
 8000e8c:	41a3      	sbcs	r3, r4
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	444b      	add	r3, r9
 8000e92:	0005      	movs	r5, r0
 8000e94:	e721      	b.n	8000cda <__aeabi_fsub+0x11e>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0d8      	beq.n	8000e4c <__aeabi_fsub+0x290>
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	2900      	cmp	r1, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x2e6>
 8000ea0:	e752      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	03c9      	lsls	r1, r1, #15
 8000ea6:	420f      	tst	r7, r1
 8000ea8:	d100      	bne.n	8000eac <__aeabi_fsub+0x2f0>
 8000eaa:	e74d      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000eac:	4660      	mov	r0, ip
 8000eae:	4208      	tst	r0, r1
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_fsub+0x2f8>
 8000eb2:	e749      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	e747      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000eb8:	4648      	mov	r0, r9
 8000eba:	25ff      	movs	r5, #255	; 0xff
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x306>
 8000ec0:	e74f      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	03d2      	lsls	r2, r2, #15
 8000ec6:	4217      	tst	r7, r2
 8000ec8:	d004      	beq.n	8000ed4 <__aeabi_fsub+0x318>
 8000eca:	4660      	mov	r0, ip
 8000ecc:	4210      	tst	r0, r2
 8000ece:	d101      	bne.n	8000ed4 <__aeabi_fsub+0x318>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	4688      	mov	r8, r1
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4641      	mov	r1, r8
 8000ed8:	25ff      	movs	r5, #255	; 0xff
 8000eda:	400a      	ands	r2, r1
 8000edc:	e741      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000ede:	4648      	mov	r0, r9
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d01f      	beq.n	8000f24 <__aeabi_fsub+0x368>
 8000ee4:	1a1a      	subs	r2, r3, r0
 8000ee6:	0150      	lsls	r0, r2, #5
 8000ee8:	d520      	bpl.n	8000f2c <__aeabi_fsub+0x370>
 8000eea:	464a      	mov	r2, r9
 8000eec:	2407      	movs	r4, #7
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	401c      	ands	r4, r3
 8000ef2:	4688      	mov	r8, r1
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	e6a6      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000ef8:	1c74      	adds	r4, r6, #1
 8000efa:	d0c9      	beq.n	8000e90 <__aeabi_fsub+0x2d4>
 8000efc:	43f6      	mvns	r6, r6
 8000efe:	28ff      	cmp	r0, #255	; 0xff
 8000f00:	d1bc      	bne.n	8000e7c <__aeabi_fsub+0x2c0>
 8000f02:	464b      	mov	r3, r9
 8000f04:	e720      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000f06:	4699      	mov	r9, r3
 8000f08:	464b      	mov	r3, r9
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	e72b      	b.n	8000d68 <__aeabi_fsub+0x1ac>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e740      	b.n	8000d96 <__aeabi_fsub+0x1da>
 8000f14:	2200      	movs	r2, #0
 8000f16:	2300      	movs	r3, #0
 8000f18:	e6a9      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	03db      	lsls	r3, r3, #15
 8000f20:	24ff      	movs	r4, #255	; 0xff
 8000f22:	e6a4      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000f24:	2500      	movs	r5, #0
 8000f26:	e71c      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e7b1      	b.n	8000e90 <__aeabi_fsub+0x2d4>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d0f1      	beq.n	8000f14 <__aeabi_fsub+0x358>
 8000f30:	0013      	movs	r3, r2
 8000f32:	2500      	movs	r5, #0
 8000f34:	e6fc      	b.n	8000d30 <__aeabi_fsub+0x174>
 8000f36:	2500      	movs	r5, #0
 8000f38:	e6fa      	b.n	8000d30 <__aeabi_fsub+0x174>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	7dffffff 	.word	0x7dffffff
 8000f40:	fbffffff 	.word	0xfbffffff

08000f44 <__aeabi_f2iz>:
 8000f44:	0241      	lsls	r1, r0, #9
 8000f46:	0042      	lsls	r2, r0, #1
 8000f48:	0fc3      	lsrs	r3, r0, #31
 8000f4a:	0a49      	lsrs	r1, r1, #9
 8000f4c:	0e12      	lsrs	r2, r2, #24
 8000f4e:	2000      	movs	r0, #0
 8000f50:	2a7e      	cmp	r2, #126	; 0x7e
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f54:	2a9d      	cmp	r2, #157	; 0x9d
 8000f56:	d80c      	bhi.n	8000f72 <__aeabi_f2iz+0x2e>
 8000f58:	2080      	movs	r0, #128	; 0x80
 8000f5a:	0400      	lsls	r0, r0, #16
 8000f5c:	4301      	orrs	r1, r0
 8000f5e:	2a95      	cmp	r2, #149	; 0x95
 8000f60:	dc0a      	bgt.n	8000f78 <__aeabi_f2iz+0x34>
 8000f62:	2096      	movs	r0, #150	; 0x96
 8000f64:	1a82      	subs	r2, r0, r2
 8000f66:	40d1      	lsrs	r1, r2
 8000f68:	4248      	negs	r0, r1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f6e:	0008      	movs	r0, r1
 8000f70:	4770      	bx	lr
 8000f72:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <__aeabi_f2iz+0x3c>)
 8000f74:	1898      	adds	r0, r3, r2
 8000f76:	e7fb      	b.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f78:	3a96      	subs	r2, #150	; 0x96
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	e7f4      	b.n	8000f68 <__aeabi_f2iz+0x24>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7fffffff 	.word	0x7fffffff

08000f84 <__aeabi_i2f>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d03d      	beq.n	8001006 <__aeabi_i2f+0x82>
 8000f8a:	17c3      	asrs	r3, r0, #31
 8000f8c:	18c5      	adds	r5, r0, r3
 8000f8e:	405d      	eors	r5, r3
 8000f90:	0fc4      	lsrs	r4, r0, #31
 8000f92:	0028      	movs	r0, r5
 8000f94:	f000 f880 	bl	8001098 <__clzsi2>
 8000f98:	229e      	movs	r2, #158	; 0x9e
 8000f9a:	1a12      	subs	r2, r2, r0
 8000f9c:	2a96      	cmp	r2, #150	; 0x96
 8000f9e:	dc07      	bgt.n	8000fb0 <__aeabi_i2f+0x2c>
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	2808      	cmp	r0, #8
 8000fa4:	dd33      	ble.n	800100e <__aeabi_i2f+0x8a>
 8000fa6:	3808      	subs	r0, #8
 8000fa8:	4085      	lsls	r5, r0
 8000faa:	0268      	lsls	r0, r5, #9
 8000fac:	0a40      	lsrs	r0, r0, #9
 8000fae:	e023      	b.n	8000ff8 <__aeabi_i2f+0x74>
 8000fb0:	2a99      	cmp	r2, #153	; 0x99
 8000fb2:	dd0b      	ble.n	8000fcc <__aeabi_i2f+0x48>
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	0029      	movs	r1, r5
 8000fb8:	1a1b      	subs	r3, r3, r0
 8000fba:	40d9      	lsrs	r1, r3
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	331b      	adds	r3, #27
 8000fc0:	409d      	lsls	r5, r3
 8000fc2:	002b      	movs	r3, r5
 8000fc4:	1e5d      	subs	r5, r3, #1
 8000fc6:	41ab      	sbcs	r3, r5
 8000fc8:	4319      	orrs	r1, r3
 8000fca:	000d      	movs	r5, r1
 8000fcc:	2805      	cmp	r0, #5
 8000fce:	dd01      	ble.n	8000fd4 <__aeabi_i2f+0x50>
 8000fd0:	1f43      	subs	r3, r0, #5
 8000fd2:	409d      	lsls	r5, r3
 8000fd4:	002b      	movs	r3, r5
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <__aeabi_i2f+0x90>)
 8000fd8:	400b      	ands	r3, r1
 8000fda:	076e      	lsls	r6, r5, #29
 8000fdc:	d009      	beq.n	8000ff2 <__aeabi_i2f+0x6e>
 8000fde:	260f      	movs	r6, #15
 8000fe0:	4035      	ands	r5, r6
 8000fe2:	2d04      	cmp	r5, #4
 8000fe4:	d005      	beq.n	8000ff2 <__aeabi_i2f+0x6e>
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	015d      	lsls	r5, r3, #5
 8000fea:	d502      	bpl.n	8000ff2 <__aeabi_i2f+0x6e>
 8000fec:	229f      	movs	r2, #159	; 0x9f
 8000fee:	400b      	ands	r3, r1
 8000ff0:	1a12      	subs	r2, r2, r0
 8000ff2:	019b      	lsls	r3, r3, #6
 8000ff4:	0a58      	lsrs	r0, r3, #9
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	0240      	lsls	r0, r0, #9
 8000ffa:	05d2      	lsls	r2, r2, #23
 8000ffc:	0a40      	lsrs	r0, r0, #9
 8000ffe:	07e4      	lsls	r4, r4, #31
 8001000:	4310      	orrs	r0, r2
 8001002:	4320      	orrs	r0, r4
 8001004:	bd70      	pop	{r4, r5, r6, pc}
 8001006:	2400      	movs	r4, #0
 8001008:	2200      	movs	r2, #0
 800100a:	2000      	movs	r0, #0
 800100c:	e7f4      	b.n	8000ff8 <__aeabi_i2f+0x74>
 800100e:	0268      	lsls	r0, r5, #9
 8001010:	0a40      	lsrs	r0, r0, #9
 8001012:	e7f1      	b.n	8000ff8 <__aeabi_i2f+0x74>
 8001014:	fbffffff 	.word	0xfbffffff

08001018 <__aeabi_ui2f>:
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	1e04      	subs	r4, r0, #0
 800101c:	d034      	beq.n	8001088 <__aeabi_ui2f+0x70>
 800101e:	f000 f83b 	bl	8001098 <__clzsi2>
 8001022:	229e      	movs	r2, #158	; 0x9e
 8001024:	1a12      	subs	r2, r2, r0
 8001026:	2a96      	cmp	r2, #150	; 0x96
 8001028:	dc07      	bgt.n	800103a <__aeabi_ui2f+0x22>
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	2808      	cmp	r0, #8
 800102e:	dd2e      	ble.n	800108e <__aeabi_ui2f+0x76>
 8001030:	3808      	subs	r0, #8
 8001032:	4084      	lsls	r4, r0
 8001034:	0260      	lsls	r0, r4, #9
 8001036:	0a40      	lsrs	r0, r0, #9
 8001038:	e021      	b.n	800107e <__aeabi_ui2f+0x66>
 800103a:	2a99      	cmp	r2, #153	; 0x99
 800103c:	dd09      	ble.n	8001052 <__aeabi_ui2f+0x3a>
 800103e:	0003      	movs	r3, r0
 8001040:	0021      	movs	r1, r4
 8001042:	331b      	adds	r3, #27
 8001044:	4099      	lsls	r1, r3
 8001046:	1e4b      	subs	r3, r1, #1
 8001048:	4199      	sbcs	r1, r3
 800104a:	2305      	movs	r3, #5
 800104c:	1a1b      	subs	r3, r3, r0
 800104e:	40dc      	lsrs	r4, r3
 8001050:	430c      	orrs	r4, r1
 8001052:	2805      	cmp	r0, #5
 8001054:	dd01      	ble.n	800105a <__aeabi_ui2f+0x42>
 8001056:	1f43      	subs	r3, r0, #5
 8001058:	409c      	lsls	r4, r3
 800105a:	0023      	movs	r3, r4
 800105c:	490d      	ldr	r1, [pc, #52]	; (8001094 <__aeabi_ui2f+0x7c>)
 800105e:	400b      	ands	r3, r1
 8001060:	0765      	lsls	r5, r4, #29
 8001062:	d009      	beq.n	8001078 <__aeabi_ui2f+0x60>
 8001064:	250f      	movs	r5, #15
 8001066:	402c      	ands	r4, r5
 8001068:	2c04      	cmp	r4, #4
 800106a:	d005      	beq.n	8001078 <__aeabi_ui2f+0x60>
 800106c:	3304      	adds	r3, #4
 800106e:	015c      	lsls	r4, r3, #5
 8001070:	d502      	bpl.n	8001078 <__aeabi_ui2f+0x60>
 8001072:	229f      	movs	r2, #159	; 0x9f
 8001074:	400b      	ands	r3, r1
 8001076:	1a12      	subs	r2, r2, r0
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	0a58      	lsrs	r0, r3, #9
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	0240      	lsls	r0, r0, #9
 8001080:	05d2      	lsls	r2, r2, #23
 8001082:	0a40      	lsrs	r0, r0, #9
 8001084:	4310      	orrs	r0, r2
 8001086:	bd70      	pop	{r4, r5, r6, pc}
 8001088:	2200      	movs	r2, #0
 800108a:	2000      	movs	r0, #0
 800108c:	e7f7      	b.n	800107e <__aeabi_ui2f+0x66>
 800108e:	0260      	lsls	r0, r4, #9
 8001090:	0a40      	lsrs	r0, r0, #9
 8001092:	e7f4      	b.n	800107e <__aeabi_ui2f+0x66>
 8001094:	fbffffff 	.word	0xfbffffff

08001098 <__clzsi2>:
 8001098:	211c      	movs	r1, #28
 800109a:	2301      	movs	r3, #1
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	4298      	cmp	r0, r3
 80010a0:	d301      	bcc.n	80010a6 <__clzsi2+0xe>
 80010a2:	0c00      	lsrs	r0, r0, #16
 80010a4:	3910      	subs	r1, #16
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d301      	bcc.n	80010b0 <__clzsi2+0x18>
 80010ac:	0a00      	lsrs	r0, r0, #8
 80010ae:	3908      	subs	r1, #8
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d301      	bcc.n	80010ba <__clzsi2+0x22>
 80010b6:	0900      	lsrs	r0, r0, #4
 80010b8:	3904      	subs	r1, #4
 80010ba:	a202      	add	r2, pc, #8	; (adr r2, 80010c4 <__clzsi2+0x2c>)
 80010bc:	5c10      	ldrb	r0, [r2, r0]
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	4770      	bx	lr
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	02020304 	.word	0x02020304
 80010c8:	01010101 	.word	0x01010101
	...

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fe7f 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f929 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f000 fa41 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e6:	f000 fa21 	bl	800152c <MX_DMA_Init>
  MX_ADC_Init();
 80010ea:	f000 f983 	bl	80013f4 <MX_ADC_Init>
  MX_I2C1_Init();
 80010ee:	f000 f9dd 	bl	80014ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80010f2:	f000 fc67 	bl	80019c4 <ssd1306_Init>
  ssd1306_Fill(Black);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 fcd2 	bl	8001aa0 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80010fc:	f000 fcf4 	bl	8001ae8 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(5, 5);
 8001100:	2105      	movs	r1, #5
 8001102:	2005      	movs	r0, #5
 8001104:	f000 fe50 	bl	8001da8 <ssd1306_SetCursor>
  sprintf(dispBuffer, "RF Power meter");
 8001108:	4a78      	ldr	r2, [pc, #480]	; (80012ec <main+0x218>)
 800110a:	4b79      	ldr	r3, [pc, #484]	; (80012f0 <main+0x21c>)
 800110c:	0010      	movs	r0, r2
 800110e:	0019      	movs	r1, r3
 8001110:	230f      	movs	r3, #15
 8001112:	001a      	movs	r2, r3
 8001114:	f003 fb00 	bl	8004718 <memcpy>
  ssd1306_WriteString(dispBuffer, Font_7x10, White);
 8001118:	4a76      	ldr	r2, [pc, #472]	; (80012f4 <main+0x220>)
 800111a:	4874      	ldr	r0, [pc, #464]	; (80012ec <main+0x218>)
 800111c:	2301      	movs	r3, #1
 800111e:	6811      	ldr	r1, [r2, #0]
 8001120:	6852      	ldr	r2, [r2, #4]
 8001122:	f000 fe17 	bl	8001d54 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001126:	f000 fcdf 	bl	8001ae8 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(80, 35);
 800112a:	2123      	movs	r1, #35	; 0x23
 800112c:	2050      	movs	r0, #80	; 0x50
 800112e:	f000 fe3b 	bl	8001da8 <ssd1306_SetCursor>
  sprintf(dispBuffer, "dBm");
 8001132:	4a6e      	ldr	r2, [pc, #440]	; (80012ec <main+0x218>)
 8001134:	4b70      	ldr	r3, [pc, #448]	; (80012f8 <main+0x224>)
 8001136:	0010      	movs	r0, r2
 8001138:	0019      	movs	r1, r3
 800113a:	2304      	movs	r3, #4
 800113c:	001a      	movs	r2, r3
 800113e:	f003 faeb 	bl	8004718 <memcpy>
  ssd1306_WriteString(dispBuffer, Font_11x18, White);
 8001142:	4a6e      	ldr	r2, [pc, #440]	; (80012fc <main+0x228>)
 8001144:	4869      	ldr	r0, [pc, #420]	; (80012ec <main+0x218>)
 8001146:	2301      	movs	r3, #1
 8001148:	6811      	ldr	r1, [r2, #0]
 800114a:	6852      	ldr	r2, [r2, #4]
 800114c:	f000 fe02 	bl	8001d54 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001150:	f000 fcca 	bl	8001ae8 <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  read_update=0;
 8001154:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <main+0x22c>)
 8001156:	2200      	movs	r2, #0
 8001158:	801a      	strh	r2, [r3, #0]
  avgValue=0;
 800115a:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <main+0x230>)
 800115c:	2200      	movs	r2, #0
 800115e:	801a      	strh	r2, [r3, #0]
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK){
 8001160:	4b69      	ldr	r3, [pc, #420]	; (8001308 <main+0x234>)
 8001162:	0018      	movs	r0, r3
 8001164:	f001 fbbe 	bl	80028e4 <HAL_ADCEx_Calibration_Start>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d001      	beq.n	8001170 <main+0x9c>
 	  Error_Handler();
 800116c:	f000 fa64 	bl	8001638 <Error_Handler>
   }

  HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcBuffer, ADC_BUFFER_SIZE);
 8001170:	4966      	ldr	r1, [pc, #408]	; (800130c <main+0x238>)
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <main+0x234>)
 8001174:	2240      	movs	r2, #64	; 0x40
 8001176:	0018      	movs	r0, r3
 8001178:	f000 fff6 	bl	8002168 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(read_update==1)
 800117c:	4b60      	ldr	r3, [pc, #384]	; (8001300 <main+0x22c>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d000      	beq.n	8001186 <main+0xb2>
 8001184:	e0af      	b.n	80012e6 <main+0x212>
	  {
		  read_update=0;
 8001186:	4b5e      	ldr	r3, [pc, #376]	; (8001300 <main+0x22c>)
 8001188:	2200      	movs	r2, #0
 800118a:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800118c:	4b60      	ldr	r3, [pc, #384]	; (8001310 <main+0x23c>)
 800118e:	2102      	movs	r1, #2
 8001190:	0018      	movs	r0, r3
 8001192:	f002 f878 	bl	8003286 <HAL_GPIO_TogglePin>

		 // get mean value
		  avgValue=adcBuffer[1];
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <main+0x238>)
 8001198:	885a      	ldrh	r2, [r3, #2]
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <main+0x230>)
 800119c:	801a      	strh	r2, [r3, #0]
		  for (int i=2;i<ADC_BUFFER_SIZE;i++)
 800119e:	2302      	movs	r3, #2
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	e01c      	b.n	80011de <main+0x10a>
		  {
			  avgValue = avgValue - avgValue/i + adcBuffer[i]/i; // Ayman's signature equation
 80011a4:	4b57      	ldr	r3, [pc, #348]	; (8001304 <main+0x230>)
 80011a6:	881c      	ldrh	r4, [r3, #0]
 80011a8:	4b56      	ldr	r3, [pc, #344]	; (8001304 <main+0x230>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	68f9      	ldr	r1, [r7, #12]
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff f834 	bl	800021c <__divsi3>
 80011b4:	0003      	movs	r3, r0
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	1ae3      	subs	r3, r4, r3
 80011ba:	b29c      	uxth	r4, r3
 80011bc:	4b53      	ldr	r3, [pc, #332]	; (800130c <main+0x238>)
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	5ad3      	ldrh	r3, [r2, r3]
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7ff f828 	bl	800021c <__divsi3>
 80011cc:	0003      	movs	r3, r0
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	18e3      	adds	r3, r4, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <main+0x230>)
 80011d6:	801a      	strh	r2, [r3, #0]
		  for (int i=2;i<ADC_BUFFER_SIZE;i++)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b3f      	cmp	r3, #63	; 0x3f
 80011e2:	dddf      	ble.n	80011a4 <main+0xd0>
		  }

		  // covert to dB
		  // equation -> y = -0.02x + 0.3
		  p_in_V = (float)avgValue* 0.0008f; // convert to voltage
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <main+0x230>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff ff15 	bl	8001018 <__aeabi_ui2f>
 80011ee:	1c03      	adds	r3, r0, #0
 80011f0:	4948      	ldr	r1, [pc, #288]	; (8001314 <main+0x240>)
 80011f2:	1c18      	adds	r0, r3, #0
 80011f4:	f7ff fbb0 	bl	8000958 <__aeabi_fmul>
 80011f8:	1c03      	adds	r3, r0, #0
 80011fa:	1c1a      	adds	r2, r3, #0
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <main+0x244>)
 80011fe:	601a      	str	r2, [r3, #0]
		  p_in_dB = p_in_V * (-49.632f) + 12.777f; // convert to dB
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <main+0x244>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4945      	ldr	r1, [pc, #276]	; (800131c <main+0x248>)
 8001206:	1c18      	adds	r0, r3, #0
 8001208:	f7ff fba6 	bl	8000958 <__aeabi_fmul>
 800120c:	1c03      	adds	r3, r0, #0
 800120e:	4944      	ldr	r1, [pc, #272]	; (8001320 <main+0x24c>)
 8001210:	1c18      	adds	r0, r3, #0
 8001212:	f7ff f941 	bl	8000498 <__aeabi_fadd>
 8001216:	1c03      	adds	r3, r0, #0
 8001218:	1c1a      	adds	r2, r3, #0
 800121a:	4b42      	ldr	r3, [pc, #264]	; (8001324 <main+0x250>)
 800121c:	601a      	str	r2, [r3, #0]

		  // Extract integer part
		  int ipart = (int)p_in_dB;
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <main+0x250>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1c18      	adds	r0, r3, #0
 8001224:	f7ff fe8e 	bl	8000f44 <__aeabi_f2iz>
 8001228:	0003      	movs	r3, r0
 800122a:	60bb      	str	r3, [r7, #8]
		  // Extract floating part
		  float fpart = (p_in_dB - (float)ipart)*10.0;
 800122c:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <main+0x250>)
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f7ff fea7 	bl	8000f84 <__aeabi_i2f>
 8001236:	1c03      	adds	r3, r0, #0
 8001238:	1c19      	adds	r1, r3, #0
 800123a:	1c20      	adds	r0, r4, #0
 800123c:	f7ff fcbe 	bl	8000bbc <__aeabi_fsub>
 8001240:	1c03      	adds	r3, r0, #0
 8001242:	4939      	ldr	r1, [pc, #228]	; (8001328 <main+0x254>)
 8001244:	1c18      	adds	r0, r3, #0
 8001246:	f7ff fb87 	bl	8000958 <__aeabi_fmul>
 800124a:	1c03      	adds	r3, r0, #0
 800124c:	607b      	str	r3, [r7, #4]

		  // update OLED display
		  ssd1306_SetCursor(15, 35);
 800124e:	2123      	movs	r1, #35	; 0x23
 8001250:	200f      	movs	r0, #15
 8001252:	f000 fda9 	bl	8001da8 <ssd1306_SetCursor>
		  sprintf(dispBuffer, "     ");
 8001256:	4a25      	ldr	r2, [pc, #148]	; (80012ec <main+0x218>)
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <main+0x258>)
 800125a:	0010      	movs	r0, r2
 800125c:	0019      	movs	r1, r3
 800125e:	2306      	movs	r3, #6
 8001260:	001a      	movs	r2, r3
 8001262:	f003 fa59 	bl	8004718 <memcpy>
		  ssd1306_WriteString(dispBuffer, Font_11x18, White);
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <main+0x228>)
 8001268:	4820      	ldr	r0, [pc, #128]	; (80012ec <main+0x218>)
 800126a:	2301      	movs	r3, #1
 800126c:	6811      	ldr	r1, [r2, #0]
 800126e:	6852      	ldr	r2, [r2, #4]
 8001270:	f000 fd70 	bl	8001d54 <ssd1306_WriteString>

		  ssd1306_SetCursor(15, 35);
 8001274:	2123      	movs	r1, #35	; 0x23
 8001276:	200f      	movs	r0, #15
 8001278:	f000 fd96 	bl	8001da8 <ssd1306_SetCursor>
		  sprintf(dispBuffer, "%c%2d.%d",
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	da01      	bge.n	8001286 <main+0x1b2>
 8001282:	242d      	movs	r4, #45	; 0x2d
 8001284:	e000      	b.n	8001288 <main+0x1b4>
 8001286:	2420      	movs	r4, #32
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	17da      	asrs	r2, r3, #31
 800128c:	189d      	adds	r5, r3, r2
 800128e:	4055      	eors	r5, r2
 8001290:	2100      	movs	r1, #0
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f8c0 	bl	8000418 <__aeabi_fcmplt>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d009      	beq.n	80012b0 <main+0x1dc>
				  (char)((ipart<0)?'-':' '),
				  ((ipart<0)?(ipart*-1):ipart),
				  (char)((fpart<0)?(fpart*-1):fpart));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0612      	lsls	r2, r2, #24
 80012a2:	4053      	eors	r3, r2
 80012a4:	1c18      	adds	r0, r3, #0
 80012a6:	f7ff f8df 	bl	8000468 <__aeabi_f2uiz>
 80012aa:	0003      	movs	r3, r0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	e004      	b.n	80012ba <main+0x1e6>
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff f8d9 	bl	8000468 <__aeabi_f2uiz>
 80012b6:	0003      	movs	r3, r0
 80012b8:	b2db      	uxtb	r3, r3
		  sprintf(dispBuffer, "%c%2d.%d",
 80012ba:	491d      	ldr	r1, [pc, #116]	; (8001330 <main+0x25c>)
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <main+0x218>)
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	002b      	movs	r3, r5
 80012c2:	0022      	movs	r2, r4
 80012c4:	f003 fa3a 	bl	800473c <siprintf>
		  ssd1306_WriteString(dispBuffer, Font_11x18, White);
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <main+0x228>)
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <main+0x218>)
 80012cc:	2301      	movs	r3, #1
 80012ce:	6811      	ldr	r1, [r2, #0]
 80012d0:	6852      	ldr	r2, [r2, #4]
 80012d2:	f000 fd3f 	bl	8001d54 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80012d6:	f000 fc07 	bl	8001ae8 <ssd1306_UpdateScreen>


		  HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcBuffer, ADC_BUFFER_SIZE);
 80012da:	490c      	ldr	r1, [pc, #48]	; (800130c <main+0x238>)
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <main+0x234>)
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 ff41 	bl	8002168 <HAL_ADC_Start_DMA>
	  else
	  {

	  }

	 __NOP();
 80012e6:	46c0      	nop			; (mov r8, r8)
	  if(read_update==1)
 80012e8:	e748      	b.n	800117c <main+0xa8>
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	2000058c 	.word	0x2000058c
 80012f0:	08004f50 	.word	0x08004f50
 80012f4:	20000004 	.word	0x20000004
 80012f8:	08004f60 	.word	0x08004f60
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	2000053c 	.word	0x2000053c
 8001304:	2000011c 	.word	0x2000011c
 8001308:	200005e0 	.word	0x200005e0
 800130c:	2000009c 	.word	0x2000009c
 8001310:	48000400 	.word	0x48000400
 8001314:	3a51b717 	.word	0x3a51b717
 8001318:	20000120 	.word	0x20000120
 800131c:	c246872b 	.word	0xc246872b
 8001320:	414c6e98 	.word	0x414c6e98
 8001324:	20000124 	.word	0x20000124
 8001328:	41200000 	.word	0x41200000
 800132c:	08004f64 	.word	0x08004f64
 8001330:	08004f6c 	.word	0x08004f6c

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b099      	sub	sp, #100	; 0x64
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	242c      	movs	r4, #44	; 0x2c
 800133c:	193b      	adds	r3, r7, r4
 800133e:	0018      	movs	r0, r3
 8001340:	2334      	movs	r3, #52	; 0x34
 8001342:	001a      	movs	r2, r3
 8001344:	2100      	movs	r1, #0
 8001346:	f003 f9f0 	bl	800472a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134a:	231c      	movs	r3, #28
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	0018      	movs	r0, r3
 8001350:	2310      	movs	r3, #16
 8001352:	001a      	movs	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	f003 f9e8 	bl	800472a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	0018      	movs	r0, r3
 800135e:	2318      	movs	r3, #24
 8001360:	001a      	movs	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f003 f9e1 	bl	800472a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001368:	0021      	movs	r1, r4
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2232      	movs	r2, #50	; 0x32
 800136e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2201      	movs	r2, #1
 8001374:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2201      	movs	r2, #1
 800137a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2201      	movs	r2, #1
 8001380:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2210      	movs	r2, #16
 8001386:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2210      	movs	r2, #16
 800138c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	187b      	adds	r3, r7, r1
 8001396:	0018      	movs	r0, r3
 8001398:	f002 fbc8 	bl	8003b2c <HAL_RCC_OscConfig>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80013a0:	f000 f94a 	bl	8001638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	211c      	movs	r1, #28
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2203      	movs	r2, #3
 80013b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2101      	movs	r1, #1
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 ff38 	bl	8004238 <HAL_RCC_ClockConfig>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013cc:	f000 f934 	bl	8001638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2220      	movs	r2, #32
 80013d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	0018      	movs	r0, r3
 80013e0:	f003 f882 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013e8:	f000 f926 	bl	8001638 <Error_Handler>
  }
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b019      	add	sp, #100	; 0x64
 80013f2:	bd90      	pop	{r4, r7, pc}

080013f4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	0018      	movs	r0, r3
 80013fe:	230c      	movs	r3, #12
 8001400:	001a      	movs	r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	f003 f991 	bl	800472a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_ADC_Init+0xb0>)
 800140a:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <MX_ADC_Init+0xb4>)
 800140c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_ADC_Init+0xb0>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001422:	2201      	movs	r2, #1
 8001424:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001428:	2204      	movs	r2, #4
 800142a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_ADC_Init+0xb0>)
 800142e:	2200      	movs	r2, #0
 8001430:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001434:	2200      	movs	r2, #0
 8001436:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_ADC_Init+0xb0>)
 800143a:	2201      	movs	r2, #1
 800143c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001440:	2200      	movs	r2, #0
 8001442:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001446:	22c2      	movs	r2, #194	; 0xc2
 8001448:	32ff      	adds	r2, #255	; 0xff
 800144a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_ADC_Init+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001454:	2224      	movs	r2, #36	; 0x24
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_ADC_Init+0xb0>)
 800145c:	2201      	movs	r2, #1
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_ADC_Init+0xb0>)
 8001462:	0018      	movs	r0, r3
 8001464:	f000 fd40 	bl	8001ee8 <HAL_ADC_Init>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800146c:	f000 f8e4 	bl	8001638 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	0152      	lsls	r2, r2, #5
 800147c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	0552      	lsls	r2, r2, #21
 8001484:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001486:	1d3a      	adds	r2, r7, #4
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_ADC_Init+0xb0>)
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f000 ff6b 	bl	8002368 <HAL_ADC_ConfigChannel>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d001      	beq.n	800149a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001496:	f000 f8cf 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	200005e0 	.word	0x200005e0
 80014a8:	40012400 	.word	0x40012400

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C1_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e8:	0018      	movs	r0, r3
 80014ea:	f001 fee7 	bl	80032bc <HAL_I2C_Init>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014f2:	f000 f8a1 	bl	8001638 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_I2C1_Init+0x74>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 fa7e 	bl	80039fc <HAL_I2CEx_ConfigAnalogFilter>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 f898 	bl	8001638 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <MX_I2C1_Init+0x74>)
 800150a:	2100      	movs	r1, #0
 800150c:	0018      	movs	r0, r3
 800150e:	f002 fac1 	bl	8003a94 <HAL_I2CEx_ConfigDigitalFilter>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 f88f 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000540 	.word	0x20000540
 8001524:	40005400 	.word	0x40005400
 8001528:	2000090e 	.word	0x2000090e

0800152c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_DMA_Init+0x38>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_DMA_Init+0x38>)
 8001538:	2101      	movs	r1, #1
 800153a:	430a      	orrs	r2, r1
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_DMA_Init+0x38>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2009      	movs	r0, #9
 8001550:	f001 fb12 	bl	8002b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001554:	2009      	movs	r0, #9
 8001556:	f001 fb24 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	40021000 	.word	0x40021000

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	240c      	movs	r4, #12
 8001570:	193b      	adds	r3, r7, r4
 8001572:	0018      	movs	r0, r3
 8001574:	2314      	movs	r3, #20
 8001576:	001a      	movs	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	f003 f8d6 	bl	800472a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_GPIO_Init+0xa4>)
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_GPIO_Init+0xa4>)
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	03c9      	lsls	r1, r1, #15
 8001588:	430a      	orrs	r2, r1
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_GPIO_Init+0xa4>)
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	03db      	lsls	r3, r3, #15
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_GPIO_Init+0xa4>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_GPIO_Init+0xa4>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	0289      	lsls	r1, r1, #10
 80015a4:	430a      	orrs	r2, r1
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_GPIO_Init+0xa4>)
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_GPIO_Init+0xa4>)
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_GPIO_Init+0xa4>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	02c9      	lsls	r1, r1, #11
 80015c0:	430a      	orrs	r2, r1
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_GPIO_Init+0xa4>)
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	02db      	lsls	r3, r3, #11
 80015cc:	4013      	ands	r3, r2
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_GPIO_Init+0xa8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	0018      	movs	r0, r3
 80015da:	f001 fe37 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015de:	0021      	movs	r1, r4
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2201      	movs	r2, #1
 80015ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <MX_GPIO_Init+0xa8>)
 80015fc:	0019      	movs	r1, r3
 80015fe:	0010      	movs	r0, r2
 8001600:	f001 fcbc 	bl	8002f7c <HAL_GPIO_Init>

}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b009      	add	sp, #36	; 0x24
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	48000400 	.word	0x48000400

08001614 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	0018      	movs	r0, r3
 8001620:	f000 fe24 	bl	800226c <HAL_ADC_Stop_DMA>
	read_update=1;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_ADC_ConvCpltCallback+0x20>)
 8001626:	2201      	movs	r2, #1
 8001628:	801a      	strh	r2, [r3, #0]
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	2000053c 	.word	0x2000053c

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_MspInit+0x44>)
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_MspInit+0x44>)
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	619a      	str	r2, [r3, #24]
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_MspInit+0x44>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x44>)
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_MspInit+0x44>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0549      	lsls	r1, r1, #21
 800166c:	430a      	orrs	r2, r1
 800166e:	61da      	str	r2, [r3, #28]
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_MspInit+0x44>)
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	055b      	lsls	r3, r3, #21
 8001678:	4013      	ands	r3, r2
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	2314      	movs	r3, #20
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	0018      	movs	r0, r3
 800169a:	2314      	movs	r3, #20
 800169c:	001a      	movs	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	f003 f843 	bl	800472a <memset>
  if(hadc->Instance==ADC1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <HAL_ADC_MspInit+0xd4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d154      	bne.n	8001758 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_ADC_MspInit+0xd8>)
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_ADC_MspInit+0xd8>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0089      	lsls	r1, r1, #2
 80016b8:	430a      	orrs	r2, r1
 80016ba:	619a      	str	r2, [r3, #24]
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <HAL_ADC_MspInit+0xd8>)
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_ADC_MspInit+0xd8>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_ADC_MspInit+0xd8>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	0289      	lsls	r1, r1, #10
 80016d4:	430a      	orrs	r2, r1
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_ADC_MspInit+0xd8>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e6:	2114      	movs	r1, #20
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2203      	movs	r2, #3
 80016f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	187a      	adds	r2, r7, r1
 80016fc:	2390      	movs	r3, #144	; 0x90
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f001 fc3a 	bl	8002f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_ADC_MspInit+0xe0>)
 800170c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	0052      	lsls	r2, r2, #1
 8001726:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	00d2      	lsls	r2, r2, #3
 800172e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 8001732:	2220      	movs	r2, #32
 8001734:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 800173e:	0018      	movs	r0, r3
 8001740:	f001 fa4c 	bl	8002bdc <HAL_DMA_Init>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001748:	f7ff ff76 	bl	8001638 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_ADC_MspInit+0xdc>)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b00a      	add	sp, #40	; 0x28
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40012400 	.word	0x40012400
 8001764:	40021000 	.word	0x40021000
 8001768:	2000059c 	.word	0x2000059c
 800176c:	40020008 	.word	0x40020008

08001770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	2314      	movs	r3, #20
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	0018      	movs	r0, r3
 800177e:	2314      	movs	r3, #20
 8001780:	001a      	movs	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	f002 ffd1 	bl	800472a <memset>
  if(hi2c->Instance==I2C1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <HAL_I2C_MspInit+0x90>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d131      	bne.n	80017f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_I2C_MspInit+0x94>)
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_I2C_MspInit+0x94>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	03c9      	lsls	r1, r1, #15
 800179c:	430a      	orrs	r2, r1
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_I2C_MspInit+0x94>)
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	03db      	lsls	r3, r3, #15
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ae:	2114      	movs	r1, #20
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2203      	movs	r2, #3
 80017b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2212      	movs	r2, #18
 80017ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2201      	movs	r2, #1
 80017c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2203      	movs	r2, #3
 80017c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2201      	movs	r2, #1
 80017cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_I2C_MspInit+0x98>)
 80017d2:	0019      	movs	r1, r3
 80017d4:	0010      	movs	r0, r2
 80017d6:	f001 fbd1 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_I2C_MspInit+0x94>)
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_I2C_MspInit+0x94>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0389      	lsls	r1, r1, #14
 80017e4:	430a      	orrs	r2, r1
 80017e6:	61da      	str	r2, [r3, #28]
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_I2C_MspInit+0x94>)
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	039b      	lsls	r3, r3, #14
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b00a      	add	sp, #40	; 0x28
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40005400 	.word	0x40005400
 8001804:	40021000 	.word	0x40021000
 8001808:	48001400 	.word	0x48001400

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 fb1a 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <DMA1_Channel1_IRQHandler+0x14>)
 8001846:	0018      	movs	r0, r3
 8001848:	f001 faae 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	2000059c 	.word	0x2000059c

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	18d3      	adds	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f002 ff1c 	bl	80046c4 <__errno>
 800188c:	0003      	movs	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	2301      	movs	r3, #1
 8001894:	425b      	negs	r3, r3
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	18d2      	adds	r2, r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b006      	add	sp, #24
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20001800 	.word	0x20001800
 80018b8:	00000100 	.word	0x00000100
 80018bc:	20000128 	.word	0x20000128
 80018c0:	20000628 	.word	0x20000628

080018c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018d0:	4813      	ldr	r0, [pc, #76]	; (8001920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018d2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80018d4:	4813      	ldr	r0, [pc, #76]	; (8001924 <LoopForever+0x6>)
    LDR R1, [R0]
 80018d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80018d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <LoopForever+0xa>)
    CMP R1, R2
 80018dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80018de:	d105      	bne.n	80018ec <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80018e2:	4913      	ldr	r1, [pc, #76]	; (8001930 <LoopForever+0x12>)
    STR R1, [R0]
 80018e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80018e8:	4913      	ldr	r1, [pc, #76]	; (8001938 <LoopForever+0x1a>)
    STR R1, [R0]
 80018ea:	6001      	str	r1, [r0, #0]

080018ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <LoopForever+0x1e>)
  ldr r1, =_edata
 80018ee:	4914      	ldr	r1, [pc, #80]	; (8001940 <LoopForever+0x22>)
  ldr r2, =_sidata
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <LoopForever+0x26>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001904:	4c11      	ldr	r4, [pc, #68]	; (800194c <LoopForever+0x2e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001912:	f7ff ffd7 	bl	80018c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001916:	f002 fedb 	bl	80046d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191a:	f7ff fbdb 	bl	80010d4 <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   r0, =_estack
 8001920:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001924:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001928:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800192c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001930:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001934:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001938:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001944:	080064ec 	.word	0x080064ec
  ldr r2, =_sbss
 8001948:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800194c:	20000628 	.word	0x20000628

08001950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_IRQHandler>

08001952 <ssd1306_Reset>:
 */
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af04      	add	r7, sp, #16
 8001962:	0002      	movs	r2, r0
 8001964:	1dfb      	adds	r3, r7, #7
 8001966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <ssd1306_WriteCommand+0x30>)
 800196a:	2301      	movs	r3, #1
 800196c:	425b      	negs	r3, r3
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	2301      	movs	r3, #1
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	2200      	movs	r2, #0
 800197c:	2178      	movs	r1, #120	; 0x78
 800197e:	f001 fd33 	bl	80033e8 <HAL_I2C_Mem_Write>
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	20000540 	.word	0x20000540

08001990 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af04      	add	r7, sp, #16
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <ssd1306_WriteData+0x30>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	4252      	negs	r2, r2
 80019a4:	9202      	str	r2, [sp, #8]
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	2178      	movs	r1, #120	; 0x78
 80019b2:	f001 fd19 	bl	80033e8 <HAL_I2C_Mem_Write>
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	20000540 	.word	0x20000540

080019c4 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80019c8:	f7ff ffc3 	bl	8001952 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80019cc:	2064      	movs	r0, #100	; 0x64
 80019ce:	f000 fa69 	bl	8001ea4 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80019d2:	20ae      	movs	r0, #174	; 0xae
 80019d4:	f7ff ffc2 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80019d8:	2020      	movs	r0, #32
 80019da:	f7ff ffbf 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff ffbc 	bl	800195c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80019e4:	20b0      	movs	r0, #176	; 0xb0
 80019e6:	f7ff ffb9 	bl	800195c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80019ea:	20c8      	movs	r0, #200	; 0xc8
 80019ec:	f7ff ffb6 	bl	800195c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff ffb3 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80019f6:	2010      	movs	r0, #16
 80019f8:	f7ff ffb0 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80019fc:	2040      	movs	r0, #64	; 0x40
 80019fe:	f7ff ffad 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001a02:	2081      	movs	r0, #129	; 0x81
 8001a04:	f7ff ffaa 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001a08:	20ff      	movs	r0, #255	; 0xff
 8001a0a:	f7ff ffa7 	bl	800195c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a0e:	20a1      	movs	r0, #161	; 0xa1
 8001a10:	f7ff ffa4 	bl	800195c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a14:	20a6      	movs	r0, #166	; 0xa6
 8001a16:	f7ff ffa1 	bl	800195c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a1a:	20a8      	movs	r0, #168	; 0xa8
 8001a1c:	f7ff ff9e 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001a20:	203f      	movs	r0, #63	; 0x3f
 8001a22:	f7ff ff9b 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a26:	20a4      	movs	r0, #164	; 0xa4
 8001a28:	f7ff ff98 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a2c:	20d3      	movs	r0, #211	; 0xd3
 8001a2e:	f7ff ff95 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff ff92 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a38:	20d5      	movs	r0, #213	; 0xd5
 8001a3a:	f7ff ff8f 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a3e:	20f0      	movs	r0, #240	; 0xf0
 8001a40:	f7ff ff8c 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a44:	20d9      	movs	r0, #217	; 0xd9
 8001a46:	f7ff ff89 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a4a:	2022      	movs	r0, #34	; 0x22
 8001a4c:	f7ff ff86 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a50:	20da      	movs	r0, #218	; 0xda
 8001a52:	f7ff ff83 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001a56:	2012      	movs	r0, #18
 8001a58:	f7ff ff80 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a5c:	20db      	movs	r0, #219	; 0xdb
 8001a5e:	f7ff ff7d 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a62:	2020      	movs	r0, #32
 8001a64:	f7ff ff7a 	bl	800195c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a68:	208d      	movs	r0, #141	; 0x8d
 8001a6a:	f7ff ff77 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f7ff ff74 	bl	800195c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001a74:	20af      	movs	r0, #175	; 0xaf
 8001a76:	f7ff ff71 	bl	800195c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f810 	bl	8001aa0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a80:	f000 f832 	bl	8001ae8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <ssd1306_Init+0xd8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <ssd1306_Init+0xd8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <ssd1306_Init+0xd8>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	715a      	strb	r2, [r3, #5]
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000052c 	.word	0x2000052c

08001aa0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e00e      	b.n	8001ad0 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <ssd1306_Fill+0x1e>
 8001aba:	2100      	movs	r1, #0
 8001abc:	e000      	b.n	8001ac0 <ssd1306_Fill+0x20>
 8001abe:	21ff      	movs	r1, #255	; 0xff
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <ssd1306_Fill+0x40>)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	1c0a      	adds	r2, r1, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <ssd1306_Fill+0x44>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d9ec      	bls.n	8001ab2 <ssd1306_Fill+0x12>
    }
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000012c 	.word	0x2000012c
 8001ae4:	000003ff 	.word	0x000003ff

08001ae8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e01a      	b.n	8001b2c <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3b50      	subs	r3, #80	; 0x50
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff ff2c 	bl	800195c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff ff29 	bl	800195c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001b0a:	2010      	movs	r0, #16
 8001b0c:	f7ff ff26 	bl	800195c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	01da      	lsls	r2, r3, #7
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <ssd1306_UpdateScreen+0x54>)
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff ff37 	bl	8001990 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	3201      	adds	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b07      	cmp	r3, #7
 8001b32:	d9e0      	bls.n	8001af6 <ssd1306_UpdateScreen+0xe>
    }
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000012c 	.word	0x2000012c

08001b40 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	0004      	movs	r4, r0
 8001b48:	0008      	movs	r0, r1
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	1dfb      	adds	r3, r7, #7
 8001b4e:	1c22      	adds	r2, r4, #0
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	1dbb      	adds	r3, r7, #6
 8001b54:	1c02      	adds	r2, r0, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	1d7b      	adds	r3, r7, #5
 8001b5a:	1c0a      	adds	r2, r1, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db52      	blt.n	8001c0e <ssd1306_DrawPixel+0xce>
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6e:	d84e      	bhi.n	8001c0e <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <ssd1306_DrawPixel+0xd8>)
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8001b78:	1d7b      	adds	r3, r7, #5
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	425a      	negs	r2, r3
 8001b7e:	4153      	adcs	r3, r2
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	1d7b      	adds	r3, r7, #5
 8001b84:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8001b86:	1d7b      	adds	r3, r7, #5
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d11e      	bne.n	8001bcc <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	1dbb      	adds	r3, r7, #6
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	01db      	lsls	r3, r3, #7
 8001b9e:	18d3      	adds	r3, r2, r3
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <ssd1306_DrawPixel+0xdc>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	b25a      	sxtb	r2, r3
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2107      	movs	r1, #7
 8001bac:	400b      	ands	r3, r1
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4099      	lsls	r1, r3
 8001bb2:	000b      	movs	r3, r1
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b259      	sxtb	r1, r3
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	01db      	lsls	r3, r3, #7
 8001bc2:	18d3      	adds	r3, r2, r3
 8001bc4:	b2c9      	uxtb	r1, r1
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <ssd1306_DrawPixel+0xdc>)
 8001bc8:	54d1      	strb	r1, [r2, r3]
 8001bca:	e021      	b.n	8001c10 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	1dbb      	adds	r3, r7, #6
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	b2d8      	uxtb	r0, r3
 8001bd8:	0003      	movs	r3, r0
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <ssd1306_DrawPixel+0xdc>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	1dba      	adds	r2, r7, #6
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	2107      	movs	r1, #7
 8001bea:	400a      	ands	r2, r1
 8001bec:	2101      	movs	r1, #1
 8001bee:	4091      	lsls	r1, r2
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	b252      	sxtb	r2, r2
 8001bf4:	43d2      	mvns	r2, r2
 8001bf6:	b252      	sxtb	r2, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	b259      	sxtb	r1, r3
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	0003      	movs	r3, r0
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	18d3      	adds	r3, r2, r3
 8001c06:	b2c9      	uxtb	r1, r1
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <ssd1306_DrawPixel+0xdc>)
 8001c0a:	54d1      	strb	r1, [r2, r3]
 8001c0c:	e000      	b.n	8001c10 <ssd1306_DrawPixel+0xd0>
        return;
 8001c0e:	46c0      	nop			; (mov r8, r8)
    }
}
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b003      	add	sp, #12
 8001c14:	bd90      	pop	{r4, r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	2000052c 	.word	0x2000052c
 8001c1c:	2000012c 	.word	0x2000012c

08001c20 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	0004      	movs	r4, r0
 8001c28:	1d38      	adds	r0, r7, #4
 8001c2a:	6001      	str	r1, [r0, #0]
 8001c2c:	6042      	str	r2, [r0, #4]
 8001c2e:	0019      	movs	r1, r3
 8001c30:	200f      	movs	r0, #15
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	1c22      	adds	r2, r4, #0
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	230e      	movs	r3, #14
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	1c0a      	adds	r2, r1, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c40:	183b      	adds	r3, r7, r0
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b1f      	cmp	r3, #31
 8001c46:	d904      	bls.n	8001c52 <ssd1306_WriteChar+0x32>
 8001c48:	230f      	movs	r3, #15
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b7e      	cmp	r3, #126	; 0x7e
 8001c50:	d901      	bls.n	8001c56 <ssd1306_WriteChar+0x36>
        return 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e078      	b.n	8001d48 <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	2b80      	cmp	r3, #128	; 0x80
 8001c64:	dc07      	bgt.n	8001c76 <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001c68:	885b      	ldrh	r3, [r3, #2]
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	dd01      	ble.n	8001c7a <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e066      	b.n	8001d48 <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e051      	b.n	8001d24 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	230f      	movs	r3, #15
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3b20      	subs	r3, #32
 8001c8c:	1d39      	adds	r1, r7, #4
 8001c8e:	7849      	ldrb	r1, [r1, #1]
 8001c90:	434b      	muls	r3, r1
 8001c92:	0019      	movs	r1, r3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	18cb      	adds	r3, r1, r3
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	e035      	b.n	8001d12 <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	409a      	lsls	r2, r3
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d014      	beq.n	8001cde <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	18d3      	adds	r3, r2, r3
 8001cc0:	b2d8      	uxtb	r0, r3
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001cc4:	885b      	ldrh	r3, [r3, #2]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	18d3      	adds	r3, r2, r3
 8001cce:	b2d9      	uxtb	r1, r3
 8001cd0:	230e      	movs	r3, #14
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	f7ff ff32 	bl	8001b40 <ssd1306_DrawPixel>
 8001cdc:	e016      	b.n	8001d0c <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	18d3      	adds	r3, r2, r3
 8001cea:	b2d8      	uxtb	r0, r3
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001cee:	885b      	ldrh	r3, [r3, #2]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	18d3      	adds	r3, r2, r3
 8001cf8:	b2d9      	uxtb	r1, r3
 8001cfa:	230e      	movs	r3, #14
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	425a      	negs	r2, r3
 8001d02:	4153      	adcs	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	001a      	movs	r2, r3
 8001d08:	f7ff ff1a 	bl	8001b40 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	001a      	movs	r2, r3
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d3c3      	bcc.n	8001ca6 <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	001a      	movs	r2, r3
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d3a7      	bcc.n	8001c80 <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	18d3      	adds	r3, r2, r3
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <ssd1306_WriteChar+0x130>)
 8001d40:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d42:	230f      	movs	r3, #15
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b009      	add	sp, #36	; 0x24
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	2000052c 	.word	0x2000052c

08001d54 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	1d38      	adds	r0, r7, #4
 8001d5e:	6001      	str	r1, [r0, #0]
 8001d60:	6042      	str	r2, [r0, #4]
 8001d62:	001a      	movs	r2, r3
 8001d64:	1cfb      	adds	r3, r7, #3
 8001d66:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8001d68:	e014      	b.n	8001d94 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	7818      	ldrb	r0, [r3, #0]
 8001d6e:	1cfb      	adds	r3, r7, #3
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	1d3a      	adds	r2, r7, #4
 8001d74:	6811      	ldr	r1, [r2, #0]
 8001d76:	6852      	ldr	r2, [r2, #4]
 8001d78:	f7ff ff52 	bl	8001c20 <ssd1306_WriteChar>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	001a      	movs	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d002      	beq.n	8001d8e <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	e008      	b.n	8001da0 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e6      	bne.n	8001d6a <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	0002      	movs	r2, r0
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	1c0a      	adds	r2, r1, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <ssd1306_SetCursor+0x30>)
 8001dc2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001dc4:	1dbb      	adds	r3, r7, #6
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <ssd1306_SetCursor+0x30>)
 8001dcc:	805a      	strh	r2, [r3, #2]
}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	2000052c 	.word	0x2000052c

08001ddc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_Init+0x24>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_Init+0x24>)
 8001de6:	2110      	movs	r1, #16
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 f809 	bl	8001e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df2:	f7ff fc27 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40022000 	.word	0x40022000

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_InitTick+0x5c>)
 8001e0e:	681c      	ldr	r4, [r3, #0]
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x60>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	0019      	movs	r1, r3
 8001e16:	23fa      	movs	r3, #250	; 0xfa
 8001e18:	0098      	lsls	r0, r3, #2
 8001e1a:	f7fe f975 	bl	8000108 <__udivsi3>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	0019      	movs	r1, r3
 8001e22:	0020      	movs	r0, r4
 8001e24:	f7fe f970 	bl	8000108 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 fec9 	bl	8002bc2 <HAL_SYSTICK_Config>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00f      	b.n	8001e58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d80b      	bhi.n	8001e56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	2301      	movs	r3, #1
 8001e42:	425b      	negs	r3, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 fe96 	bl	8002b78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_InitTick+0x64>)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b003      	add	sp, #12
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000018 	.word	0x20000018
 8001e68:	20000014 	.word	0x20000014

08001e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_IncTick+0x1c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	001a      	movs	r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_IncTick+0x20>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	18d2      	adds	r2, r2, r3
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_IncTick+0x20>)
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	20000018 	.word	0x20000018
 8001e8c:	20000620 	.word	0x20000620

08001e90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_GetTick+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000620 	.word	0x20000620

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_Delay+0x40>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	189b      	adds	r3, r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	f7ff ffe0 	bl	8001e90 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000018 	.word	0x20000018

08001ee8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e125      	b.n	8002152 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2234      	movs	r2, #52	; 0x34
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff fbb4 	bl	800168c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	2210      	movs	r2, #16
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d000      	beq.n	8001f30 <HAL_ADC_Init+0x48>
 8001f2e:	e103      	b.n	8002138 <HAL_ADC_Init+0x250>
 8001f30:	230f      	movs	r3, #15
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d000      	beq.n	8001f3c <HAL_ADC_Init+0x54>
 8001f3a:	e0fd      	b.n	8002138 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2204      	movs	r2, #4
 8001f44:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001f46:	d000      	beq.n	8001f4a <HAL_ADC_Init+0x62>
 8001f48:	e0f6      	b.n	8002138 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4a83      	ldr	r2, [pc, #524]	; (800215c <HAL_ADC_Init+0x274>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	2202      	movs	r2, #2
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2203      	movs	r2, #3
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d112      	bne.n	8001f8e <HAL_ADC_Init+0xa6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d009      	beq.n	8001f8a <HAL_ADC_Init+0xa2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	401a      	ands	r2, r3
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0xa6>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_ADC_Init+0xa8>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d116      	bne.n	8001fc2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2218      	movs	r2, #24
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	0899      	lsrs	r1, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4964      	ldr	r1, [pc, #400]	; (8002160 <HAL_ADC_Init+0x278>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7e1b      	ldrb	r3, [r3, #24]
 8001fd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e5b      	ldrb	r3, [r3, #25]
 8001fdc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fde:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7e9b      	ldrb	r3, [r3, #26]
 8001fe4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fe6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_Init+0x10e>
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	015b      	lsls	r3, r3, #5
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_Init+0x110>
 8001ff6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ff8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ffe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d101      	bne.n	800200c <HAL_ADC_Init+0x124>
 8002008:	2304      	movs	r3, #4
 800200a:	e000      	b.n	800200e <HAL_ADC_Init+0x126>
 800200c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800200e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2124      	movs	r1, #36	; 0x24
 8002014:	5c5b      	ldrb	r3, [r3, r1]
 8002016:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002018:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4313      	orrs	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7edb      	ldrb	r3, [r3, #27]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d115      	bne.n	8002054 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7e9b      	ldrb	r3, [r3, #26]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2280      	movs	r2, #128	; 0x80
 8002034:	0252      	lsls	r2, r2, #9
 8002036:	4313      	orrs	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	e00b      	b.n	8002054 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	2220      	movs	r2, #32
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	2201      	movs	r2, #1
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	23c2      	movs	r3, #194	; 0xc2
 800205a:	33ff      	adds	r3, #255	; 0xff
 800205c:	429a      	cmp	r2, r3
 800205e:	d007      	beq.n	8002070 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002068:	4313      	orrs	r3, r2
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4313      	orrs	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	055b      	lsls	r3, r3, #21
 8002088:	429a      	cmp	r2, r3
 800208a:	d01b      	beq.n	80020c4 <HAL_ADC_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d017      	beq.n	80020c4 <HAL_ADC_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	2b02      	cmp	r3, #2
 800209a:	d013      	beq.n	80020c4 <HAL_ADC_Init+0x1dc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d00f      	beq.n	80020c4 <HAL_ADC_Init+0x1dc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d00b      	beq.n	80020c4 <HAL_ADC_Init+0x1dc>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d007      	beq.n	80020c4 <HAL_ADC_Init+0x1dc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	d003      	beq.n	80020c4 <HAL_ADC_Init+0x1dc>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	2b07      	cmp	r3, #7
 80020c2:	d112      	bne.n	80020ea <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2107      	movs	r1, #7
 80020d0:	438a      	bics	r2, r1
 80020d2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6959      	ldr	r1, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	2207      	movs	r2, #7
 80020e0:	401a      	ands	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_ADC_Init+0x27c>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d10b      	bne.n	8002112 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	2203      	movs	r2, #3
 8002106:	4393      	bics	r3, r2
 8002108:	2201      	movs	r2, #1
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002110:	e01c      	b.n	800214c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	2212      	movs	r2, #18
 8002118:	4393      	bics	r3, r2
 800211a:	2210      	movs	r2, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	2201      	movs	r2, #1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800212e:	230f      	movs	r3, #15
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002136:	e009      	b.n	800214c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	2210      	movs	r2, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002144:	230f      	movs	r3, #15
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	fffffefd 	.word	0xfffffefd
 8002160:	fffe0219 	.word	0xfffe0219
 8002164:	833fffe7 	.word	0x833fffe7

08002168 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002174:	2317      	movs	r3, #23
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d15e      	bne.n	8002246 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2234      	movs	r2, #52	; 0x34
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Start_DMA+0x2e>
 8002192:	2302      	movs	r3, #2
 8002194:	e05e      	b.n	8002254 <HAL_ADC_Start_DMA+0xec>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2234      	movs	r2, #52	; 0x34
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	7e5b      	ldrb	r3, [r3, #25]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d007      	beq.n	80021b6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80021a6:	2317      	movs	r3, #23
 80021a8:	18fc      	adds	r4, r7, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 f9e9 	bl	8002584 <ADC_Enable>
 80021b2:	0003      	movs	r3, r0
 80021b4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021b6:	2317      	movs	r3, #23
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d146      	bne.n	800224e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_ADC_Start_DMA+0xf4>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	2280      	movs	r2, #128	; 0x80
 80021ca:	0052      	lsls	r2, r2, #1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2234      	movs	r2, #52	; 0x34
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_ADC_Start_DMA+0xf8>)
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_ADC_Start_DMA+0xfc>)
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_ADC_Start_DMA+0x100>)
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	221c      	movs	r2, #28
 80021fe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2110      	movs	r1, #16
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	430a      	orrs	r2, r1
 800221e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3340      	adds	r3, #64	; 0x40
 800222a:	0019      	movs	r1, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f000 fd1c 	bl	8002c6c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2104      	movs	r1, #4
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e003      	b.n	800224e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002246:	2317      	movs	r3, #23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800224e:	2317      	movs	r3, #23
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b007      	add	sp, #28
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	fffff0fe 	.word	0xfffff0fe
 8002260:	080027dd 	.word	0x080027dd
 8002264:	08002891 	.word	0x08002891
 8002268:	080028af 	.word	0x080028af

0800226c <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2234      	movs	r2, #52	; 0x34
 8002280:	5c9b      	ldrb	r3, [r3, r2]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_ADC_Stop_DMA+0x1e>
 8002286:	2302      	movs	r3, #2
 8002288:	e058      	b.n	800233c <HAL_ADC_Stop_DMA+0xd0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2234      	movs	r2, #52	; 0x34
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002292:	250f      	movs	r5, #15
 8002294:	197c      	adds	r4, r7, r5
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f000 fa59 	bl	8002750 <ADC_ConversionStop>
 800229e:	0003      	movs	r3, r0
 80022a0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022a2:	197b      	adds	r3, r7, r5
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d141      	bne.n	800232e <HAL_ADC_Stop_DMA+0xc2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	438a      	bics	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	250f      	movs	r5, #15
 80022c0:	197c      	adds	r4, r7, r5
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fd38 	bl	8002d38 <HAL_DMA_Abort>
 80022c8:	0003      	movs	r3, r0
 80022ca:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 80022cc:	197b      	adds	r3, r7, r5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_ADC_Stop_DMA+0x74>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2110      	movs	r1, #16
 80022ec:	438a      	bics	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80022f0:	230f      	movs	r3, #15
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d108      	bne.n	800230c <HAL_ADC_Stop_DMA+0xa0>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80022fa:	230f      	movs	r3, #15
 80022fc:	18fc      	adds	r4, r7, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f9bb 	bl	800267c <ADC_Disable>
 8002306:	0003      	movs	r3, r0
 8002308:	7023      	strb	r3, [r4, #0]
 800230a:	e003      	b.n	8002314 <HAL_ADC_Stop_DMA+0xa8>
    }
    else
    {
      ADC_Disable(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f9b4 	bl	800267c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002314:	230f      	movs	r3, #15
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <HAL_ADC_Stop_DMA+0xc2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <HAL_ADC_Stop_DMA+0xd8>)
 8002324:	4013      	ands	r3, r2
 8002326:	2201      	movs	r2, #1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2234      	movs	r2, #52	; 0x34
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002336:	230f      	movs	r3, #15
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	781b      	ldrb	r3, [r3, #0]
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b004      	add	sp, #16
 8002342:	bdb0      	pop	{r4, r5, r7, pc}
 8002344:	fffffefe 	.word	0xfffffefe

08002348 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002372:	230f      	movs	r3, #15
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	055b      	lsls	r3, r3, #21
 8002386:	429a      	cmp	r2, r3
 8002388:	d011      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x46>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d00d      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x46>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	2b02      	cmp	r3, #2
 8002398:	d009      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x46>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d005      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x46>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d001      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x46>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2234      	movs	r2, #52	; 0x34
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x54>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0d0      	b.n	800255e <HAL_ADC_ConfigChannel+0x1f6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2234      	movs	r2, #52	; 0x34
 80023c0:	2101      	movs	r1, #1
 80023c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2204      	movs	r2, #4
 80023cc:	4013      	ands	r3, r2
 80023ce:	d000      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x6a>
 80023d0:	e0b4      	b.n	800253c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a64      	ldr	r2, [pc, #400]	; (8002568 <HAL_ADC_ConfigChannel+0x200>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d100      	bne.n	80023de <HAL_ADC_ConfigChannel+0x76>
 80023dc:	e082      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	409a      	lsls	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	055b      	lsls	r3, r3, #21
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d037      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d033      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	2b02      	cmp	r3, #2
 800240e:	d02f      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	2b03      	cmp	r3, #3
 8002416:	d02b      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	2b04      	cmp	r3, #4
 800241e:	d027      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	2b05      	cmp	r3, #5
 8002426:	d023      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	2b06      	cmp	r3, #6
 800242e:	d01f      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2b07      	cmp	r3, #7
 8002436:	d01b      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2107      	movs	r1, #7
 8002444:	400b      	ands	r3, r1
 8002446:	429a      	cmp	r2, r3
 8002448:	d012      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2107      	movs	r1, #7
 8002456:	438a      	bics	r2, r1
 8002458:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6959      	ldr	r1, [r3, #20]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2207      	movs	r2, #7
 8002466:	401a      	ands	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b10      	cmp	r3, #16
 8002476:	d007      	beq.n	8002488 <HAL_ADC_ConfigChannel+0x120>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b11      	cmp	r3, #17
 800247e:	d003      	beq.n	8002488 <HAL_ADC_ConfigChannel+0x120>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b12      	cmp	r3, #18
 8002486:	d163      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_ADC_ConfigChannel+0x204>)
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b10      	cmp	r3, #16
 8002492:	d009      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x140>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b11      	cmp	r3, #17
 800249a:	d102      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x13a>
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	03db      	lsls	r3, r3, #15
 80024a0:	e004      	b.n	80024ac <HAL_ADC_ConfigChannel+0x144>
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	045b      	lsls	r3, r3, #17
 80024a6:	e001      	b.n	80024ac <HAL_ADC_ConfigChannel+0x144>
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	4a2f      	ldr	r2, [pc, #188]	; (800256c <HAL_ADC_ConfigChannel+0x204>)
 80024ae:	430b      	orrs	r3, r1
 80024b0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d14a      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_ADC_ConfigChannel+0x208>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	492d      	ldr	r1, [pc, #180]	; (8002574 <HAL_ADC_ConfigChannel+0x20c>)
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fd fe21 	bl	8000108 <__udivsi3>
 80024c6:	0003      	movs	r3, r0
 80024c8:	001a      	movs	r2, r3
 80024ca:	0013      	movs	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024d4:	e002      	b.n	80024dc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x16e>
 80024e2:	e035      	b.n	8002550 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2101      	movs	r1, #1
 80024f0:	4099      	lsls	r1, r3
 80024f2:	000b      	movs	r3, r1
 80024f4:	43d9      	mvns	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	400a      	ands	r2, r1
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d007      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x1ae>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b11      	cmp	r3, #17
 800250c:	d003      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x1ae>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b12      	cmp	r3, #18
 8002514:	d11c      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_ADC_ConfigChannel+0x204>)
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b10      	cmp	r3, #16
 8002520:	d007      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x1ca>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b11      	cmp	r3, #17
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x1c6>
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_ADC_ConfigChannel+0x210>)
 800252c:	e002      	b.n	8002534 <HAL_ADC_ConfigChannel+0x1cc>
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_ADC_ConfigChannel+0x214>)
 8002530:	e000      	b.n	8002534 <HAL_ADC_ConfigChannel+0x1cc>
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_ADC_ConfigChannel+0x218>)
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <HAL_ADC_ConfigChannel+0x204>)
 8002536:	400b      	ands	r3, r1
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e009      	b.n	8002550 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	2220      	movs	r2, #32
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002548:	230f      	movs	r3, #15
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2234      	movs	r2, #52	; 0x34
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002558:	230f      	movs	r3, #15
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b004      	add	sp, #16
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	00001001 	.word	0x00001001
 800256c:	40012708 	.word	0x40012708
 8002570:	20000000 	.word	0x20000000
 8002574:	000f4240 	.word	0x000f4240
 8002578:	ffbfffff 	.word	0xffbfffff
 800257c:	feffffff 	.word	0xfeffffff
 8002580:	ff7fffff 	.word	0xff7fffff

08002584 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2203      	movs	r2, #3
 800259c:	4013      	ands	r3, r2
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d112      	bne.n	80025c8 <ADC_Enable+0x44>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d009      	beq.n	80025c4 <ADC_Enable+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	401a      	ands	r2, r3
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d101      	bne.n	80025c8 <ADC_Enable+0x44>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <ADC_Enable+0x46>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d14b      	bne.n	8002666 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <ADC_Enable+0xec>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	2210      	movs	r2, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	2201      	movs	r2, #1
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e038      	b.n	8002668 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <ADC_Enable+0xf0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	491b      	ldr	r1, [pc, #108]	; (8002678 <ADC_Enable+0xf4>)
 800260c:	0018      	movs	r0, r3
 800260e:	f7fd fd7b 	bl	8000108 <__udivsi3>
 8002612:	0003      	movs	r3, r0
 8002614:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002616:	e002      	b.n	800261e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3b01      	subs	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002624:	f7ff fc34 	bl	8001e90 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800262c:	e014      	b.n	8002658 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800262e:	f7ff fc2f 	bl	8001e90 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d90d      	bls.n	8002658 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	2210      	movs	r2, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	2201      	movs	r2, #1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e007      	b.n	8002668 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2201      	movs	r2, #1
 8002660:	4013      	ands	r3, r2
 8002662:	2b01      	cmp	r3, #1
 8002664:	d1e3      	bne.n	800262e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b004      	add	sp, #16
 800266e:	bd80      	pop	{r7, pc}
 8002670:	80000017 	.word	0x80000017
 8002674:	20000000 	.word	0x20000000
 8002678:	000f4240 	.word	0x000f4240

0800267c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2203      	movs	r2, #3
 8002690:	4013      	ands	r3, r2
 8002692:	2b01      	cmp	r3, #1
 8002694:	d112      	bne.n	80026bc <ADC_Disable+0x40>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d009      	beq.n	80026b8 <ADC_Disable+0x3c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	401a      	ands	r2, r3
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d101      	bne.n	80026bc <ADC_Disable+0x40>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <ADC_Disable+0x42>
 80026bc:	2300      	movs	r3, #0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d041      	beq.n	8002746 <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2205      	movs	r2, #5
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d110      	bne.n	80026f2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2102      	movs	r1, #2
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2203      	movs	r2, #3
 80026e6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fbd2 	bl	8001e90 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026f0:	e022      	b.n	8002738 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	2210      	movs	r2, #16
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	2201      	movs	r2, #1
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e01c      	b.n	8002748 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800270e:	f7ff fbbf 	bl	8001e90 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d90d      	bls.n	8002738 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	2210      	movs	r2, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	2201      	movs	r2, #1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e007      	b.n	8002748 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2201      	movs	r2, #1
 8002740:	4013      	ands	r3, r2
 8002742:	2b01      	cmp	r3, #1
 8002744:	d0e3      	beq.n	800270e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}

08002750 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2204      	movs	r2, #4
 8002764:	4013      	ands	r3, r2
 8002766:	d034      	beq.n	80027d2 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2204      	movs	r2, #4
 8002770:	4013      	ands	r3, r2
 8002772:	2b04      	cmp	r3, #4
 8002774:	d10d      	bne.n	8002792 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2202      	movs	r2, #2
 800277e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002780:	d107      	bne.n	8002792 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2110      	movs	r1, #16
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002792:	f7ff fb7d 	bl	8001e90 <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800279a:	e014      	b.n	80027c6 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800279c:	f7ff fb78 	bl	8001e90 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d90d      	bls.n	80027c6 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	2210      	movs	r2, #16
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2201      	movs	r2, #1
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e006      	b.n	80027d4 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2204      	movs	r2, #4
 80027ce:	4013      	ands	r3, r2
 80027d0:	d1e4      	bne.n	800279c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}

080027dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	2250      	movs	r2, #80	; 0x50
 80027f0:	4013      	ands	r3, r2
 80027f2:	d140      	bne.n	8002876 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4013      	ands	r3, r2
 800280e:	d12d      	bne.n	800286c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002814:	2b00      	cmp	r3, #0
 8002816:	d129      	bne.n	800286c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2208      	movs	r2, #8
 8002820:	4013      	ands	r3, r2
 8002822:	2b08      	cmp	r3, #8
 8002824:	d122      	bne.n	800286c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2204      	movs	r2, #4
 800282e:	4013      	ands	r3, r2
 8002830:	d110      	bne.n	8002854 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	210c      	movs	r1, #12
 800283e:	438a      	bics	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <ADC_DMAConvCplt+0xb0>)
 8002848:	4013      	ands	r3, r2
 800284a:	2201      	movs	r2, #1
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
 8002852:	e00b      	b.n	800286c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	2220      	movs	r2, #32
 800285a:	431a      	orrs	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	2201      	movs	r2, #1
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	0018      	movs	r0, r3
 8002870:	f7fe fed0 	bl	8001614 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002874:	e005      	b.n	8002882 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	0010      	movs	r0, r2
 8002880:	4798      	blx	r3
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	fffffefe 	.word	0xfffffefe

08002890 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff fd51 	bl	8002348 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}

080028ae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	2204      	movs	r2, #4
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff fd3e 	bl	8002358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ec:	2317      	movs	r3, #23
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2234      	movs	r2, #52	; 0x34
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADCEx_Calibration_Start+0x26>
 8002906:	2302      	movs	r3, #2
 8002908:	e084      	b.n	8002a14 <HAL_ADCEx_Calibration_Start+0x130>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2234      	movs	r2, #52	; 0x34
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2203      	movs	r2, #3
 800291a:	4013      	ands	r3, r2
 800291c:	2b01      	cmp	r3, #1
 800291e:	d112      	bne.n	8002946 <HAL_ADCEx_Calibration_Start+0x62>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	2b01      	cmp	r3, #1
 800292c:	d009      	beq.n	8002942 <HAL_ADCEx_Calibration_Start+0x5e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	401a      	ands	r2, r3
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	429a      	cmp	r2, r3
 8002940:	d101      	bne.n	8002946 <HAL_ADCEx_Calibration_Start+0x62>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_ADCEx_Calibration_Start+0x64>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d152      	bne.n	80029f2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	4a32      	ldr	r2, [pc, #200]	; (8002a1c <HAL_ADCEx_Calibration_Start+0x138>)
 8002952:	4013      	ands	r3, r2
 8002954:	2202      	movs	r2, #2
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2203      	movs	r2, #3
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2103      	movs	r1, #3
 8002974:	438a      	bics	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	0609      	lsls	r1, r1, #24
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800298a:	f7ff fa81 	bl	8001e90 <HAL_GetTick>
 800298e:	0003      	movs	r3, r0
 8002990:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002992:	e014      	b.n	80029be <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002994:	f7ff fa7c 	bl	8001e90 <HAL_GetTick>
 8002998:	0002      	movs	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d90d      	bls.n	80029be <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	2212      	movs	r2, #18
 80029a8:	4393      	bics	r3, r2
 80029aa:	2210      	movs	r2, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2234      	movs	r2, #52	; 0x34
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02a      	b.n	8002a14 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	0fdb      	lsrs	r3, r3, #31
 80029c6:	07da      	lsls	r2, r3, #31
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d0e1      	beq.n	8002994 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	430a      	orrs	r2, r1
 80029de:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	2203      	movs	r2, #3
 80029e6:	4393      	bics	r3, r2
 80029e8:	2201      	movs	r2, #1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
 80029f0:	e009      	b.n	8002a06 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	2220      	movs	r2, #32
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80029fe:	2317      	movs	r3, #23
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2234      	movs	r2, #52	; 0x34
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a0e:	2317      	movs	r3, #23
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b006      	add	sp, #24
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	fffffefd 	.word	0xfffffefd

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	0002      	movs	r2, r0
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b7f      	cmp	r3, #127	; 0x7f
 8002a32:	d809      	bhi.n	8002a48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	001a      	movs	r2, r3
 8002a3a:	231f      	movs	r3, #31
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_EnableIRQ+0x30>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	4091      	lsls	r1, r2
 8002a44:	000a      	movs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]
  }
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b7f      	cmp	r3, #127	; 0x7f
 8002a68:	d828      	bhi.n	8002abc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a6a:	4a2f      	ldr	r2, [pc, #188]	; (8002b28 <__NVIC_SetPriority+0xd4>)
 8002a6c:	1dfb      	adds	r3, r7, #7
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	33c0      	adds	r3, #192	; 0xc0
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	589b      	ldr	r3, [r3, r2]
 8002a7a:	1dfa      	adds	r2, r7, #7
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	0011      	movs	r1, r2
 8002a80:	2203      	movs	r2, #3
 8002a82:	400a      	ands	r2, r1
 8002a84:	00d2      	lsls	r2, r2, #3
 8002a86:	21ff      	movs	r1, #255	; 0xff
 8002a88:	4091      	lsls	r1, r2
 8002a8a:	000a      	movs	r2, r1
 8002a8c:	43d2      	mvns	r2, r2
 8002a8e:	401a      	ands	r2, r3
 8002a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	401a      	ands	r2, r3
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	4003      	ands	r3, r0
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa8:	481f      	ldr	r0, [pc, #124]	; (8002b28 <__NVIC_SetPriority+0xd4>)
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	33c0      	adds	r3, #192	; 0xc0
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002aba:	e031      	b.n	8002b20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <__NVIC_SetPriority+0xd8>)
 8002abe:	1dfb      	adds	r3, r7, #7
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	400b      	ands	r3, r1
 8002ac8:	3b08      	subs	r3, #8
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3306      	adds	r3, #6
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	18d3      	adds	r3, r2, r3
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1dfa      	adds	r2, r7, #7
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	0011      	movs	r1, r2
 8002adc:	2203      	movs	r2, #3
 8002ade:	400a      	ands	r2, r1
 8002ae0:	00d2      	lsls	r2, r2, #3
 8002ae2:	21ff      	movs	r1, #255	; 0xff
 8002ae4:	4091      	lsls	r1, r2
 8002ae6:	000a      	movs	r2, r1
 8002ae8:	43d2      	mvns	r2, r2
 8002aea:	401a      	ands	r2, r3
 8002aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	22ff      	movs	r2, #255	; 0xff
 8002af4:	401a      	ands	r2, r3
 8002af6:	1dfb      	adds	r3, r7, #7
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	0018      	movs	r0, r3
 8002afc:	2303      	movs	r3, #3
 8002afe:	4003      	ands	r3, r0
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <__NVIC_SetPriority+0xd8>)
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	001c      	movs	r4, r3
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	4023      	ands	r3, r4
 8002b10:	3b08      	subs	r3, #8
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	430a      	orrs	r2, r1
 8002b16:	3306      	adds	r3, #6
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	18c3      	adds	r3, r0, r3
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <SysTick_Config+0x40>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b42:	2301      	movs	r3, #1
 8002b44:	e010      	b.n	8002b68 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <SysTick_Config+0x44>)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	3a01      	subs	r2, #1
 8002b4c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4e:	2301      	movs	r3, #1
 8002b50:	425b      	negs	r3, r3
 8002b52:	2103      	movs	r1, #3
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7ff ff7d 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <SysTick_Config+0x44>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <SysTick_Config+0x44>)
 8002b62:	2207      	movs	r2, #7
 8002b64:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	00ffffff 	.word	0x00ffffff
 8002b74:	e000e010 	.word	0xe000e010

08002b78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	210f      	movs	r1, #15
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	1c02      	adds	r2, r0, #0
 8002b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	0011      	movs	r1, r2
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7ff ff5d 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	0002      	movs	r2, r0
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7ff ff33 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b002      	add	sp, #8
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff ffaf 	bl	8002b30 <SysTick_Config>
 8002bd2:	0003      	movs	r3, r0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e036      	b.n	8002c60 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2221      	movs	r2, #33	; 0x21
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_DMA_Init+0x8c>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 f97e 	bl	8002f44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2221      	movs	r2, #33	; 0x21
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}  
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b004      	add	sp, #16
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	ffffc00f 	.word	0xffffc00f

08002c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2317      	movs	r3, #23
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	5c9b      	ldrb	r3, [r3, r2]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_DMA_Start_IT+0x24>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e04f      	b.n	8002d30 <HAL_DMA_Start_IT+0xc4>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	2101      	movs	r1, #1
 8002c96:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2221      	movs	r2, #33	; 0x21
 8002c9c:	5c9b      	ldrb	r3, [r3, r2]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d13a      	bne.n	8002d1a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2221      	movs	r2, #33	; 0x21
 8002ca8:	2102      	movs	r1, #2
 8002caa:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	438a      	bics	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f90f 	bl	8002eec <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	210e      	movs	r1, #14
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00f      	b.n	8002d08 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	210a      	movs	r1, #10
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2104      	movs	r1, #4
 8002d04:	438a      	bics	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2101      	movs	r1, #1
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e007      	b.n	8002d2a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002d22:	2317      	movs	r3, #23
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002d2a:	2317      	movs	r3, #23
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
} 
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b006      	add	sp, #24
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2221      	movs	r2, #33	; 0x21
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d008      	beq.n	8002d5e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e020      	b.n	8002da0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	210e      	movs	r1, #14
 8002d6a:	438a      	bics	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2101      	movs	r1, #1
 8002d88:	4091      	lsls	r1, r2
 8002d8a:	000a      	movs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2221      	movs	r2, #33	; 0x21
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	0013      	movs	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d024      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x72>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d020      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2220      	movs	r2, #32
 8002de0:	4013      	ands	r3, r2
 8002de2:	d107      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2104      	movs	r1, #4
 8002df0:	438a      	bics	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	2104      	movs	r1, #4
 8002dfe:	4091      	lsls	r1, r2
 8002e00:	000a      	movs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d100      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x66>
 8002e0c:	e06a      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	0010      	movs	r0, r2
 8002e16:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e18:	e064      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2202      	movs	r2, #2
 8002e20:	409a      	lsls	r2, r3
 8002e22:	0013      	movs	r3, r2
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	d02b      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xda>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d10b      	bne.n	8002e56 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	210a      	movs	r1, #10
 8002e4a:	438a      	bics	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4091      	lsls	r1, r2
 8002e62:	000a      	movs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e80:	e030      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2208      	movs	r2, #8
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d028      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2208      	movs	r2, #8
 8002e96:	4013      	ands	r3, r2
 8002e98:	d024      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	210e      	movs	r1, #14
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4091      	lsls	r1, r2
 8002eb6:	000a      	movs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2221      	movs	r2, #33	; 0x21
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	0010      	movs	r0, r2
 8002ee0:	4798      	blx	r3
    }
   }
}  
 8002ee2:	e7ff      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x13c>
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}

08002eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	2101      	movs	r1, #1
 8002f04:	4091      	lsls	r1, r2
 8002f06:	000a      	movs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d108      	bne.n	8002f2c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f2a:	e007      	b.n	8002f3c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b004      	add	sp, #16
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <DMA_CalcBaseAndBitshift+0x30>)
 8002f52:	4694      	mov	ip, r2
 8002f54:	4463      	add	r3, ip
 8002f56:	2114      	movs	r1, #20
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7fd f8d5 	bl	8000108 <__udivsi3>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	009a      	lsls	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <DMA_CalcBaseAndBitshift+0x34>)
 8002f6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	bffdfff8 	.word	0xbffdfff8
 8002f78:	40020000 	.word	0x40020000

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8a:	e149      	b.n	8003220 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4091      	lsls	r1, r2
 8002f96:	000a      	movs	r2, r1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d100      	bne.n	8002fa4 <HAL_GPIO_Init+0x28>
 8002fa2:	e13a      	b.n	800321a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x38>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b12      	cmp	r3, #18
 8002fb2:	d123      	bne.n	8002ffc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	0092      	lsls	r2, r2, #2
 8002fbe:	58d3      	ldr	r3, [r2, r3]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	0013      	movs	r3, r2
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2107      	movs	r1, #7
 8002fe0:	400b      	ands	r3, r1
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	0013      	movs	r3, r2
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	6939      	ldr	r1, [r7, #16]
 8002ffa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	409a      	lsls	r2, r3
 800300a:	0013      	movs	r3, r2
 800300c:	43da      	mvns	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	409a      	lsls	r2, r3
 8003022:	0013      	movs	r3, r2
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d00b      	beq.n	8003050 <HAL_GPIO_Init+0xd4>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d007      	beq.n	8003050 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003044:	2b11      	cmp	r3, #17
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b12      	cmp	r3, #18
 800304e:	d130      	bne.n	80030b2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	409a      	lsls	r2, r3
 800305e:	0013      	movs	r3, r2
 8003060:	43da      	mvns	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	409a      	lsls	r2, r3
 8003072:	0013      	movs	r3, r2
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003086:	2201      	movs	r2, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	409a      	lsls	r2, r3
 800308c:	0013      	movs	r3, r2
 800308e:	43da      	mvns	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	2201      	movs	r2, #1
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
 80030a4:	0013      	movs	r3, r2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	409a      	lsls	r2, r3
 80030c0:	0013      	movs	r3, r2
 80030c2:	43da      	mvns	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	0013      	movs	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	055b      	lsls	r3, r3, #21
 80030ea:	4013      	ands	r3, r2
 80030ec:	d100      	bne.n	80030f0 <HAL_GPIO_Init+0x174>
 80030ee:	e094      	b.n	800321a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f0:	4b51      	ldr	r3, [pc, #324]	; (8003238 <HAL_GPIO_Init+0x2bc>)
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_GPIO_Init+0x2bc>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	430a      	orrs	r2, r1
 80030fa:	619a      	str	r2, [r3, #24]
 80030fc:	4b4e      	ldr	r3, [pc, #312]	; (8003238 <HAL_GPIO_Init+0x2bc>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2201      	movs	r2, #1
 8003102:	4013      	ands	r3, r2
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003108:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_GPIO_Init+0x2c0>)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	589b      	ldr	r3, [r3, r2]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2203      	movs	r2, #3
 800311a:	4013      	ands	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	409a      	lsls	r2, r3
 8003122:	0013      	movs	r3, r2
 8003124:	43da      	mvns	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	2390      	movs	r3, #144	; 0x90
 8003130:	05db      	lsls	r3, r3, #23
 8003132:	429a      	cmp	r2, r3
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x1d6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a41      	ldr	r2, [pc, #260]	; (8003240 <HAL_GPIO_Init+0x2c4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x1d2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a40      	ldr	r2, [pc, #256]	; (8003244 <HAL_GPIO_Init+0x2c8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x1ce>
 8003146:	2302      	movs	r3, #2
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x1d8>
 800314a:	2305      	movs	r3, #5
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x1d8>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x1d8>
 8003152:	2300      	movs	r3, #0
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	2103      	movs	r1, #3
 8003158:	400a      	ands	r2, r1
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003164:	4935      	ldr	r1, [pc, #212]	; (800323c <HAL_GPIO_Init+0x2c0>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003172:	4b35      	ldr	r3, [pc, #212]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43da      	mvns	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	025b      	lsls	r3, r3, #9
 800318a:	4013      	ands	r3, r2
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	029b      	lsls	r3, r3, #10
 80031b4:	4013      	ands	r3, r2
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43da      	mvns	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	035b      	lsls	r3, r3, #13
 80031de:	4013      	ands	r3, r2
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	039b      	lsls	r3, r3, #14
 8003208:	4013      	ands	r3, r2
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_GPIO_Init+0x2cc>)
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	40da      	lsrs	r2, r3
 8003228:	1e13      	subs	r3, r2, #0
 800322a:	d000      	beq.n	800322e <HAL_GPIO_Init+0x2b2>
 800322c:	e6ae      	b.n	8002f8c <HAL_GPIO_Init+0x10>
  } 
}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b006      	add	sp, #24
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	40021000 	.word	0x40021000
 800323c:	40010000 	.word	0x40010000
 8003240:	48000400 	.word	0x48000400
 8003244:	48000800 	.word	0x48000800
 8003248:	40010400 	.word	0x40010400

0800324c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	0008      	movs	r0, r1
 8003256:	0011      	movs	r1, r2
 8003258:	1cbb      	adds	r3, r7, #2
 800325a:	1c02      	adds	r2, r0, #0
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	1c7b      	adds	r3, r7, #1
 8003260:	1c0a      	adds	r2, r1, #0
 8003262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003264:	1c7b      	adds	r3, r7, #1
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326c:	1cbb      	adds	r3, r7, #2
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003276:	1cbb      	adds	r3, r7, #2
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	000a      	movs	r2, r1
 8003290:	1cbb      	adds	r3, r7, #2
 8003292:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	1cba      	adds	r2, r7, #2
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	4013      	ands	r3, r2
 800329e:	d005      	beq.n	80032ac <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032a0:	1cbb      	adds	r3, r7, #2
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80032aa:	e003      	b.n	80032b4 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ac:	1cbb      	adds	r3, r7, #2
 80032ae:	881a      	ldrh	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e082      	b.n	80033d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2241      	movs	r2, #65	; 0x41
 80032d2:	5c9b      	ldrb	r3, [r3, r2]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2240      	movs	r2, #64	; 0x40
 80032de:	2100      	movs	r1, #0
 80032e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7fe fa43 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2241      	movs	r2, #65	; 0x41
 80032ee:	2124      	movs	r1, #36	; 0x24
 80032f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	438a      	bics	r2, r1
 8003300:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4934      	ldr	r1, [pc, #208]	; (80033dc <HAL_I2C_Init+0x120>)
 800330c:	400a      	ands	r2, r1
 800330e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4931      	ldr	r1, [pc, #196]	; (80033e0 <HAL_I2C_Init+0x124>)
 800331c:	400a      	ands	r2, r1
 800331e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d108      	bne.n	800333a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	0209      	lsls	r1, r1, #8
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e007      	b.n	800334a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2184      	movs	r1, #132	; 0x84
 8003344:	0209      	lsls	r1, r1, #8
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d104      	bne.n	800335c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	491f      	ldr	r1, [pc, #124]	; (80033e4 <HAL_I2C_Init+0x128>)
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	491a      	ldr	r1, [pc, #104]	; (80033e0 <HAL_I2C_Init+0x124>)
 8003378:	400a      	ands	r2, r1
 800337a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	431a      	orrs	r2, r3
 8003386:	0011      	movs	r1, r2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	021a      	lsls	r2, r3, #8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69d9      	ldr	r1, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2241      	movs	r2, #65	; 0x41
 80033c0:	2120      	movs	r1, #32
 80033c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2242      	movs	r2, #66	; 0x42
 80033ce:	2100      	movs	r1, #0
 80033d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	f0ffffff 	.word	0xf0ffffff
 80033e0:	ffff7fff 	.word	0xffff7fff
 80033e4:	02008000 	.word	0x02008000

080033e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	000c      	movs	r4, r1
 80033f2:	0010      	movs	r0, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	230a      	movs	r3, #10
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	1c22      	adds	r2, r4, #0
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	2308      	movs	r3, #8
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	1dbb      	adds	r3, r7, #6
 8003408:	1c0a      	adds	r2, r1, #0
 800340a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2241      	movs	r2, #65	; 0x41
 8003410:	5c9b      	ldrb	r3, [r3, r2]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b20      	cmp	r3, #32
 8003416:	d000      	beq.n	800341a <HAL_I2C_Mem_Write+0x32>
 8003418:	e10c      	b.n	8003634 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <HAL_I2C_Mem_Write+0x42>
 8003420:	232c      	movs	r3, #44	; 0x2c
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0ff      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2240      	movs	r2, #64	; 0x40
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_I2C_Mem_Write+0x5c>
 8003440:	2302      	movs	r3, #2
 8003442:	e0f8      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	2101      	movs	r1, #1
 800344a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344c:	f7fe fd20 	bl	8001e90 <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	0219      	lsls	r1, r3, #8
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2319      	movs	r3, #25
 8003460:	2201      	movs	r2, #1
 8003462:	f000 f975 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0e3      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2241      	movs	r2, #65	; 0x41
 8003472:	2121      	movs	r1, #33	; 0x21
 8003474:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2242      	movs	r2, #66	; 0x42
 800347a:	2140      	movs	r1, #64	; 0x40
 800347c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	222c      	movs	r2, #44	; 0x2c
 800348e:	18ba      	adds	r2, r7, r2
 8003490:	8812      	ldrh	r2, [r2, #0]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349a:	1dbb      	adds	r3, r7, #6
 800349c:	881c      	ldrh	r4, [r3, #0]
 800349e:	2308      	movs	r3, #8
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	230a      	movs	r3, #10
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	8819      	ldrh	r1, [r3, #0]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	0023      	movs	r3, r4
 80034b6:	f000 f8c5 	bl	8003644 <I2C_RequestMemoryWrite>
 80034ba:	1e03      	subs	r3, r0, #0
 80034bc:	d005      	beq.n	80034ca <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2240      	movs	r2, #64	; 0x40
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0b5      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2bff      	cmp	r3, #255	; 0xff
 80034d2:	d911      	bls.n	80034f8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	22ff      	movs	r2, #255	; 0xff
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	045c      	lsls	r4, r3, #17
 80034e4:	230a      	movs	r3, #10
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	8819      	ldrh	r1, [r3, #0]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	2300      	movs	r3, #0
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	0023      	movs	r3, r4
 80034f2:	f000 fa4d 	bl	8003990 <I2C_TransferConfig>
 80034f6:	e012      	b.n	800351e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	b2da      	uxtb	r2, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	049c      	lsls	r4, r3, #18
 800350c:	230a      	movs	r3, #10
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	8819      	ldrh	r1, [r3, #0]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	0023      	movs	r3, r4
 800351a:	f000 fa39 	bl	8003990 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 f952 	bl	80037ce <I2C_WaitOnTXISFlagUntilTimeout>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e081      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d03a      	beq.n	80035e2 <HAL_I2C_Mem_Write+0x1fa>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d136      	bne.n	80035e2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	0013      	movs	r3, r2
 800357e:	2200      	movs	r2, #0
 8003580:	2180      	movs	r1, #128	; 0x80
 8003582:	f000 f8e5 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e053      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2bff      	cmp	r3, #255	; 0xff
 8003596:	d911      	bls.n	80035bc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	045c      	lsls	r4, r3, #17
 80035a8:	230a      	movs	r3, #10
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	8819      	ldrh	r1, [r3, #0]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	0023      	movs	r3, r4
 80035b6:	f000 f9eb 	bl	8003990 <I2C_TransferConfig>
 80035ba:	e012      	b.n	80035e2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	049c      	lsls	r4, r3, #18
 80035d0:	230a      	movs	r3, #10
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	8819      	ldrh	r1, [r3, #0]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	2300      	movs	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	0023      	movs	r3, r4
 80035de:	f000 f9d7 	bl	8003990 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d198      	bne.n	800351e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f92a 	bl	800384c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e01a      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2220      	movs	r2, #32
 8003606:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	490b      	ldr	r1, [pc, #44]	; (8003640 <HAL_I2C_Mem_Write+0x258>)
 8003614:	400a      	ands	r2, r1
 8003616:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2241      	movs	r2, #65	; 0x41
 800361c:	2120      	movs	r1, #32
 800361e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2242      	movs	r2, #66	; 0x42
 8003624:	2100      	movs	r1, #0
 8003626:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2240      	movs	r2, #64	; 0x40
 800362c:	2100      	movs	r1, #0
 800362e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b007      	add	sp, #28
 800363c:	bd90      	pop	{r4, r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	fe00e800 	.word	0xfe00e800

08003644 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	000c      	movs	r4, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	250a      	movs	r5, #10
 8003654:	197b      	adds	r3, r7, r5
 8003656:	1c22      	adds	r2, r4, #0
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	2308      	movs	r3, #8
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	1c02      	adds	r2, r0, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	1dbb      	adds	r3, r7, #6
 8003664:	1c0a      	adds	r2, r1, #0
 8003666:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003668:	1dbb      	adds	r3, r7, #6
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	045c      	lsls	r4, r3, #17
 8003672:	197b      	adds	r3, r7, r5
 8003674:	8819      	ldrh	r1, [r3, #0]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <I2C_RequestMemoryWrite+0xc4>)
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	0023      	movs	r3, r4
 800367e:	f000 f987 	bl	8003990 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003684:	6a39      	ldr	r1, [r7, #32]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f8a0 	bl	80037ce <I2C_WaitOnTXISFlagUntilTimeout>
 800368e:	1e03      	subs	r3, r0, #0
 8003690:	d001      	beq.n	8003696 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e033      	b.n	80036fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003696:	1dbb      	adds	r3, r7, #6
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d107      	bne.n	80036ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800369e:	2308      	movs	r3, #8
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
 80036ac:	e019      	b.n	80036e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036ae:	2308      	movs	r3, #8
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	6a39      	ldr	r1, [r7, #32]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f881 	bl	80037ce <I2C_WaitOnTXISFlagUntilTimeout>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e014      	b.n	80036fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d4:	2308      	movs	r3, #8
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	0013      	movs	r3, r2
 80036ec:	2200      	movs	r2, #0
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	f000 f82e 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d001      	beq.n	80036fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bdb0      	pop	{r4, r5, r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	80002000 	.word	0x80002000

0800370c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2202      	movs	r2, #2
 800371c:	4013      	ands	r3, r2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d103      	bne.n	800372a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2201      	movs	r2, #1
 8003732:	4013      	ands	r3, r2
 8003734:	2b01      	cmp	r3, #1
 8003736:	d007      	beq.n	8003748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2101      	movs	r1, #1
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]
  }
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	1dfb      	adds	r3, r7, #7
 800375e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003760:	e021      	b.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	d01e      	beq.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003768:	f7fe fb92 	bl	8001e90 <HAL_GetTick>
 800376c:	0002      	movs	r2, r0
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d113      	bne.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	2220      	movs	r2, #32
 8003784:	431a      	orrs	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2241      	movs	r2, #65	; 0x41
 800378e:	2120      	movs	r1, #32
 8003790:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2242      	movs	r2, #66	; 0x42
 8003796:	2100      	movs	r1, #0
 8003798:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2240      	movs	r2, #64	; 0x40
 800379e:	2100      	movs	r1, #0
 80037a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00f      	b.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	425a      	negs	r2, r3
 80037b6:	4153      	adcs	r3, r2
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	001a      	movs	r2, r3
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d0ce      	beq.n	8003762 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b004      	add	sp, #16
 80037cc:	bd80      	pop	{r7, pc}

080037ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037da:	e02b      	b.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f86e 	bl	80038c4 <I2C_IsAcknowledgeFailed>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e029      	b.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3301      	adds	r3, #1
 80037f4:	d01e      	beq.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fb4b 	bl	8001e90 <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d113      	bne.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	2220      	movs	r2, #32
 8003812:	431a      	orrs	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2241      	movs	r2, #65	; 0x41
 800381c:	2120      	movs	r1, #32
 800381e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2242      	movs	r2, #66	; 0x42
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2240      	movs	r2, #64	; 0x40
 800382c:	2100      	movs	r1, #0
 800382e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2202      	movs	r2, #2
 800383c:	4013      	ands	r3, r2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d1cc      	bne.n	80037dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b004      	add	sp, #16
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003858:	e028      	b.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 f82f 	bl	80038c4 <I2C_IsAcknowledgeFailed>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e026      	b.n	80038bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe fb0f 	bl	8001e90 <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d113      	bne.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	2220      	movs	r2, #32
 800388a:	431a      	orrs	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2241      	movs	r2, #65	; 0x41
 8003894:	2120      	movs	r1, #32
 8003896:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2242      	movs	r2, #66	; 0x42
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e007      	b.n	80038bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2220      	movs	r2, #32
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d1cf      	bne.n	800385a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b004      	add	sp, #16
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2210      	movs	r2, #16
 80038d8:	4013      	ands	r3, r2
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d151      	bne.n	8003982 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038de:	e021      	b.n	8003924 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	3301      	adds	r3, #1
 80038e4:	d01e      	beq.n	8003924 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fad3 	bl	8001e90 <HAL_GetTick>
 80038ea:	0002      	movs	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_IsAcknowledgeFailed+0x38>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d113      	bne.n	8003924 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	2220      	movs	r2, #32
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2241      	movs	r2, #65	; 0x41
 800390c:	2120      	movs	r1, #32
 800390e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2242      	movs	r2, #66	; 0x42
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2240      	movs	r2, #64	; 0x40
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e02f      	b.n	8003984 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2220      	movs	r2, #32
 800392c:	4013      	ands	r3, r2
 800392e:	2b20      	cmp	r3, #32
 8003930:	d1d6      	bne.n	80038e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2210      	movs	r2, #16
 8003938:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2220      	movs	r2, #32
 8003940:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff fee1 	bl	800370c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	490d      	ldr	r1, [pc, #52]	; (800398c <I2C_IsAcknowledgeFailed+0xc8>)
 8003956:	400a      	ands	r2, r1
 8003958:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	2204      	movs	r2, #4
 8003960:	431a      	orrs	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2241      	movs	r2, #65	; 0x41
 800396a:	2120      	movs	r1, #32
 800396c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2242      	movs	r2, #66	; 0x42
 8003972:	2100      	movs	r1, #0
 8003974:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2240      	movs	r2, #64	; 0x40
 800397a:	2100      	movs	r1, #0
 800397c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	fe00e800 	.word	0xfe00e800

08003990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	0008      	movs	r0, r1
 800399a:	0011      	movs	r1, r2
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	240a      	movs	r4, #10
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	1c02      	adds	r2, r0, #0
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	2009      	movs	r0, #9
 80039a8:	183b      	adds	r3, r7, r0
 80039aa:	1c0a      	adds	r2, r1, #0
 80039ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	6a3a      	ldr	r2, [r7, #32]
 80039b6:	0d51      	lsrs	r1, r2, #21
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	00d2      	lsls	r2, r2, #3
 80039bc:	400a      	ands	r2, r1
 80039be:	490e      	ldr	r1, [pc, #56]	; (80039f8 <I2C_TransferConfig+0x68>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	43d2      	mvns	r2, r2
 80039c4:	401a      	ands	r2, r3
 80039c6:	0011      	movs	r1, r2
 80039c8:	193b      	adds	r3, r7, r4
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	059b      	lsls	r3, r3, #22
 80039ce:	0d9a      	lsrs	r2, r3, #22
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	0418      	lsls	r0, r3, #16
 80039d6:	23ff      	movs	r3, #255	; 0xff
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	4003      	ands	r3, r0
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b005      	add	sp, #20
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	03ff63ff 	.word	0x03ff63ff

080039fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2241      	movs	r2, #65	; 0x41
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d138      	bne.n	8003a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2240      	movs	r2, #64	; 0x40
 8003a16:	5c9b      	ldrb	r3, [r3, r2]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e032      	b.n	8003a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2241      	movs	r2, #65	; 0x41
 8003a2c:	2124      	movs	r1, #36	; 0x24
 8003a2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4911      	ldr	r1, [pc, #68]	; (8003a90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a4c:	400a      	ands	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2241      	movs	r2, #65	; 0x41
 8003a74:	2120      	movs	r1, #32
 8003a76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	ffffefff 	.word	0xffffefff

08003a94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2241      	movs	r2, #65	; 0x41
 8003aa2:	5c9b      	ldrb	r3, [r3, r2]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d139      	bne.n	8003b1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2240      	movs	r2, #64	; 0x40
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e033      	b.n	8003b20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	2101      	movs	r1, #1
 8003abe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2241      	movs	r2, #65	; 0x41
 8003ac4:	2124      	movs	r1, #36	; 0x24
 8003ac6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2241      	movs	r2, #65	; 0x41
 8003b0e:	2120      	movs	r1, #32
 8003b10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2240      	movs	r2, #64	; 0x40
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b004      	add	sp, #16
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	fffff0ff 	.word	0xfffff0ff

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f000 fb76 	bl	800422c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	d100      	bne.n	8003b4c <HAL_RCC_OscConfig+0x20>
 8003b4a:	e08e      	b.n	8003c6a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b4c:	4bc5      	ldr	r3, [pc, #788]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	220c      	movs	r2, #12
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d00e      	beq.n	8003b76 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b58:	4bc2      	ldr	r3, [pc, #776]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	220c      	movs	r2, #12
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d117      	bne.n	8003b94 <HAL_RCC_OscConfig+0x68>
 8003b64:	4bbf      	ldr	r3, [pc, #764]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	23c0      	movs	r3, #192	; 0xc0
 8003b6a:	025b      	lsls	r3, r3, #9
 8003b6c:	401a      	ands	r2, r3
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	025b      	lsls	r3, r3, #9
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d10e      	bne.n	8003b94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b76:	4bbb      	ldr	r3, [pc, #748]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d100      	bne.n	8003b84 <HAL_RCC_OscConfig+0x58>
 8003b82:	e071      	b.n	8003c68 <HAL_RCC_OscConfig+0x13c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d000      	beq.n	8003b8e <HAL_RCC_OscConfig+0x62>
 8003b8c:	e06c      	b.n	8003c68 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f000 fb4c 	bl	800422c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_OscConfig+0x80>
 8003b9c:	4bb1      	ldr	r3, [pc, #708]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4bb0      	ldr	r3, [pc, #704]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	0249      	lsls	r1, r1, #9
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e02f      	b.n	8003c0c <HAL_RCC_OscConfig+0xe0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCC_OscConfig+0xa2>
 8003bb4:	4bab      	ldr	r3, [pc, #684]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4baa      	ldr	r3, [pc, #680]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bba:	49ab      	ldr	r1, [pc, #684]	; (8003e68 <HAL_RCC_OscConfig+0x33c>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	4ba8      	ldr	r3, [pc, #672]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4ba7      	ldr	r3, [pc, #668]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bc6:	49a9      	ldr	r1, [pc, #676]	; (8003e6c <HAL_RCC_OscConfig+0x340>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e01e      	b.n	8003c0c <HAL_RCC_OscConfig+0xe0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xc8>
 8003bd6:	4ba3      	ldr	r3, [pc, #652]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4ba2      	ldr	r3, [pc, #648]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	02c9      	lsls	r1, r1, #11
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	4b9f      	ldr	r3, [pc, #636]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b9e      	ldr	r3, [pc, #632]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bea:	2180      	movs	r1, #128	; 0x80
 8003bec:	0249      	lsls	r1, r1, #9
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xe0>
 8003bf4:	4b9b      	ldr	r3, [pc, #620]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b9a      	ldr	r3, [pc, #616]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003bfa:	499b      	ldr	r1, [pc, #620]	; (8003e68 <HAL_RCC_OscConfig+0x33c>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	4b98      	ldr	r3, [pc, #608]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b97      	ldr	r3, [pc, #604]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c06:	4999      	ldr	r1, [pc, #612]	; (8003e6c <HAL_RCC_OscConfig+0x340>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d014      	beq.n	8003c3e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe f93c 	bl	8001e90 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1e:	f7fe f937 	bl	8001e90 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	; 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e2fd      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c30:	4b8c      	ldr	r3, [pc, #560]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	029b      	lsls	r3, r3, #10
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0xf2>
 8003c3c:	e015      	b.n	8003c6a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe f927 	bl	8001e90 <HAL_GetTick>
 8003c42:	0003      	movs	r3, r0
 8003c44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe f922 	bl	8001e90 <HAL_GetTick>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e2e8      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b82      	ldr	r3, [pc, #520]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	029b      	lsls	r3, r3, #10
 8003c62:	4013      	ands	r3, r2
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x11c>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	d100      	bne.n	8003c76 <HAL_RCC_OscConfig+0x14a>
 8003c74:	e06c      	b.n	8003d50 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c76:	4b7b      	ldr	r3, [pc, #492]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	220c      	movs	r2, #12
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c80:	4b78      	ldr	r3, [pc, #480]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	220c      	movs	r2, #12
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d11f      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1a0>
 8003c8c:	4b75      	ldr	r3, [pc, #468]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	23c0      	movs	r3, #192	; 0xc0
 8003c92:	025b      	lsls	r3, r3, #9
 8003c94:	401a      	ands	r2, r3
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d116      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x188>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e2bb      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b6b      	ldr	r3, [pc, #428]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	22f8      	movs	r2, #248	; 0xf8
 8003cba:	4393      	bics	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00da      	lsls	r2, r3, #3
 8003cc4:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	e041      	b.n	8003d50 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d024      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd4:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe f8d6 	bl	8001e90 <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe f8d1 	bl	8001e90 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e297      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2202      	movs	r2, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	d0f1      	beq.n	8003cea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	22f8      	movs	r2, #248	; 0xf8
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	00da      	lsls	r2, r3, #3
 8003d16:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b51      	ldr	r3, [pc, #324]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b50      	ldr	r3, [pc, #320]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d24:	2101      	movs	r1, #1
 8003d26:	438a      	bics	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe f8b1 	bl	8001e90 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fe f8ac 	bl	8001e90 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e272      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d1f1      	bne.n	8003d34 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2208      	movs	r2, #8
 8003d56:	4013      	ands	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d019      	beq.n	8003d96 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d62:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d66:	4b3f      	ldr	r3, [pc, #252]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d68:	2101      	movs	r1, #1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fe f88f 	bl	8001e90 <HAL_GetTick>
 8003d72:	0003      	movs	r3, r0
 8003d74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fe f88a 	bl	8001e90 <HAL_GetTick>
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e250      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2202      	movs	r2, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	d0f1      	beq.n	8003d78 <HAL_RCC_OscConfig+0x24c>
 8003d94:	e018      	b.n	8003dc8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9a:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	438a      	bics	r2, r1
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fe f875 	bl	8001e90 <HAL_GetTick>
 8003da6:	0003      	movs	r3, r0
 8003da8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dac:	f7fe f870 	bl	8001e90 <HAL_GetTick>
 8003db0:	0002      	movs	r2, r0
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e236      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbe:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d1f1      	bne.n	8003dac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d100      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2a8>
 8003dd2:	e0b5      	b.n	8003f40 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd4:	231f      	movs	r3, #31
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	055b      	lsls	r3, r3, #21
 8003de4:	4013      	ands	r3, r2
 8003de6:	d111      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de8:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	0549      	lsls	r1, r1, #21
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
 8003df6:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	055b      	lsls	r3, r3, #21
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e04:	231f      	movs	r3, #31
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_RCC_OscConfig+0x344>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	d11a      	bne.n	8003e4e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_RCC_OscConfig+0x344>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_RCC_OscConfig+0x344>)
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	0049      	lsls	r1, r1, #1
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fe f833 	bl	8001e90 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fe f82e 	bl	8001e90 <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1f4      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_OscConfig+0x344>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d10e      	bne.n	8003e74 <HAL_RCC_OscConfig+0x348>
 8003e56:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003e58:	6a1a      	ldr	r2, [r3, #32]
 8003e5a:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	621a      	str	r2, [r3, #32]
 8003e62:	e035      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3a4>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	fffeffff 	.word	0xfffeffff
 8003e6c:	fffbffff 	.word	0xfffbffff
 8003e70:	40007000 	.word	0x40007000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x36a>
 8003e7c:	4bca      	ldr	r3, [pc, #808]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	4bc9      	ldr	r3, [pc, #804]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003e82:	2101      	movs	r1, #1
 8003e84:	438a      	bics	r2, r1
 8003e86:	621a      	str	r2, [r3, #32]
 8003e88:	4bc7      	ldr	r3, [pc, #796]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	4bc6      	ldr	r3, [pc, #792]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003e8e:	2104      	movs	r1, #4
 8003e90:	438a      	bics	r2, r1
 8003e92:	621a      	str	r2, [r3, #32]
 8003e94:	e01c      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3a4>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x38c>
 8003e9e:	4bc2      	ldr	r3, [pc, #776]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	4bc1      	ldr	r3, [pc, #772]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	621a      	str	r2, [r3, #32]
 8003eaa:	4bbf      	ldr	r3, [pc, #764]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	4bbe      	ldr	r3, [pc, #760]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	621a      	str	r2, [r3, #32]
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3a4>
 8003eb8:	4bbb      	ldr	r3, [pc, #748]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	4bba      	ldr	r3, [pc, #744]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	621a      	str	r2, [r3, #32]
 8003ec4:	4bb8      	ldr	r3, [pc, #736]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	4bb7      	ldr	r3, [pc, #732]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003eca:	2104      	movs	r1, #4
 8003ecc:	438a      	bics	r2, r1
 8003ece:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d014      	beq.n	8003f02 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed8:	f7fd ffda 	bl	8001e90 <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd ffd5 	bl	8001e90 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	4aaf      	ldr	r2, [pc, #700]	; (80041ac <HAL_RCC_OscConfig+0x680>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e19a      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef6:	4bac      	ldr	r3, [pc, #688]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	2202      	movs	r2, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x3b6>
 8003f00:	e013      	b.n	8003f2a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fd ffc5 	bl	8001e90 <HAL_GetTick>
 8003f06:	0003      	movs	r3, r0
 8003f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0a:	e009      	b.n	8003f20 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fd ffc0 	bl	8001e90 <HAL_GetTick>
 8003f10:	0002      	movs	r2, r0
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	4aa5      	ldr	r2, [pc, #660]	; (80041ac <HAL_RCC_OscConfig+0x680>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e185      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	4ba1      	ldr	r3, [pc, #644]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	2202      	movs	r2, #2
 8003f26:	4013      	ands	r3, r2
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f2a:	231f      	movs	r3, #31
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f34:	4b9c      	ldr	r3, [pc, #624]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	4b9b      	ldr	r3, [pc, #620]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f3a:	499d      	ldr	r1, [pc, #628]	; (80041b0 <HAL_RCC_OscConfig+0x684>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2210      	movs	r2, #16
 8003f46:	4013      	ands	r3, r2
 8003f48:	d063      	beq.n	8004012 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d12a      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f52:	4b95      	ldr	r3, [pc, #596]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f56:	4b94      	ldr	r3, [pc, #592]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f58:	2104      	movs	r1, #4
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f5e:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f62:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd ff91 	bl	8001e90 <HAL_GetTick>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f74:	f7fd ff8c 	bl	8001e90 <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e152      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d0f1      	beq.n	8003f74 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f90:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	22f8      	movs	r2, #248	; 0xf8
 8003f96:	4393      	bics	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	00da      	lsls	r2, r3, #3
 8003fa0:	4b81      	ldr	r3, [pc, #516]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa6:	e034      	b.n	8004012 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	3305      	adds	r3, #5
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003fb0:	4b7d      	ldr	r3, [pc, #500]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb4:	4b7c      	ldr	r3, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fb6:	2104      	movs	r1, #4
 8003fb8:	438a      	bics	r2, r1
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003fbc:	4b7a      	ldr	r3, [pc, #488]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	22f8      	movs	r2, #248	; 0xf8
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	00da      	lsls	r2, r3, #3
 8003fcc:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd2:	e01e      	b.n	8004012 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fd4:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	4b73      	ldr	r3, [pc, #460]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fda:	2104      	movs	r1, #4
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fe0:	4b71      	ldr	r3, [pc, #452]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe4:	4b70      	ldr	r3, [pc, #448]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	438a      	bics	r2, r1
 8003fea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fec:	f7fd ff50 	bl	8001e90 <HAL_GetTick>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ff6:	f7fd ff4b 	bl	8001e90 <HAL_GetTick>
 8003ffa:	0002      	movs	r2, r0
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e111      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004008:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	2202      	movs	r2, #2
 800400e:	4013      	ands	r3, r2
 8004010:	d1f1      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2220      	movs	r2, #32
 8004018:	4013      	ands	r3, r2
 800401a:	d05c      	beq.n	80040d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800401c:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	220c      	movs	r2, #12
 8004022:	4013      	ands	r3, r2
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d00e      	beq.n	8004046 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004028:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	220c      	movs	r2, #12
 800402e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004030:	2b08      	cmp	r3, #8
 8004032:	d114      	bne.n	800405e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004034:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	23c0      	movs	r3, #192	; 0xc0
 800403a:	025b      	lsls	r3, r3, #9
 800403c:	401a      	ands	r2, r3
 800403e:	23c0      	movs	r3, #192	; 0xc0
 8004040:	025b      	lsls	r3, r3, #9
 8004042:	429a      	cmp	r2, r3
 8004044:	d10b      	bne.n	800405e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004046:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	025b      	lsls	r3, r3, #9
 800404e:	4013      	ands	r3, r2
 8004050:	d040      	beq.n	80040d4 <HAL_RCC_OscConfig+0x5a8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d03c      	beq.n	80040d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0e6      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01b      	beq.n	800409e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004066:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406a:	4b4f      	ldr	r3, [pc, #316]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800406c:	2180      	movs	r1, #128	; 0x80
 800406e:	0249      	lsls	r1, r1, #9
 8004070:	430a      	orrs	r2, r1
 8004072:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd ff0c 	bl	8001e90 <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800407e:	f7fd ff07 	bl	8001e90 <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e0cd      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004090:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	025b      	lsls	r3, r3, #9
 8004098:	4013      	ands	r3, r2
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x552>
 800409c:	e01b      	b.n	80040d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800409e:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 80040a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 80040a4:	4943      	ldr	r1, [pc, #268]	; (80041b4 <HAL_RCC_OscConfig+0x688>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fd fef1 	bl	8001e90 <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b4:	f7fd feec 	bl	8001e90 <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0b2      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80040c6:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 80040c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	025b      	lsls	r3, r3, #9
 80040ce:	4013      	ands	r3, r2
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x588>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80040d4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d100      	bne.n	80040e0 <HAL_RCC_OscConfig+0x5b4>
 80040de:	e0a4      	b.n	800422a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	220c      	movs	r2, #12
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d100      	bne.n	80040ee <HAL_RCC_OscConfig+0x5c2>
 80040ec:	e078      	b.n	80041e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d14c      	bne.n	8004190 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 80040fc:	492e      	ldr	r1, [pc, #184]	; (80041b8 <HAL_RCC_OscConfig+0x68c>)
 80040fe:	400a      	ands	r2, r1
 8004100:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fd fec5 	bl	8001e90 <HAL_GetTick>
 8004106:	0003      	movs	r3, r0
 8004108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fec0 	bl	8001e90 <HAL_GetTick>
 8004110:	0002      	movs	r2, r0
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e086      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	049b      	lsls	r3, r3, #18
 8004126:	4013      	ands	r3, r2
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	220f      	movs	r2, #15
 8004130:	4393      	bics	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800413a:	430a      	orrs	r2, r1
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_RCC_OscConfig+0x690>)
 8004144:	4013      	ands	r3, r2
 8004146:	0019      	movs	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	431a      	orrs	r2, r3
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 800415e:	2180      	movs	r1, #128	; 0x80
 8004160:	0449      	lsls	r1, r1, #17
 8004162:	430a      	orrs	r2, r1
 8004164:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fd fe93 	bl	8001e90 <HAL_GetTick>
 800416a:	0003      	movs	r3, r0
 800416c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd fe8e 	bl	8001e90 <HAL_GetTick>
 8004174:	0002      	movs	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e054      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	049b      	lsls	r3, r3, #18
 800418a:	4013      	ands	r3, r2
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x644>
 800418e:	e04c      	b.n	800422a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCC_OscConfig+0x67c>)
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <HAL_RCC_OscConfig+0x68c>)
 8004198:	400a      	ands	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fd fe78 	bl	8001e90 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a4:	e015      	b.n	80041d2 <HAL_RCC_OscConfig+0x6a6>
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	40021000 	.word	0x40021000
 80041ac:	00001388 	.word	0x00001388
 80041b0:	efffffff 	.word	0xefffffff
 80041b4:	fffeffff 	.word	0xfffeffff
 80041b8:	feffffff 	.word	0xfeffffff
 80041bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fd fe66 	bl	8001e90 <HAL_GetTick>
 80041c4:	0002      	movs	r2, r0
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e02c      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d2:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_RCC_OscConfig+0x708>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	049b      	lsls	r3, r3, #18
 80041da:	4013      	ands	r3, r2
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x694>
 80041de:	e024      	b.n	800422a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e01f      	b.n	800422c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_RCC_OscConfig+0x708>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <HAL_RCC_OscConfig+0x708>)
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	23c0      	movs	r3, #192	; 0xc0
 80041fc:	025b      	lsls	r3, r3, #9
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	429a      	cmp	r2, r3
 8004206:	d10e      	bne.n	8004226 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	220f      	movs	r2, #15
 800420c:	401a      	ands	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d107      	bne.n	8004226 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	23f0      	movs	r3, #240	; 0xf0
 800421a:	039b      	lsls	r3, r3, #14
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b008      	add	sp, #32
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000

08004238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0bf      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	4013      	ands	r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d911      	bls.n	800427e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	4393      	bics	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	4b5b      	ldr	r3, [pc, #364]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	4013      	ands	r3, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d001      	beq.n	800427e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0a6      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2202      	movs	r2, #2
 8004284:	4013      	ands	r3, r2
 8004286:	d015      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2204      	movs	r2, #4
 800428e:	4013      	ands	r3, r2
 8004290:	d006      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004292:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 8004298:	21e0      	movs	r1, #224	; 0xe0
 800429a:	00c9      	lsls	r1, r1, #3
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b4d      	ldr	r3, [pc, #308]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	22f0      	movs	r2, #240	; 0xf0
 80042a6:	4393      	bics	r3, r2
 80042a8:	0019      	movs	r1, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2201      	movs	r2, #1
 80042ba:	4013      	ands	r3, r2
 80042bc:	d04c      	beq.n	8004358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b44      	ldr	r3, [pc, #272]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	029b      	lsls	r3, r3, #10
 80042ce:	4013      	ands	r3, r2
 80042d0:	d120      	bne.n	8004314 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07a      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	049b      	lsls	r3, r3, #18
 80042e6:	4013      	ands	r3, r2
 80042e8:	d114      	bne.n	8004314 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06e      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 80042f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	025b      	lsls	r3, r3, #9
 80042fe:	4013      	ands	r3, r2
 8004300:	d108      	bne.n	8004314 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e062      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2202      	movs	r2, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e05b      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004314:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2203      	movs	r2, #3
 800431a:	4393      	bics	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004328:	f7fd fdb2 	bl	8001e90 <HAL_GetTick>
 800432c:	0003      	movs	r3, r0
 800432e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004330:	e009      	b.n	8004346 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004332:	f7fd fdad 	bl	8001e90 <HAL_GetTick>
 8004336:	0002      	movs	r2, r0
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <HAL_RCC_ClockConfig+0x1a4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e042      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	220c      	movs	r2, #12
 800434c:	401a      	ands	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1ec      	bne.n	8004332 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	4013      	ands	r3, r2
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d211      	bcs.n	800438a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2201      	movs	r2, #1
 800436c:	4393      	bics	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004378:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_RCC_ClockConfig+0x19c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	4013      	ands	r3, r2
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d001      	beq.n	800438a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e020      	b.n	80043cc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2204      	movs	r2, #4
 8004390:	4013      	ands	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_RCC_ClockConfig+0x1a8>)
 800439a:	4013      	ands	r3, r2
 800439c:	0019      	movs	r1, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043a8:	f000 f820 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80043ac:	0001      	movs	r1, r0
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCC_ClockConfig+0x1a0>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	091b      	lsrs	r3, r3, #4
 80043b4:	220f      	movs	r2, #15
 80043b6:	4013      	ands	r3, r2
 80043b8:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <HAL_RCC_ClockConfig+0x1ac>)
 80043ba:	5cd3      	ldrb	r3, [r2, r3]
 80043bc:	000a      	movs	r2, r1
 80043be:	40da      	lsrs	r2, r3
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x1b0>)
 80043c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80043c4:	2000      	movs	r0, #0
 80043c6:	f7fd fd1d 	bl	8001e04 <HAL_InitTick>
  
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b004      	add	sp, #16
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40022000 	.word	0x40022000
 80043d8:	40021000 	.word	0x40021000
 80043dc:	00001388 	.word	0x00001388
 80043e0:	fffff8ff 	.word	0xfffff8ff
 80043e4:	08004fd8 	.word	0x08004fd8
 80043e8:	20000000 	.word	0x20000000

080043ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b08f      	sub	sp, #60	; 0x3c
 80043f0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80043f2:	2314      	movs	r3, #20
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	4a37      	ldr	r2, [pc, #220]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xe8>)
 80043f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043fa:	c313      	stmia	r3!, {r0, r1, r4}
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	4a35      	ldr	r2, [pc, #212]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xec>)
 8004404:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004406:	c313      	stmia	r3!, {r0, r1, r4}
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004410:	2300      	movs	r3, #0
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28
 8004414:	2300      	movs	r3, #0
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004420:	4b2e      	ldr	r3, [pc, #184]	; (80044dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	220c      	movs	r2, #12
 800442a:	4013      	ands	r3, r2
 800442c:	2b08      	cmp	r3, #8
 800442e:	d006      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x52>
 8004430:	2b0c      	cmp	r3, #12
 8004432:	d043      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0xd0>
 8004434:	2b04      	cmp	r3, #4
 8004436:	d144      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004438:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800443c:	e044      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	0c9b      	lsrs	r3, r3, #18
 8004442:	220f      	movs	r2, #15
 8004444:	4013      	ands	r3, r2
 8004446:	2214      	movs	r2, #20
 8004448:	18ba      	adds	r2, r7, r2
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	220f      	movs	r2, #15
 8004454:	4013      	ands	r3, r2
 8004456:	1d3a      	adds	r2, r7, #4
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800445c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800445e:	23c0      	movs	r3, #192	; 0xc0
 8004460:	025b      	lsls	r3, r3, #9
 8004462:	401a      	ands	r2, r3
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	429a      	cmp	r2, r3
 800446a:	d109      	bne.n	8004480 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800446c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446e:	481c      	ldr	r0, [pc, #112]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004470:	f7fb fe4a 	bl	8000108 <__udivsi3>
 8004474:	0003      	movs	r3, r0
 8004476:	001a      	movs	r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	4353      	muls	r3, r2
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
 800447e:	e01a      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004482:	23c0      	movs	r3, #192	; 0xc0
 8004484:	025b      	lsls	r3, r3, #9
 8004486:	401a      	ands	r2, r3
 8004488:	23c0      	movs	r3, #192	; 0xc0
 800448a:	025b      	lsls	r3, r3, #9
 800448c:	429a      	cmp	r2, r3
 800448e:	d109      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004492:	4814      	ldr	r0, [pc, #80]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004494:	f7fb fe38 	bl	8000108 <__udivsi3>
 8004498:	0003      	movs	r3, r0
 800449a:	001a      	movs	r2, r3
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	4353      	muls	r3, r2
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	480e      	ldr	r0, [pc, #56]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044a8:	f7fb fe2e 	bl	8000108 <__udivsi3>
 80044ac:	0003      	movs	r3, r0
 80044ae:	001a      	movs	r2, r3
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	4353      	muls	r3, r2
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80044b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044c0:	e002      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b00f      	add	sp, #60	; 0x3c
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	08004f78 	.word	0x08004f78
 80044d8:	08004f88 	.word	0x08004f88
 80044dc:	40021000 	.word	0x40021000
 80044e0:	007a1200 	.word	0x007a1200
 80044e4:	02dc6c00 	.word	0x02dc6c00

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	025b      	lsls	r3, r3, #9
 8004500:	4013      	ands	r3, r2
 8004502:	d100      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004504:	e08f      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2317      	movs	r3, #23
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450e:	4b67      	ldr	r3, [pc, #412]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	055b      	lsls	r3, r3, #21
 8004516:	4013      	ands	r3, r2
 8004518:	d111      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	4b64      	ldr	r3, [pc, #400]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	0549      	lsls	r1, r1, #21
 8004524:	430a      	orrs	r2, r1
 8004526:	61da      	str	r2, [r3, #28]
 8004528:	4b60      	ldr	r3, [pc, #384]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	055b      	lsls	r3, r3, #21
 8004530:	4013      	ands	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2317      	movs	r3, #23
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b5c      	ldr	r3, [pc, #368]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4013      	ands	r3, r2
 8004548:	d11a      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b59      	ldr	r3, [pc, #356]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	0049      	lsls	r1, r1, #1
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004558:	f7fd fc9a 	bl	8001e90 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	e008      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004562:	f7fd fc95 	bl	8001e90 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	; 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e097      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4013      	ands	r3, r2
 800457e:	d0f0      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004580:	4b4a      	ldr	r3, [pc, #296]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	23c0      	movs	r3, #192	; 0xc0
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d034      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	23c0      	movs	r3, #192	; 0xc0
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4013      	ands	r3, r2
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d02c      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a2:	4b42      	ldr	r3, [pc, #264]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4a43      	ldr	r2, [pc, #268]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ac:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	4b3e      	ldr	r3, [pc, #248]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045b2:	2180      	movs	r1, #128	; 0x80
 80045b4:	0249      	lsls	r1, r1, #9
 80045b6:	430a      	orrs	r2, r1
 80045b8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ba:	4b3c      	ldr	r3, [pc, #240]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045c0:	493d      	ldr	r1, [pc, #244]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	400a      	ands	r2, r1
 80045c4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	4013      	ands	r3, r2
 80045d2:	d013      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fd fc5c 	bl	8001e90 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045dc:	e009      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f7fd fc57 	bl	8001e90 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	4a34      	ldr	r2, [pc, #208]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e058      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	2202      	movs	r2, #2
 80045f8:	4013      	ands	r3, r2
 80045fa:	d0f0      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004602:	4013      	ands	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b28      	ldr	r3, [pc, #160]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800460c:	430a      	orrs	r2, r1
 800460e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004610:	2317      	movs	r3, #23
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d105      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004620:	4927      	ldr	r1, [pc, #156]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004622:	400a      	ands	r2, r1
 8004624:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	4013      	ands	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004630:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	2203      	movs	r2, #3
 8004636:	4393      	bics	r3, r2
 8004638:	0019      	movs	r1, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004640:	430a      	orrs	r2, r1
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2220      	movs	r2, #32
 800464a:	4013      	ands	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	2210      	movs	r2, #16
 8004654:	4393      	bics	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	4b13      	ldr	r3, [pc, #76]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800465e:	430a      	orrs	r2, r1
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	029b      	lsls	r3, r3, #10
 800466a:	4013      	ands	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	4393      	bics	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800467e:	430a      	orrs	r2, r1
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4013      	ands	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	4393      	bics	r3, r2
 8004696:	0019      	movs	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800469e:	430a      	orrs	r2, r1
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b006      	add	sp, #24
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40007000 	.word	0x40007000
 80046b4:	fffffcff 	.word	0xfffffcff
 80046b8:	fffeffff 	.word	0xfffeffff
 80046bc:	00001388 	.word	0x00001388
 80046c0:	efffffff 	.word	0xefffffff

080046c4 <__errno>:
 80046c4:	4b01      	ldr	r3, [pc, #4]	; (80046cc <__errno+0x8>)
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	4770      	bx	lr
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	2000001c 	.word	0x2000001c

080046d0 <__libc_init_array>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	2600      	movs	r6, #0
 80046d4:	4d0c      	ldr	r5, [pc, #48]	; (8004708 <__libc_init_array+0x38>)
 80046d6:	4c0d      	ldr	r4, [pc, #52]	; (800470c <__libc_init_array+0x3c>)
 80046d8:	1b64      	subs	r4, r4, r5
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	42a6      	cmp	r6, r4
 80046de:	d109      	bne.n	80046f4 <__libc_init_array+0x24>
 80046e0:	2600      	movs	r6, #0
 80046e2:	f000 fc29 	bl	8004f38 <_init>
 80046e6:	4d0a      	ldr	r5, [pc, #40]	; (8004710 <__libc_init_array+0x40>)
 80046e8:	4c0a      	ldr	r4, [pc, #40]	; (8004714 <__libc_init_array+0x44>)
 80046ea:	1b64      	subs	r4, r4, r5
 80046ec:	10a4      	asrs	r4, r4, #2
 80046ee:	42a6      	cmp	r6, r4
 80046f0:	d105      	bne.n	80046fe <__libc_init_array+0x2e>
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	00b3      	lsls	r3, r6, #2
 80046f6:	58eb      	ldr	r3, [r5, r3]
 80046f8:	4798      	blx	r3
 80046fa:	3601      	adds	r6, #1
 80046fc:	e7ee      	b.n	80046dc <__libc_init_array+0xc>
 80046fe:	00b3      	lsls	r3, r6, #2
 8004700:	58eb      	ldr	r3, [r5, r3]
 8004702:	4798      	blx	r3
 8004704:	3601      	adds	r6, #1
 8004706:	e7f2      	b.n	80046ee <__libc_init_array+0x1e>
 8004708:	080064e4 	.word	0x080064e4
 800470c:	080064e4 	.word	0x080064e4
 8004710:	080064e4 	.word	0x080064e4
 8004714:	080064e8 	.word	0x080064e8

08004718 <memcpy>:
 8004718:	2300      	movs	r3, #0
 800471a:	b510      	push	{r4, lr}
 800471c:	429a      	cmp	r2, r3
 800471e:	d100      	bne.n	8004722 <memcpy+0xa>
 8004720:	bd10      	pop	{r4, pc}
 8004722:	5ccc      	ldrb	r4, [r1, r3]
 8004724:	54c4      	strb	r4, [r0, r3]
 8004726:	3301      	adds	r3, #1
 8004728:	e7f8      	b.n	800471c <memcpy+0x4>

0800472a <memset>:
 800472a:	0003      	movs	r3, r0
 800472c:	1812      	adds	r2, r2, r0
 800472e:	4293      	cmp	r3, r2
 8004730:	d100      	bne.n	8004734 <memset+0xa>
 8004732:	4770      	bx	lr
 8004734:	7019      	strb	r1, [r3, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	e7f9      	b.n	800472e <memset+0x4>
	...

0800473c <siprintf>:
 800473c:	b40e      	push	{r1, r2, r3}
 800473e:	b500      	push	{lr}
 8004740:	490b      	ldr	r1, [pc, #44]	; (8004770 <siprintf+0x34>)
 8004742:	b09c      	sub	sp, #112	; 0x70
 8004744:	ab1d      	add	r3, sp, #116	; 0x74
 8004746:	9002      	str	r0, [sp, #8]
 8004748:	9006      	str	r0, [sp, #24]
 800474a:	9107      	str	r1, [sp, #28]
 800474c:	9104      	str	r1, [sp, #16]
 800474e:	4809      	ldr	r0, [pc, #36]	; (8004774 <siprintf+0x38>)
 8004750:	4909      	ldr	r1, [pc, #36]	; (8004778 <siprintf+0x3c>)
 8004752:	cb04      	ldmia	r3!, {r2}
 8004754:	9105      	str	r1, [sp, #20]
 8004756:	6800      	ldr	r0, [r0, #0]
 8004758:	a902      	add	r1, sp, #8
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	f000 f870 	bl	8004840 <_svfiprintf_r>
 8004760:	2300      	movs	r3, #0
 8004762:	9a02      	ldr	r2, [sp, #8]
 8004764:	7013      	strb	r3, [r2, #0]
 8004766:	b01c      	add	sp, #112	; 0x70
 8004768:	bc08      	pop	{r3}
 800476a:	b003      	add	sp, #12
 800476c:	4718      	bx	r3
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	7fffffff 	.word	0x7fffffff
 8004774:	2000001c 	.word	0x2000001c
 8004778:	ffff0208 	.word	0xffff0208

0800477c <__ssputs_r>:
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	688e      	ldr	r6, [r1, #8]
 8004780:	b085      	sub	sp, #20
 8004782:	0007      	movs	r7, r0
 8004784:	000c      	movs	r4, r1
 8004786:	9203      	str	r2, [sp, #12]
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	429e      	cmp	r6, r3
 800478c:	d83c      	bhi.n	8004808 <__ssputs_r+0x8c>
 800478e:	2390      	movs	r3, #144	; 0x90
 8004790:	898a      	ldrh	r2, [r1, #12]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	421a      	tst	r2, r3
 8004796:	d034      	beq.n	8004802 <__ssputs_r+0x86>
 8004798:	2503      	movs	r5, #3
 800479a:	6909      	ldr	r1, [r1, #16]
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	1a5b      	subs	r3, r3, r1
 80047a0:	9302      	str	r3, [sp, #8]
 80047a2:	6963      	ldr	r3, [r4, #20]
 80047a4:	9802      	ldr	r0, [sp, #8]
 80047a6:	435d      	muls	r5, r3
 80047a8:	0feb      	lsrs	r3, r5, #31
 80047aa:	195d      	adds	r5, r3, r5
 80047ac:	9b01      	ldr	r3, [sp, #4]
 80047ae:	106d      	asrs	r5, r5, #1
 80047b0:	3301      	adds	r3, #1
 80047b2:	181b      	adds	r3, r3, r0
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	d900      	bls.n	80047ba <__ssputs_r+0x3e>
 80047b8:	001d      	movs	r5, r3
 80047ba:	0553      	lsls	r3, r2, #21
 80047bc:	d532      	bpl.n	8004824 <__ssputs_r+0xa8>
 80047be:	0029      	movs	r1, r5
 80047c0:	0038      	movs	r0, r7
 80047c2:	f000 fb19 	bl	8004df8 <_malloc_r>
 80047c6:	1e06      	subs	r6, r0, #0
 80047c8:	d109      	bne.n	80047de <__ssputs_r+0x62>
 80047ca:	230c      	movs	r3, #12
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	2340      	movs	r3, #64	; 0x40
 80047d0:	2001      	movs	r0, #1
 80047d2:	89a2      	ldrh	r2, [r4, #12]
 80047d4:	4240      	negs	r0, r0
 80047d6:	4313      	orrs	r3, r2
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	b005      	add	sp, #20
 80047dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047de:	9a02      	ldr	r2, [sp, #8]
 80047e0:	6921      	ldr	r1, [r4, #16]
 80047e2:	f7ff ff99 	bl	8004718 <memcpy>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <__ssputs_r+0xc0>)
 80047ea:	401a      	ands	r2, r3
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	4313      	orrs	r3, r2
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	9b02      	ldr	r3, [sp, #8]
 80047f4:	6126      	str	r6, [r4, #16]
 80047f6:	18f6      	adds	r6, r6, r3
 80047f8:	6026      	str	r6, [r4, #0]
 80047fa:	6165      	str	r5, [r4, #20]
 80047fc:	9e01      	ldr	r6, [sp, #4]
 80047fe:	1aed      	subs	r5, r5, r3
 8004800:	60a5      	str	r5, [r4, #8]
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	429e      	cmp	r6, r3
 8004806:	d900      	bls.n	800480a <__ssputs_r+0x8e>
 8004808:	9e01      	ldr	r6, [sp, #4]
 800480a:	0032      	movs	r2, r6
 800480c:	9903      	ldr	r1, [sp, #12]
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	f000 fa95 	bl	8004d3e <memmove>
 8004814:	68a3      	ldr	r3, [r4, #8]
 8004816:	2000      	movs	r0, #0
 8004818:	1b9b      	subs	r3, r3, r6
 800481a:	60a3      	str	r3, [r4, #8]
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	199e      	adds	r6, r3, r6
 8004820:	6026      	str	r6, [r4, #0]
 8004822:	e7da      	b.n	80047da <__ssputs_r+0x5e>
 8004824:	002a      	movs	r2, r5
 8004826:	0038      	movs	r0, r7
 8004828:	f000 fb44 	bl	8004eb4 <_realloc_r>
 800482c:	1e06      	subs	r6, r0, #0
 800482e:	d1e0      	bne.n	80047f2 <__ssputs_r+0x76>
 8004830:	6921      	ldr	r1, [r4, #16]
 8004832:	0038      	movs	r0, r7
 8004834:	f000 fa96 	bl	8004d64 <_free_r>
 8004838:	e7c7      	b.n	80047ca <__ssputs_r+0x4e>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	fffffb7f 	.word	0xfffffb7f

08004840 <_svfiprintf_r>:
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	b0a1      	sub	sp, #132	; 0x84
 8004844:	9003      	str	r0, [sp, #12]
 8004846:	001d      	movs	r5, r3
 8004848:	898b      	ldrh	r3, [r1, #12]
 800484a:	000f      	movs	r7, r1
 800484c:	0016      	movs	r6, r2
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	d511      	bpl.n	8004876 <_svfiprintf_r+0x36>
 8004852:	690b      	ldr	r3, [r1, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10e      	bne.n	8004876 <_svfiprintf_r+0x36>
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	f000 facd 	bl	8004df8 <_malloc_r>
 800485e:	6038      	str	r0, [r7, #0]
 8004860:	6138      	str	r0, [r7, #16]
 8004862:	2800      	cmp	r0, #0
 8004864:	d105      	bne.n	8004872 <_svfiprintf_r+0x32>
 8004866:	230c      	movs	r3, #12
 8004868:	9a03      	ldr	r2, [sp, #12]
 800486a:	3801      	subs	r0, #1
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	b021      	add	sp, #132	; 0x84
 8004870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	2300      	movs	r3, #0
 8004878:	ac08      	add	r4, sp, #32
 800487a:	6163      	str	r3, [r4, #20]
 800487c:	3320      	adds	r3, #32
 800487e:	7663      	strb	r3, [r4, #25]
 8004880:	3310      	adds	r3, #16
 8004882:	76a3      	strb	r3, [r4, #26]
 8004884:	9507      	str	r5, [sp, #28]
 8004886:	0035      	movs	r5, r6
 8004888:	782b      	ldrb	r3, [r5, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <_svfiprintf_r+0x52>
 800488e:	2b25      	cmp	r3, #37	; 0x25
 8004890:	d146      	bne.n	8004920 <_svfiprintf_r+0xe0>
 8004892:	1bab      	subs	r3, r5, r6
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	d00c      	beq.n	80048b2 <_svfiprintf_r+0x72>
 8004898:	0032      	movs	r2, r6
 800489a:	0039      	movs	r1, r7
 800489c:	9803      	ldr	r0, [sp, #12]
 800489e:	f7ff ff6d 	bl	800477c <__ssputs_r>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d100      	bne.n	80048a8 <_svfiprintf_r+0x68>
 80048a6:	e0ae      	b.n	8004a06 <_svfiprintf_r+0x1c6>
 80048a8:	6962      	ldr	r2, [r4, #20]
 80048aa:	9b05      	ldr	r3, [sp, #20]
 80048ac:	4694      	mov	ip, r2
 80048ae:	4463      	add	r3, ip
 80048b0:	6163      	str	r3, [r4, #20]
 80048b2:	782b      	ldrb	r3, [r5, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d100      	bne.n	80048ba <_svfiprintf_r+0x7a>
 80048b8:	e0a5      	b.n	8004a06 <_svfiprintf_r+0x1c6>
 80048ba:	2201      	movs	r2, #1
 80048bc:	2300      	movs	r3, #0
 80048be:	4252      	negs	r2, r2
 80048c0:	6062      	str	r2, [r4, #4]
 80048c2:	a904      	add	r1, sp, #16
 80048c4:	3254      	adds	r2, #84	; 0x54
 80048c6:	1852      	adds	r2, r2, r1
 80048c8:	1c6e      	adds	r6, r5, #1
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	60e3      	str	r3, [r4, #12]
 80048ce:	60a3      	str	r3, [r4, #8]
 80048d0:	7013      	strb	r3, [r2, #0]
 80048d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80048d4:	7831      	ldrb	r1, [r6, #0]
 80048d6:	2205      	movs	r2, #5
 80048d8:	4853      	ldr	r0, [pc, #332]	; (8004a28 <_svfiprintf_r+0x1e8>)
 80048da:	f000 fa25 	bl	8004d28 <memchr>
 80048de:	1c75      	adds	r5, r6, #1
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d11f      	bne.n	8004924 <_svfiprintf_r+0xe4>
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	06d3      	lsls	r3, r2, #27
 80048e8:	d504      	bpl.n	80048f4 <_svfiprintf_r+0xb4>
 80048ea:	2353      	movs	r3, #83	; 0x53
 80048ec:	a904      	add	r1, sp, #16
 80048ee:	185b      	adds	r3, r3, r1
 80048f0:	2120      	movs	r1, #32
 80048f2:	7019      	strb	r1, [r3, #0]
 80048f4:	0713      	lsls	r3, r2, #28
 80048f6:	d504      	bpl.n	8004902 <_svfiprintf_r+0xc2>
 80048f8:	2353      	movs	r3, #83	; 0x53
 80048fa:	a904      	add	r1, sp, #16
 80048fc:	185b      	adds	r3, r3, r1
 80048fe:	212b      	movs	r1, #43	; 0x2b
 8004900:	7019      	strb	r1, [r3, #0]
 8004902:	7833      	ldrb	r3, [r6, #0]
 8004904:	2b2a      	cmp	r3, #42	; 0x2a
 8004906:	d016      	beq.n	8004936 <_svfiprintf_r+0xf6>
 8004908:	0035      	movs	r5, r6
 800490a:	2100      	movs	r1, #0
 800490c:	200a      	movs	r0, #10
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	782a      	ldrb	r2, [r5, #0]
 8004912:	1c6e      	adds	r6, r5, #1
 8004914:	3a30      	subs	r2, #48	; 0x30
 8004916:	2a09      	cmp	r2, #9
 8004918:	d94e      	bls.n	80049b8 <_svfiprintf_r+0x178>
 800491a:	2900      	cmp	r1, #0
 800491c:	d018      	beq.n	8004950 <_svfiprintf_r+0x110>
 800491e:	e010      	b.n	8004942 <_svfiprintf_r+0x102>
 8004920:	3501      	adds	r5, #1
 8004922:	e7b1      	b.n	8004888 <_svfiprintf_r+0x48>
 8004924:	4b40      	ldr	r3, [pc, #256]	; (8004a28 <_svfiprintf_r+0x1e8>)
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	1ac0      	subs	r0, r0, r3
 800492a:	2301      	movs	r3, #1
 800492c:	4083      	lsls	r3, r0
 800492e:	4313      	orrs	r3, r2
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	002e      	movs	r6, r5
 8004934:	e7ce      	b.n	80048d4 <_svfiprintf_r+0x94>
 8004936:	9b07      	ldr	r3, [sp, #28]
 8004938:	1d19      	adds	r1, r3, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	9107      	str	r1, [sp, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	db01      	blt.n	8004946 <_svfiprintf_r+0x106>
 8004942:	930b      	str	r3, [sp, #44]	; 0x2c
 8004944:	e004      	b.n	8004950 <_svfiprintf_r+0x110>
 8004946:	425b      	negs	r3, r3
 8004948:	60e3      	str	r3, [r4, #12]
 800494a:	2302      	movs	r3, #2
 800494c:	4313      	orrs	r3, r2
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	782b      	ldrb	r3, [r5, #0]
 8004952:	2b2e      	cmp	r3, #46	; 0x2e
 8004954:	d10a      	bne.n	800496c <_svfiprintf_r+0x12c>
 8004956:	786b      	ldrb	r3, [r5, #1]
 8004958:	2b2a      	cmp	r3, #42	; 0x2a
 800495a:	d135      	bne.n	80049c8 <_svfiprintf_r+0x188>
 800495c:	9b07      	ldr	r3, [sp, #28]
 800495e:	3502      	adds	r5, #2
 8004960:	1d1a      	adds	r2, r3, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	9207      	str	r2, [sp, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	db2b      	blt.n	80049c2 <_svfiprintf_r+0x182>
 800496a:	9309      	str	r3, [sp, #36]	; 0x24
 800496c:	4e2f      	ldr	r6, [pc, #188]	; (8004a2c <_svfiprintf_r+0x1ec>)
 800496e:	7829      	ldrb	r1, [r5, #0]
 8004970:	2203      	movs	r2, #3
 8004972:	0030      	movs	r0, r6
 8004974:	f000 f9d8 	bl	8004d28 <memchr>
 8004978:	2800      	cmp	r0, #0
 800497a:	d006      	beq.n	800498a <_svfiprintf_r+0x14a>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	1b80      	subs	r0, r0, r6
 8004980:	4083      	lsls	r3, r0
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	3501      	adds	r5, #1
 8004986:	4313      	orrs	r3, r2
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	7829      	ldrb	r1, [r5, #0]
 800498c:	2206      	movs	r2, #6
 800498e:	4828      	ldr	r0, [pc, #160]	; (8004a30 <_svfiprintf_r+0x1f0>)
 8004990:	1c6e      	adds	r6, r5, #1
 8004992:	7621      	strb	r1, [r4, #24]
 8004994:	f000 f9c8 	bl	8004d28 <memchr>
 8004998:	2800      	cmp	r0, #0
 800499a:	d03c      	beq.n	8004a16 <_svfiprintf_r+0x1d6>
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <_svfiprintf_r+0x1f4>)
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d125      	bne.n	80049ee <_svfiprintf_r+0x1ae>
 80049a2:	2207      	movs	r2, #7
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	3307      	adds	r3, #7
 80049a8:	4393      	bics	r3, r2
 80049aa:	3308      	adds	r3, #8
 80049ac:	9307      	str	r3, [sp, #28]
 80049ae:	6963      	ldr	r3, [r4, #20]
 80049b0:	9a04      	ldr	r2, [sp, #16]
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	6163      	str	r3, [r4, #20]
 80049b6:	e766      	b.n	8004886 <_svfiprintf_r+0x46>
 80049b8:	4343      	muls	r3, r0
 80049ba:	2101      	movs	r1, #1
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	0035      	movs	r5, r6
 80049c0:	e7a6      	b.n	8004910 <_svfiprintf_r+0xd0>
 80049c2:	2301      	movs	r3, #1
 80049c4:	425b      	negs	r3, r3
 80049c6:	e7d0      	b.n	800496a <_svfiprintf_r+0x12a>
 80049c8:	2300      	movs	r3, #0
 80049ca:	200a      	movs	r0, #10
 80049cc:	001a      	movs	r2, r3
 80049ce:	3501      	adds	r5, #1
 80049d0:	6063      	str	r3, [r4, #4]
 80049d2:	7829      	ldrb	r1, [r5, #0]
 80049d4:	1c6e      	adds	r6, r5, #1
 80049d6:	3930      	subs	r1, #48	; 0x30
 80049d8:	2909      	cmp	r1, #9
 80049da:	d903      	bls.n	80049e4 <_svfiprintf_r+0x1a4>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0c5      	beq.n	800496c <_svfiprintf_r+0x12c>
 80049e0:	9209      	str	r2, [sp, #36]	; 0x24
 80049e2:	e7c3      	b.n	800496c <_svfiprintf_r+0x12c>
 80049e4:	4342      	muls	r2, r0
 80049e6:	2301      	movs	r3, #1
 80049e8:	1852      	adds	r2, r2, r1
 80049ea:	0035      	movs	r5, r6
 80049ec:	e7f1      	b.n	80049d2 <_svfiprintf_r+0x192>
 80049ee:	ab07      	add	r3, sp, #28
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	003a      	movs	r2, r7
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <_svfiprintf_r+0x1f8>)
 80049f6:	0021      	movs	r1, r4
 80049f8:	9803      	ldr	r0, [sp, #12]
 80049fa:	e000      	b.n	80049fe <_svfiprintf_r+0x1be>
 80049fc:	bf00      	nop
 80049fe:	9004      	str	r0, [sp, #16]
 8004a00:	9b04      	ldr	r3, [sp, #16]
 8004a02:	3301      	adds	r3, #1
 8004a04:	d1d3      	bne.n	80049ae <_svfiprintf_r+0x16e>
 8004a06:	89bb      	ldrh	r3, [r7, #12]
 8004a08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a0a:	065b      	lsls	r3, r3, #25
 8004a0c:	d400      	bmi.n	8004a10 <_svfiprintf_r+0x1d0>
 8004a0e:	e72e      	b.n	800486e <_svfiprintf_r+0x2e>
 8004a10:	2001      	movs	r0, #1
 8004a12:	4240      	negs	r0, r0
 8004a14:	e72b      	b.n	800486e <_svfiprintf_r+0x2e>
 8004a16:	ab07      	add	r3, sp, #28
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	003a      	movs	r2, r7
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <_svfiprintf_r+0x1f8>)
 8004a1e:	0021      	movs	r1, r4
 8004a20:	9803      	ldr	r0, [sp, #12]
 8004a22:	f000 f879 	bl	8004b18 <_printf_i>
 8004a26:	e7ea      	b.n	80049fe <_svfiprintf_r+0x1be>
 8004a28:	080064b0 	.word	0x080064b0
 8004a2c:	080064b6 	.word	0x080064b6
 8004a30:	080064ba 	.word	0x080064ba
 8004a34:	00000000 	.word	0x00000000
 8004a38:	0800477d 	.word	0x0800477d

08004a3c <_printf_common>:
 8004a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a3e:	0015      	movs	r5, r2
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	688a      	ldr	r2, [r1, #8]
 8004a44:	690b      	ldr	r3, [r1, #16]
 8004a46:	9000      	str	r0, [sp, #0]
 8004a48:	000c      	movs	r4, r1
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	da00      	bge.n	8004a50 <_printf_common+0x14>
 8004a4e:	0013      	movs	r3, r2
 8004a50:	0022      	movs	r2, r4
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	3243      	adds	r2, #67	; 0x43
 8004a56:	7812      	ldrb	r2, [r2, #0]
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	d001      	beq.n	8004a60 <_printf_common+0x24>
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	069b      	lsls	r3, r3, #26
 8004a64:	d502      	bpl.n	8004a6c <_printf_common+0x30>
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	2706      	movs	r7, #6
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	401f      	ands	r7, r3
 8004a72:	d027      	beq.n	8004ac4 <_printf_common+0x88>
 8004a74:	0023      	movs	r3, r4
 8004a76:	3343      	adds	r3, #67	; 0x43
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	1e5a      	subs	r2, r3, #1
 8004a7c:	4193      	sbcs	r3, r2
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	0692      	lsls	r2, r2, #26
 8004a82:	d430      	bmi.n	8004ae6 <_printf_common+0xaa>
 8004a84:	0022      	movs	r2, r4
 8004a86:	9901      	ldr	r1, [sp, #4]
 8004a88:	3243      	adds	r2, #67	; 0x43
 8004a8a:	9800      	ldr	r0, [sp, #0]
 8004a8c:	9e08      	ldr	r6, [sp, #32]
 8004a8e:	47b0      	blx	r6
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d025      	beq.n	8004ae0 <_printf_common+0xa4>
 8004a94:	2306      	movs	r3, #6
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	682a      	ldr	r2, [r5, #0]
 8004a9a:	68e1      	ldr	r1, [r4, #12]
 8004a9c:	4003      	ands	r3, r0
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d103      	bne.n	8004aac <_printf_common+0x70>
 8004aa4:	1a8d      	subs	r5, r1, r2
 8004aa6:	43eb      	mvns	r3, r5
 8004aa8:	17db      	asrs	r3, r3, #31
 8004aaa:	401d      	ands	r5, r3
 8004aac:	68a3      	ldr	r3, [r4, #8]
 8004aae:	6922      	ldr	r2, [r4, #16]
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	dd01      	ble.n	8004ab8 <_printf_common+0x7c>
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	18ed      	adds	r5, r5, r3
 8004ab8:	2700      	movs	r7, #0
 8004aba:	42bd      	cmp	r5, r7
 8004abc:	d120      	bne.n	8004b00 <_printf_common+0xc4>
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e010      	b.n	8004ae4 <_printf_common+0xa8>
 8004ac2:	3701      	adds	r7, #1
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	682a      	ldr	r2, [r5, #0]
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	42bb      	cmp	r3, r7
 8004acc:	ddd2      	ble.n	8004a74 <_printf_common+0x38>
 8004ace:	0022      	movs	r2, r4
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	3219      	adds	r2, #25
 8004ad4:	9901      	ldr	r1, [sp, #4]
 8004ad6:	9800      	ldr	r0, [sp, #0]
 8004ad8:	9e08      	ldr	r6, [sp, #32]
 8004ada:	47b0      	blx	r6
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d1f0      	bne.n	8004ac2 <_printf_common+0x86>
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	4240      	negs	r0, r0
 8004ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ae6:	2030      	movs	r0, #48	; 0x30
 8004ae8:	18e1      	adds	r1, r4, r3
 8004aea:	3143      	adds	r1, #67	; 0x43
 8004aec:	7008      	strb	r0, [r1, #0]
 8004aee:	0021      	movs	r1, r4
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	3145      	adds	r1, #69	; 0x45
 8004af4:	7809      	ldrb	r1, [r1, #0]
 8004af6:	18a2      	adds	r2, r4, r2
 8004af8:	3243      	adds	r2, #67	; 0x43
 8004afa:	3302      	adds	r3, #2
 8004afc:	7011      	strb	r1, [r2, #0]
 8004afe:	e7c1      	b.n	8004a84 <_printf_common+0x48>
 8004b00:	0022      	movs	r2, r4
 8004b02:	2301      	movs	r3, #1
 8004b04:	321a      	adds	r2, #26
 8004b06:	9901      	ldr	r1, [sp, #4]
 8004b08:	9800      	ldr	r0, [sp, #0]
 8004b0a:	9e08      	ldr	r6, [sp, #32]
 8004b0c:	47b0      	blx	r6
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	d0e6      	beq.n	8004ae0 <_printf_common+0xa4>
 8004b12:	3701      	adds	r7, #1
 8004b14:	e7d1      	b.n	8004aba <_printf_common+0x7e>
	...

08004b18 <_printf_i>:
 8004b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b1a:	b089      	sub	sp, #36	; 0x24
 8004b1c:	9204      	str	r2, [sp, #16]
 8004b1e:	000a      	movs	r2, r1
 8004b20:	3243      	adds	r2, #67	; 0x43
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	9003      	str	r0, [sp, #12]
 8004b26:	9202      	str	r2, [sp, #8]
 8004b28:	7e0a      	ldrb	r2, [r1, #24]
 8004b2a:	000c      	movs	r4, r1
 8004b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b2e:	2a6e      	cmp	r2, #110	; 0x6e
 8004b30:	d100      	bne.n	8004b34 <_printf_i+0x1c>
 8004b32:	e086      	b.n	8004c42 <_printf_i+0x12a>
 8004b34:	d81f      	bhi.n	8004b76 <_printf_i+0x5e>
 8004b36:	2a63      	cmp	r2, #99	; 0x63
 8004b38:	d033      	beq.n	8004ba2 <_printf_i+0x8a>
 8004b3a:	d808      	bhi.n	8004b4e <_printf_i+0x36>
 8004b3c:	2a00      	cmp	r2, #0
 8004b3e:	d100      	bne.n	8004b42 <_printf_i+0x2a>
 8004b40:	e08c      	b.n	8004c5c <_printf_i+0x144>
 8004b42:	2a58      	cmp	r2, #88	; 0x58
 8004b44:	d04d      	beq.n	8004be2 <_printf_i+0xca>
 8004b46:	0025      	movs	r5, r4
 8004b48:	3542      	adds	r5, #66	; 0x42
 8004b4a:	702a      	strb	r2, [r5, #0]
 8004b4c:	e030      	b.n	8004bb0 <_printf_i+0x98>
 8004b4e:	2a64      	cmp	r2, #100	; 0x64
 8004b50:	d001      	beq.n	8004b56 <_printf_i+0x3e>
 8004b52:	2a69      	cmp	r2, #105	; 0x69
 8004b54:	d1f7      	bne.n	8004b46 <_printf_i+0x2e>
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	1d0a      	adds	r2, r1, #4
 8004b5c:	0628      	lsls	r0, r5, #24
 8004b5e:	d529      	bpl.n	8004bb4 <_printf_i+0x9c>
 8004b60:	6808      	ldr	r0, [r1, #0]
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	2800      	cmp	r0, #0
 8004b66:	da03      	bge.n	8004b70 <_printf_i+0x58>
 8004b68:	232d      	movs	r3, #45	; 0x2d
 8004b6a:	9a02      	ldr	r2, [sp, #8]
 8004b6c:	4240      	negs	r0, r0
 8004b6e:	7013      	strb	r3, [r2, #0]
 8004b70:	4e6b      	ldr	r6, [pc, #428]	; (8004d20 <_printf_i+0x208>)
 8004b72:	270a      	movs	r7, #10
 8004b74:	e04f      	b.n	8004c16 <_printf_i+0xfe>
 8004b76:	2a73      	cmp	r2, #115	; 0x73
 8004b78:	d074      	beq.n	8004c64 <_printf_i+0x14c>
 8004b7a:	d808      	bhi.n	8004b8e <_printf_i+0x76>
 8004b7c:	2a6f      	cmp	r2, #111	; 0x6f
 8004b7e:	d01f      	beq.n	8004bc0 <_printf_i+0xa8>
 8004b80:	2a70      	cmp	r2, #112	; 0x70
 8004b82:	d1e0      	bne.n	8004b46 <_printf_i+0x2e>
 8004b84:	2220      	movs	r2, #32
 8004b86:	6809      	ldr	r1, [r1, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	6022      	str	r2, [r4, #0]
 8004b8c:	e003      	b.n	8004b96 <_printf_i+0x7e>
 8004b8e:	2a75      	cmp	r2, #117	; 0x75
 8004b90:	d016      	beq.n	8004bc0 <_printf_i+0xa8>
 8004b92:	2a78      	cmp	r2, #120	; 0x78
 8004b94:	d1d7      	bne.n	8004b46 <_printf_i+0x2e>
 8004b96:	0022      	movs	r2, r4
 8004b98:	2178      	movs	r1, #120	; 0x78
 8004b9a:	3245      	adds	r2, #69	; 0x45
 8004b9c:	7011      	strb	r1, [r2, #0]
 8004b9e:	4e61      	ldr	r6, [pc, #388]	; (8004d24 <_printf_i+0x20c>)
 8004ba0:	e022      	b.n	8004be8 <_printf_i+0xd0>
 8004ba2:	0025      	movs	r5, r4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	3542      	adds	r5, #66	; 0x42
 8004ba8:	1d11      	adds	r1, r2, #4
 8004baa:	6019      	str	r1, [r3, #0]
 8004bac:	6813      	ldr	r3, [r2, #0]
 8004bae:	702b      	strb	r3, [r5, #0]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e065      	b.n	8004c80 <_printf_i+0x168>
 8004bb4:	6808      	ldr	r0, [r1, #0]
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	0669      	lsls	r1, r5, #25
 8004bba:	d5d3      	bpl.n	8004b64 <_printf_i+0x4c>
 8004bbc:	b200      	sxth	r0, r0
 8004bbe:	e7d1      	b.n	8004b64 <_printf_i+0x4c>
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	1d08      	adds	r0, r1, #4
 8004bc6:	6018      	str	r0, [r3, #0]
 8004bc8:	6808      	ldr	r0, [r1, #0]
 8004bca:	062e      	lsls	r6, r5, #24
 8004bcc:	d505      	bpl.n	8004bda <_printf_i+0xc2>
 8004bce:	4e54      	ldr	r6, [pc, #336]	; (8004d20 <_printf_i+0x208>)
 8004bd0:	2708      	movs	r7, #8
 8004bd2:	2a6f      	cmp	r2, #111	; 0x6f
 8004bd4:	d01b      	beq.n	8004c0e <_printf_i+0xf6>
 8004bd6:	270a      	movs	r7, #10
 8004bd8:	e019      	b.n	8004c0e <_printf_i+0xf6>
 8004bda:	066d      	lsls	r5, r5, #25
 8004bdc:	d5f7      	bpl.n	8004bce <_printf_i+0xb6>
 8004bde:	b280      	uxth	r0, r0
 8004be0:	e7f5      	b.n	8004bce <_printf_i+0xb6>
 8004be2:	3145      	adds	r1, #69	; 0x45
 8004be4:	4e4e      	ldr	r6, [pc, #312]	; (8004d20 <_printf_i+0x208>)
 8004be6:	700a      	strb	r2, [r1, #0]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	1d01      	adds	r1, r0, #4
 8004bee:	6800      	ldr	r0, [r0, #0]
 8004bf0:	6019      	str	r1, [r3, #0]
 8004bf2:	0615      	lsls	r5, r2, #24
 8004bf4:	d521      	bpl.n	8004c3a <_printf_i+0x122>
 8004bf6:	07d3      	lsls	r3, r2, #31
 8004bf8:	d502      	bpl.n	8004c00 <_printf_i+0xe8>
 8004bfa:	2320      	movs	r3, #32
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	2710      	movs	r7, #16
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d103      	bne.n	8004c0e <_printf_i+0xf6>
 8004c06:	2320      	movs	r3, #32
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	439a      	bics	r2, r3
 8004c0c:	6022      	str	r2, [r4, #0]
 8004c0e:	0023      	movs	r3, r4
 8004c10:	2200      	movs	r2, #0
 8004c12:	3343      	adds	r3, #67	; 0x43
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	60a3      	str	r3, [r4, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	db58      	blt.n	8004cd0 <_printf_i+0x1b8>
 8004c1e:	2204      	movs	r2, #4
 8004c20:	6821      	ldr	r1, [r4, #0]
 8004c22:	4391      	bics	r1, r2
 8004c24:	6021      	str	r1, [r4, #0]
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d154      	bne.n	8004cd4 <_printf_i+0x1bc>
 8004c2a:	9d02      	ldr	r5, [sp, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05a      	beq.n	8004ce6 <_printf_i+0x1ce>
 8004c30:	0025      	movs	r5, r4
 8004c32:	7833      	ldrb	r3, [r6, #0]
 8004c34:	3542      	adds	r5, #66	; 0x42
 8004c36:	702b      	strb	r3, [r5, #0]
 8004c38:	e055      	b.n	8004ce6 <_printf_i+0x1ce>
 8004c3a:	0655      	lsls	r5, r2, #25
 8004c3c:	d5db      	bpl.n	8004bf6 <_printf_i+0xde>
 8004c3e:	b280      	uxth	r0, r0
 8004c40:	e7d9      	b.n	8004bf6 <_printf_i+0xde>
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	680d      	ldr	r5, [r1, #0]
 8004c46:	1d10      	adds	r0, r2, #4
 8004c48:	6949      	ldr	r1, [r1, #20]
 8004c4a:	6018      	str	r0, [r3, #0]
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	062e      	lsls	r6, r5, #24
 8004c50:	d501      	bpl.n	8004c56 <_printf_i+0x13e>
 8004c52:	6019      	str	r1, [r3, #0]
 8004c54:	e002      	b.n	8004c5c <_printf_i+0x144>
 8004c56:	066d      	lsls	r5, r5, #25
 8004c58:	d5fb      	bpl.n	8004c52 <_printf_i+0x13a>
 8004c5a:	8019      	strh	r1, [r3, #0]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9d02      	ldr	r5, [sp, #8]
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	e04f      	b.n	8004d04 <_printf_i+0x1ec>
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	1d11      	adds	r1, r2, #4
 8004c68:	6019      	str	r1, [r3, #0]
 8004c6a:	6815      	ldr	r5, [r2, #0]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	6862      	ldr	r2, [r4, #4]
 8004c70:	0028      	movs	r0, r5
 8004c72:	f000 f859 	bl	8004d28 <memchr>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d001      	beq.n	8004c7e <_printf_i+0x166>
 8004c7a:	1b40      	subs	r0, r0, r5
 8004c7c:	6060      	str	r0, [r4, #4]
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	6123      	str	r3, [r4, #16]
 8004c82:	2300      	movs	r3, #0
 8004c84:	9a02      	ldr	r2, [sp, #8]
 8004c86:	7013      	strb	r3, [r2, #0]
 8004c88:	e03c      	b.n	8004d04 <_printf_i+0x1ec>
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	002a      	movs	r2, r5
 8004c8e:	9904      	ldr	r1, [sp, #16]
 8004c90:	9803      	ldr	r0, [sp, #12]
 8004c92:	9d05      	ldr	r5, [sp, #20]
 8004c94:	47a8      	blx	r5
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d03e      	beq.n	8004d18 <_printf_i+0x200>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	079b      	lsls	r3, r3, #30
 8004c9e:	d415      	bmi.n	8004ccc <_printf_i+0x1b4>
 8004ca0:	9b07      	ldr	r3, [sp, #28]
 8004ca2:	68e0      	ldr	r0, [r4, #12]
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	da39      	bge.n	8004d1c <_printf_i+0x204>
 8004ca8:	0018      	movs	r0, r3
 8004caa:	e037      	b.n	8004d1c <_printf_i+0x204>
 8004cac:	0022      	movs	r2, r4
 8004cae:	2301      	movs	r3, #1
 8004cb0:	3219      	adds	r2, #25
 8004cb2:	9904      	ldr	r1, [sp, #16]
 8004cb4:	9803      	ldr	r0, [sp, #12]
 8004cb6:	9e05      	ldr	r6, [sp, #20]
 8004cb8:	47b0      	blx	r6
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	d02c      	beq.n	8004d18 <_printf_i+0x200>
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	68e3      	ldr	r3, [r4, #12]
 8004cc2:	9a07      	ldr	r2, [sp, #28]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	42ab      	cmp	r3, r5
 8004cc8:	dcf0      	bgt.n	8004cac <_printf_i+0x194>
 8004cca:	e7e9      	b.n	8004ca0 <_printf_i+0x188>
 8004ccc:	2500      	movs	r5, #0
 8004cce:	e7f7      	b.n	8004cc0 <_printf_i+0x1a8>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d0ad      	beq.n	8004c30 <_printf_i+0x118>
 8004cd4:	9d02      	ldr	r5, [sp, #8]
 8004cd6:	0039      	movs	r1, r7
 8004cd8:	f7fb fa9c 	bl	8000214 <__aeabi_uidivmod>
 8004cdc:	5c73      	ldrb	r3, [r6, r1]
 8004cde:	3d01      	subs	r5, #1
 8004ce0:	702b      	strb	r3, [r5, #0]
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d1f7      	bne.n	8004cd6 <_printf_i+0x1be>
 8004ce6:	2f08      	cmp	r7, #8
 8004ce8:	d109      	bne.n	8004cfe <_printf_i+0x1e6>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	07db      	lsls	r3, r3, #31
 8004cee:	d506      	bpl.n	8004cfe <_printf_i+0x1e6>
 8004cf0:	6863      	ldr	r3, [r4, #4]
 8004cf2:	6922      	ldr	r2, [r4, #16]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	dc02      	bgt.n	8004cfe <_printf_i+0x1e6>
 8004cf8:	2330      	movs	r3, #48	; 0x30
 8004cfa:	3d01      	subs	r5, #1
 8004cfc:	702b      	strb	r3, [r5, #0]
 8004cfe:	9b02      	ldr	r3, [sp, #8]
 8004d00:	1b5b      	subs	r3, r3, r5
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	9b05      	ldr	r3, [sp, #20]
 8004d06:	aa07      	add	r2, sp, #28
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	0021      	movs	r1, r4
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	9803      	ldr	r0, [sp, #12]
 8004d10:	f7ff fe94 	bl	8004a3c <_printf_common>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d1b8      	bne.n	8004c8a <_printf_i+0x172>
 8004d18:	2001      	movs	r0, #1
 8004d1a:	4240      	negs	r0, r0
 8004d1c:	b009      	add	sp, #36	; 0x24
 8004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d20:	080064c1 	.word	0x080064c1
 8004d24:	080064d2 	.word	0x080064d2

08004d28 <memchr>:
 8004d28:	b2c9      	uxtb	r1, r1
 8004d2a:	1882      	adds	r2, r0, r2
 8004d2c:	4290      	cmp	r0, r2
 8004d2e:	d101      	bne.n	8004d34 <memchr+0xc>
 8004d30:	2000      	movs	r0, #0
 8004d32:	4770      	bx	lr
 8004d34:	7803      	ldrb	r3, [r0, #0]
 8004d36:	428b      	cmp	r3, r1
 8004d38:	d0fb      	beq.n	8004d32 <memchr+0xa>
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	e7f6      	b.n	8004d2c <memchr+0x4>

08004d3e <memmove>:
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	4288      	cmp	r0, r1
 8004d42:	d902      	bls.n	8004d4a <memmove+0xc>
 8004d44:	188b      	adds	r3, r1, r2
 8004d46:	4298      	cmp	r0, r3
 8004d48:	d303      	bcc.n	8004d52 <memmove+0x14>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e007      	b.n	8004d5e <memmove+0x20>
 8004d4e:	5c8b      	ldrb	r3, [r1, r2]
 8004d50:	5483      	strb	r3, [r0, r2]
 8004d52:	3a01      	subs	r2, #1
 8004d54:	d2fb      	bcs.n	8004d4e <memmove+0x10>
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	5ccc      	ldrb	r4, [r1, r3]
 8004d5a:	54c4      	strb	r4, [r0, r3]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d1fa      	bne.n	8004d58 <memmove+0x1a>
 8004d62:	e7f8      	b.n	8004d56 <memmove+0x18>

08004d64 <_free_r>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	0005      	movs	r5, r0
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	d010      	beq.n	8004d8e <_free_r+0x2a>
 8004d6c:	1f0c      	subs	r4, r1, #4
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	da00      	bge.n	8004d76 <_free_r+0x12>
 8004d74:	18e4      	adds	r4, r4, r3
 8004d76:	0028      	movs	r0, r5
 8004d78:	f000 f8d4 	bl	8004f24 <__malloc_lock>
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <_free_r+0x90>)
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <_free_r+0x2c>
 8004d84:	6063      	str	r3, [r4, #4]
 8004d86:	6014      	str	r4, [r2, #0]
 8004d88:	0028      	movs	r0, r5
 8004d8a:	f000 f8cc 	bl	8004f26 <__malloc_unlock>
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d909      	bls.n	8004da8 <_free_r+0x44>
 8004d94:	6821      	ldr	r1, [r4, #0]
 8004d96:	1860      	adds	r0, r4, r1
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d1f3      	bne.n	8004d84 <_free_r+0x20>
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	1841      	adds	r1, r0, r1
 8004da2:	6021      	str	r1, [r4, #0]
 8004da4:	e7ee      	b.n	8004d84 <_free_r+0x20>
 8004da6:	0013      	movs	r3, r2
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	d001      	beq.n	8004db2 <_free_r+0x4e>
 8004dae:	42a2      	cmp	r2, r4
 8004db0:	d9f9      	bls.n	8004da6 <_free_r+0x42>
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	1858      	adds	r0, r3, r1
 8004db6:	42a0      	cmp	r0, r4
 8004db8:	d10b      	bne.n	8004dd2 <_free_r+0x6e>
 8004dba:	6820      	ldr	r0, [r4, #0]
 8004dbc:	1809      	adds	r1, r1, r0
 8004dbe:	1858      	adds	r0, r3, r1
 8004dc0:	6019      	str	r1, [r3, #0]
 8004dc2:	4282      	cmp	r2, r0
 8004dc4:	d1e0      	bne.n	8004d88 <_free_r+0x24>
 8004dc6:	6810      	ldr	r0, [r2, #0]
 8004dc8:	6852      	ldr	r2, [r2, #4]
 8004dca:	1841      	adds	r1, r0, r1
 8004dcc:	6019      	str	r1, [r3, #0]
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	e7da      	b.n	8004d88 <_free_r+0x24>
 8004dd2:	42a0      	cmp	r0, r4
 8004dd4:	d902      	bls.n	8004ddc <_free_r+0x78>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	e7d5      	b.n	8004d88 <_free_r+0x24>
 8004ddc:	6821      	ldr	r1, [r4, #0]
 8004dde:	1860      	adds	r0, r4, r1
 8004de0:	4282      	cmp	r2, r0
 8004de2:	d103      	bne.n	8004dec <_free_r+0x88>
 8004de4:	6810      	ldr	r0, [r2, #0]
 8004de6:	6852      	ldr	r2, [r2, #4]
 8004de8:	1841      	adds	r1, r0, r1
 8004dea:	6021      	str	r1, [r4, #0]
 8004dec:	6062      	str	r2, [r4, #4]
 8004dee:	605c      	str	r4, [r3, #4]
 8004df0:	e7ca      	b.n	8004d88 <_free_r+0x24>
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	20000534 	.word	0x20000534

08004df8 <_malloc_r>:
 8004df8:	2303      	movs	r3, #3
 8004dfa:	b570      	push	{r4, r5, r6, lr}
 8004dfc:	1ccd      	adds	r5, r1, #3
 8004dfe:	439d      	bics	r5, r3
 8004e00:	3508      	adds	r5, #8
 8004e02:	0006      	movs	r6, r0
 8004e04:	2d0c      	cmp	r5, #12
 8004e06:	d21e      	bcs.n	8004e46 <_malloc_r+0x4e>
 8004e08:	250c      	movs	r5, #12
 8004e0a:	42a9      	cmp	r1, r5
 8004e0c:	d81d      	bhi.n	8004e4a <_malloc_r+0x52>
 8004e0e:	0030      	movs	r0, r6
 8004e10:	f000 f888 	bl	8004f24 <__malloc_lock>
 8004e14:	4a25      	ldr	r2, [pc, #148]	; (8004eac <_malloc_r+0xb4>)
 8004e16:	6814      	ldr	r4, [r2, #0]
 8004e18:	0021      	movs	r1, r4
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	d119      	bne.n	8004e52 <_malloc_r+0x5a>
 8004e1e:	4c24      	ldr	r4, [pc, #144]	; (8004eb0 <_malloc_r+0xb8>)
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <_malloc_r+0x36>
 8004e26:	0030      	movs	r0, r6
 8004e28:	f000 f86a 	bl	8004f00 <_sbrk_r>
 8004e2c:	6020      	str	r0, [r4, #0]
 8004e2e:	0029      	movs	r1, r5
 8004e30:	0030      	movs	r0, r6
 8004e32:	f000 f865 	bl	8004f00 <_sbrk_r>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d12b      	bne.n	8004e92 <_malloc_r+0x9a>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	0030      	movs	r0, r6
 8004e3e:	6033      	str	r3, [r6, #0]
 8004e40:	f000 f871 	bl	8004f26 <__malloc_unlock>
 8004e44:	e003      	b.n	8004e4e <_malloc_r+0x56>
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	dadf      	bge.n	8004e0a <_malloc_r+0x12>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	6033      	str	r3, [r6, #0]
 8004e4e:	2000      	movs	r0, #0
 8004e50:	bd70      	pop	{r4, r5, r6, pc}
 8004e52:	680b      	ldr	r3, [r1, #0]
 8004e54:	1b5b      	subs	r3, r3, r5
 8004e56:	d419      	bmi.n	8004e8c <_malloc_r+0x94>
 8004e58:	2b0b      	cmp	r3, #11
 8004e5a:	d903      	bls.n	8004e64 <_malloc_r+0x6c>
 8004e5c:	600b      	str	r3, [r1, #0]
 8004e5e:	18cc      	adds	r4, r1, r3
 8004e60:	6025      	str	r5, [r4, #0]
 8004e62:	e003      	b.n	8004e6c <_malloc_r+0x74>
 8004e64:	684b      	ldr	r3, [r1, #4]
 8004e66:	428c      	cmp	r4, r1
 8004e68:	d10d      	bne.n	8004e86 <_malloc_r+0x8e>
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	0030      	movs	r0, r6
 8004e6e:	f000 f85a 	bl	8004f26 <__malloc_unlock>
 8004e72:	0020      	movs	r0, r4
 8004e74:	2207      	movs	r2, #7
 8004e76:	300b      	adds	r0, #11
 8004e78:	1d23      	adds	r3, r4, #4
 8004e7a:	4390      	bics	r0, r2
 8004e7c:	1ac3      	subs	r3, r0, r3
 8004e7e:	d0e7      	beq.n	8004e50 <_malloc_r+0x58>
 8004e80:	425a      	negs	r2, r3
 8004e82:	50e2      	str	r2, [r4, r3]
 8004e84:	e7e4      	b.n	8004e50 <_malloc_r+0x58>
 8004e86:	6063      	str	r3, [r4, #4]
 8004e88:	000c      	movs	r4, r1
 8004e8a:	e7ef      	b.n	8004e6c <_malloc_r+0x74>
 8004e8c:	000c      	movs	r4, r1
 8004e8e:	6849      	ldr	r1, [r1, #4]
 8004e90:	e7c3      	b.n	8004e1a <_malloc_r+0x22>
 8004e92:	2303      	movs	r3, #3
 8004e94:	1cc4      	adds	r4, r0, #3
 8004e96:	439c      	bics	r4, r3
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d0e1      	beq.n	8004e60 <_malloc_r+0x68>
 8004e9c:	1a21      	subs	r1, r4, r0
 8004e9e:	0030      	movs	r0, r6
 8004ea0:	f000 f82e 	bl	8004f00 <_sbrk_r>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d1db      	bne.n	8004e60 <_malloc_r+0x68>
 8004ea8:	e7c7      	b.n	8004e3a <_malloc_r+0x42>
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	20000534 	.word	0x20000534
 8004eb0:	20000538 	.word	0x20000538

08004eb4 <_realloc_r>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	0007      	movs	r7, r0
 8004eb8:	000d      	movs	r5, r1
 8004eba:	0016      	movs	r6, r2
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d105      	bne.n	8004ecc <_realloc_r+0x18>
 8004ec0:	0011      	movs	r1, r2
 8004ec2:	f7ff ff99 	bl	8004df8 <_malloc_r>
 8004ec6:	0004      	movs	r4, r0
 8004ec8:	0020      	movs	r0, r4
 8004eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d103      	bne.n	8004ed8 <_realloc_r+0x24>
 8004ed0:	f7ff ff48 	bl	8004d64 <_free_r>
 8004ed4:	0034      	movs	r4, r6
 8004ed6:	e7f7      	b.n	8004ec8 <_realloc_r+0x14>
 8004ed8:	f000 f826 	bl	8004f28 <_malloc_usable_size_r>
 8004edc:	002c      	movs	r4, r5
 8004ede:	42b0      	cmp	r0, r6
 8004ee0:	d2f2      	bcs.n	8004ec8 <_realloc_r+0x14>
 8004ee2:	0031      	movs	r1, r6
 8004ee4:	0038      	movs	r0, r7
 8004ee6:	f7ff ff87 	bl	8004df8 <_malloc_r>
 8004eea:	1e04      	subs	r4, r0, #0
 8004eec:	d0ec      	beq.n	8004ec8 <_realloc_r+0x14>
 8004eee:	0029      	movs	r1, r5
 8004ef0:	0032      	movs	r2, r6
 8004ef2:	f7ff fc11 	bl	8004718 <memcpy>
 8004ef6:	0029      	movs	r1, r5
 8004ef8:	0038      	movs	r0, r7
 8004efa:	f7ff ff33 	bl	8004d64 <_free_r>
 8004efe:	e7e3      	b.n	8004ec8 <_realloc_r+0x14>

08004f00 <_sbrk_r>:
 8004f00:	2300      	movs	r3, #0
 8004f02:	b570      	push	{r4, r5, r6, lr}
 8004f04:	4c06      	ldr	r4, [pc, #24]	; (8004f20 <_sbrk_r+0x20>)
 8004f06:	0005      	movs	r5, r0
 8004f08:	0008      	movs	r0, r1
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	f7fc fca4 	bl	8001858 <_sbrk>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d103      	bne.n	8004f1c <_sbrk_r+0x1c>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d000      	beq.n	8004f1c <_sbrk_r+0x1c>
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	20000624 	.word	0x20000624

08004f24 <__malloc_lock>:
 8004f24:	4770      	bx	lr

08004f26 <__malloc_unlock>:
 8004f26:	4770      	bx	lr

08004f28 <_malloc_usable_size_r>:
 8004f28:	1f0b      	subs	r3, r1, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	1f18      	subs	r0, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da01      	bge.n	8004f36 <_malloc_usable_size_r+0xe>
 8004f32:	580b      	ldr	r3, [r1, r0]
 8004f34:	18c0      	adds	r0, r0, r3
 8004f36:	4770      	bx	lr

08004f38 <_init>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3e:	bc08      	pop	{r3}
 8004f40:	469e      	mov	lr, r3
 8004f42:	4770      	bx	lr

08004f44 <_fini>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4a:	bc08      	pop	{r3}
 8004f4c:	469e      	mov	lr, r3
 8004f4e:	4770      	bx	lr
