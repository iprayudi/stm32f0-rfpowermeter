
stm32f042-rfpowermeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e0  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca4  08006ca4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006ca4  08006ca4  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ca4  08006ca4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc4  200001f0  08006e9c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  200011b4  08006e9c  000211b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adc4  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004414  00000000  00000000  0003afdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a4d7  00000000  00000000  0003f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000da8  00000000  00000000  000498c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012f0  00000000  00000000  0004a670  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001859d  00000000  00000000  0004b960  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001163a  00000000  00000000  00063efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00076337  00000000  00000000  00075537  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000eb86e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a4c  00000000  00000000  000eb8ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080056ac 	.word	0x080056ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	080056ac 	.word	0x080056ac

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cfrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	1c08      	adds	r0, r1, #0
 8000420:	4661      	mov	r1, ip
 8000422:	e7ff      	b.n	8000424 <__aeabi_cfcmpeq>

08000424 <__aeabi_cfcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f000 fa5b 	bl	80008e0 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cfcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_fcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 f9dd 	bl	80007f4 <__eqsf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_fcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fa4d 	bl	80008e0 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_fcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fa43 	bl	80008e0 <__lesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_fcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 f9eb 	bl	8000844 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_fcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_fcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 f9e1 	bl	8000844 <__gesf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_fcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_f2uiz>:
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	b510      	push	{r4, lr}
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	1c04      	adds	r4, r0, #0
 8000498:	f7ff fff0 	bl	800047c <__aeabi_fcmpge>
 800049c:	2800      	cmp	r0, #0
 800049e:	d103      	bne.n	80004a8 <__aeabi_f2uiz+0x18>
 80004a0:	1c20      	adds	r0, r4, #0
 80004a2:	f000 fd63 	bl	8000f6c <__aeabi_f2iz>
 80004a6:	bd10      	pop	{r4, pc}
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	1c20      	adds	r0, r4, #0
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	f000 fb99 	bl	8000be4 <__aeabi_fsub>
 80004b2:	f000 fd5b 	bl	8000f6c <__aeabi_f2iz>
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	061b      	lsls	r3, r3, #24
 80004ba:	469c      	mov	ip, r3
 80004bc:	4460      	add	r0, ip
 80004be:	e7f2      	b.n	80004a6 <__aeabi_f2uiz+0x16>

080004c0 <__aeabi_fadd>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	4647      	mov	r7, r8
 80004c4:	46ce      	mov	lr, r9
 80004c6:	0243      	lsls	r3, r0, #9
 80004c8:	0a5b      	lsrs	r3, r3, #9
 80004ca:	0044      	lsls	r4, r0, #1
 80004cc:	0fc2      	lsrs	r2, r0, #31
 80004ce:	469c      	mov	ip, r3
 80004d0:	0048      	lsls	r0, r1, #1
 80004d2:	00dd      	lsls	r5, r3, #3
 80004d4:	024b      	lsls	r3, r1, #9
 80004d6:	0e24      	lsrs	r4, r4, #24
 80004d8:	0a5b      	lsrs	r3, r3, #9
 80004da:	0e00      	lsrs	r0, r0, #24
 80004dc:	b580      	push	{r7, lr}
 80004de:	4698      	mov	r8, r3
 80004e0:	0026      	movs	r6, r4
 80004e2:	4691      	mov	r9, r2
 80004e4:	0fc9      	lsrs	r1, r1, #31
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	1a27      	subs	r7, r4, r0
 80004ea:	428a      	cmp	r2, r1
 80004ec:	d029      	beq.n	8000542 <__aeabi_fadd+0x82>
 80004ee:	2f00      	cmp	r7, #0
 80004f0:	dd15      	ble.n	800051e <__aeabi_fadd+0x5e>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d14a      	bne.n	800058c <__aeabi_fadd+0xcc>
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x3c>
 80004fa:	e095      	b.n	8000628 <__aeabi_fadd+0x168>
 80004fc:	08ed      	lsrs	r5, r5, #3
 80004fe:	2cff      	cmp	r4, #255	; 0xff
 8000500:	d100      	bne.n	8000504 <__aeabi_fadd+0x44>
 8000502:	e088      	b.n	8000616 <__aeabi_fadd+0x156>
 8000504:	026b      	lsls	r3, r5, #9
 8000506:	0a5b      	lsrs	r3, r3, #9
 8000508:	b2e6      	uxtb	r6, r4
 800050a:	025b      	lsls	r3, r3, #9
 800050c:	05f6      	lsls	r6, r6, #23
 800050e:	0a58      	lsrs	r0, r3, #9
 8000510:	4330      	orrs	r0, r6
 8000512:	07d2      	lsls	r2, r2, #31
 8000514:	4310      	orrs	r0, r2
 8000516:	bc0c      	pop	{r2, r3}
 8000518:	4690      	mov	r8, r2
 800051a:	4699      	mov	r9, r3
 800051c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800051e:	2f00      	cmp	r7, #0
 8000520:	d000      	beq.n	8000524 <__aeabi_fadd+0x64>
 8000522:	e087      	b.n	8000634 <__aeabi_fadd+0x174>
 8000524:	1c60      	adds	r0, r4, #1
 8000526:	b2c0      	uxtb	r0, r0
 8000528:	2801      	cmp	r0, #1
 800052a:	dc00      	bgt.n	800052e <__aeabi_fadd+0x6e>
 800052c:	e0b6      	b.n	800069c <__aeabi_fadd+0x1dc>
 800052e:	1aee      	subs	r6, r5, r3
 8000530:	0172      	lsls	r2, r6, #5
 8000532:	d500      	bpl.n	8000536 <__aeabi_fadd+0x76>
 8000534:	e0c5      	b.n	80006c2 <__aeabi_fadd+0x202>
 8000536:	2e00      	cmp	r6, #0
 8000538:	d13d      	bne.n	80005b6 <__aeabi_fadd+0xf6>
 800053a:	2200      	movs	r2, #0
 800053c:	2600      	movs	r6, #0
 800053e:	2300      	movs	r3, #0
 8000540:	e7e3      	b.n	800050a <__aeabi_fadd+0x4a>
 8000542:	2f00      	cmp	r7, #0
 8000544:	dc00      	bgt.n	8000548 <__aeabi_fadd+0x88>
 8000546:	e096      	b.n	8000676 <__aeabi_fadd+0x1b6>
 8000548:	2800      	cmp	r0, #0
 800054a:	d05d      	beq.n	8000608 <__aeabi_fadd+0x148>
 800054c:	2cff      	cmp	r4, #255	; 0xff
 800054e:	d060      	beq.n	8000612 <__aeabi_fadd+0x152>
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	04d2      	lsls	r2, r2, #19
 8000554:	4313      	orrs	r3, r2
 8000556:	2f1b      	cmp	r7, #27
 8000558:	dd00      	ble.n	800055c <__aeabi_fadd+0x9c>
 800055a:	e0ec      	b.n	8000736 <__aeabi_fadd+0x276>
 800055c:	2220      	movs	r2, #32
 800055e:	1bd2      	subs	r2, r2, r7
 8000560:	0018      	movs	r0, r3
 8000562:	4093      	lsls	r3, r2
 8000564:	40f8      	lsrs	r0, r7
 8000566:	1e5a      	subs	r2, r3, #1
 8000568:	4193      	sbcs	r3, r2
 800056a:	4303      	orrs	r3, r0
 800056c:	18ed      	adds	r5, r5, r3
 800056e:	016b      	lsls	r3, r5, #5
 8000570:	d57b      	bpl.n	800066a <__aeabi_fadd+0x1aa>
 8000572:	3401      	adds	r4, #1
 8000574:	2cff      	cmp	r4, #255	; 0xff
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0xba>
 8000578:	e0b7      	b.n	80006ea <__aeabi_fadd+0x22a>
 800057a:	2201      	movs	r2, #1
 800057c:	2607      	movs	r6, #7
 800057e:	402a      	ands	r2, r5
 8000580:	086b      	lsrs	r3, r5, #1
 8000582:	4d9a      	ldr	r5, [pc, #616]	; (80007ec <__aeabi_fadd+0x32c>)
 8000584:	401d      	ands	r5, r3
 8000586:	4315      	orrs	r5, r2
 8000588:	402e      	ands	r6, r5
 800058a:	e029      	b.n	80005e0 <__aeabi_fadd+0x120>
 800058c:	2cff      	cmp	r4, #255	; 0xff
 800058e:	d0b5      	beq.n	80004fc <__aeabi_fadd+0x3c>
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	4313      	orrs	r3, r2
 8000596:	2f1b      	cmp	r7, #27
 8000598:	dd00      	ble.n	800059c <__aeabi_fadd+0xdc>
 800059a:	e0b2      	b.n	8000702 <__aeabi_fadd+0x242>
 800059c:	2220      	movs	r2, #32
 800059e:	1bd2      	subs	r2, r2, r7
 80005a0:	0019      	movs	r1, r3
 80005a2:	4093      	lsls	r3, r2
 80005a4:	40f9      	lsrs	r1, r7
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	4193      	sbcs	r3, r2
 80005aa:	430b      	orrs	r3, r1
 80005ac:	1aed      	subs	r5, r5, r3
 80005ae:	016b      	lsls	r3, r5, #5
 80005b0:	d55b      	bpl.n	800066a <__aeabi_fadd+0x1aa>
 80005b2:	01ad      	lsls	r5, r5, #6
 80005b4:	09ae      	lsrs	r6, r5, #6
 80005b6:	0030      	movs	r0, r6
 80005b8:	f000 fd82 	bl	80010c0 <__clzsi2>
 80005bc:	3805      	subs	r0, #5
 80005be:	4086      	lsls	r6, r0
 80005c0:	4284      	cmp	r4, r0
 80005c2:	dc65      	bgt.n	8000690 <__aeabi_fadd+0x1d0>
 80005c4:	1b04      	subs	r4, r0, r4
 80005c6:	0033      	movs	r3, r6
 80005c8:	2020      	movs	r0, #32
 80005ca:	3401      	adds	r4, #1
 80005cc:	40e3      	lsrs	r3, r4
 80005ce:	1b04      	subs	r4, r0, r4
 80005d0:	40a6      	lsls	r6, r4
 80005d2:	1e75      	subs	r5, r6, #1
 80005d4:	41ae      	sbcs	r6, r5
 80005d6:	4333      	orrs	r3, r6
 80005d8:	2607      	movs	r6, #7
 80005da:	001d      	movs	r5, r3
 80005dc:	2400      	movs	r4, #0
 80005de:	401e      	ands	r6, r3
 80005e0:	2201      	movs	r2, #1
 80005e2:	464b      	mov	r3, r9
 80005e4:	401a      	ands	r2, r3
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d004      	beq.n	80005f4 <__aeabi_fadd+0x134>
 80005ea:	230f      	movs	r3, #15
 80005ec:	402b      	ands	r3, r5
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d000      	beq.n	80005f4 <__aeabi_fadd+0x134>
 80005f2:	3504      	adds	r5, #4
 80005f4:	016b      	lsls	r3, r5, #5
 80005f6:	d400      	bmi.n	80005fa <__aeabi_fadd+0x13a>
 80005f8:	e780      	b.n	80004fc <__aeabi_fadd+0x3c>
 80005fa:	3401      	adds	r4, #1
 80005fc:	b2e6      	uxtb	r6, r4
 80005fe:	2cff      	cmp	r4, #255	; 0xff
 8000600:	d12f      	bne.n	8000662 <__aeabi_fadd+0x1a2>
 8000602:	26ff      	movs	r6, #255	; 0xff
 8000604:	2300      	movs	r3, #0
 8000606:	e780      	b.n	800050a <__aeabi_fadd+0x4a>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d152      	bne.n	80006b2 <__aeabi_fadd+0x1f2>
 800060c:	2cff      	cmp	r4, #255	; 0xff
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0x152>
 8000610:	e774      	b.n	80004fc <__aeabi_fadd+0x3c>
 8000612:	000a      	movs	r2, r1
 8000614:	08ed      	lsrs	r5, r5, #3
 8000616:	2d00      	cmp	r5, #0
 8000618:	d0f3      	beq.n	8000602 <__aeabi_fadd+0x142>
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	03db      	lsls	r3, r3, #15
 800061e:	432b      	orrs	r3, r5
 8000620:	025b      	lsls	r3, r3, #9
 8000622:	0a5b      	lsrs	r3, r3, #9
 8000624:	26ff      	movs	r6, #255	; 0xff
 8000626:	e770      	b.n	800050a <__aeabi_fadd+0x4a>
 8000628:	3f01      	subs	r7, #1
 800062a:	2f00      	cmp	r7, #0
 800062c:	d0be      	beq.n	80005ac <__aeabi_fadd+0xec>
 800062e:	2cff      	cmp	r4, #255	; 0xff
 8000630:	d1b1      	bne.n	8000596 <__aeabi_fadd+0xd6>
 8000632:	e763      	b.n	80004fc <__aeabi_fadd+0x3c>
 8000634:	2c00      	cmp	r4, #0
 8000636:	d047      	beq.n	80006c8 <__aeabi_fadd+0x208>
 8000638:	28ff      	cmp	r0, #255	; 0xff
 800063a:	d069      	beq.n	8000710 <__aeabi_fadd+0x250>
 800063c:	2480      	movs	r4, #128	; 0x80
 800063e:	04e4      	lsls	r4, r4, #19
 8000640:	427a      	negs	r2, r7
 8000642:	4325      	orrs	r5, r4
 8000644:	2a1b      	cmp	r2, #27
 8000646:	dd00      	ble.n	800064a <__aeabi_fadd+0x18a>
 8000648:	e0c5      	b.n	80007d6 <__aeabi_fadd+0x316>
 800064a:	002c      	movs	r4, r5
 800064c:	2620      	movs	r6, #32
 800064e:	40d4      	lsrs	r4, r2
 8000650:	1ab2      	subs	r2, r6, r2
 8000652:	4095      	lsls	r5, r2
 8000654:	1e6a      	subs	r2, r5, #1
 8000656:	4195      	sbcs	r5, r2
 8000658:	4325      	orrs	r5, r4
 800065a:	1b5d      	subs	r5, r3, r5
 800065c:	0004      	movs	r4, r0
 800065e:	4689      	mov	r9, r1
 8000660:	e7a5      	b.n	80005ae <__aeabi_fadd+0xee>
 8000662:	01ab      	lsls	r3, r5, #6
 8000664:	0a5b      	lsrs	r3, r3, #9
 8000666:	e750      	b.n	800050a <__aeabi_fadd+0x4a>
 8000668:	2400      	movs	r4, #0
 800066a:	2201      	movs	r2, #1
 800066c:	464b      	mov	r3, r9
 800066e:	401a      	ands	r2, r3
 8000670:	076b      	lsls	r3, r5, #29
 8000672:	d1ba      	bne.n	80005ea <__aeabi_fadd+0x12a>
 8000674:	e742      	b.n	80004fc <__aeabi_fadd+0x3c>
 8000676:	2f00      	cmp	r7, #0
 8000678:	d13b      	bne.n	80006f2 <__aeabi_fadd+0x232>
 800067a:	3401      	adds	r4, #1
 800067c:	b2e0      	uxtb	r0, r4
 800067e:	2801      	cmp	r0, #1
 8000680:	dd4a      	ble.n	8000718 <__aeabi_fadd+0x258>
 8000682:	2cff      	cmp	r4, #255	; 0xff
 8000684:	d0bd      	beq.n	8000602 <__aeabi_fadd+0x142>
 8000686:	2607      	movs	r6, #7
 8000688:	18ed      	adds	r5, r5, r3
 800068a:	086d      	lsrs	r5, r5, #1
 800068c:	402e      	ands	r6, r5
 800068e:	e7a7      	b.n	80005e0 <__aeabi_fadd+0x120>
 8000690:	2307      	movs	r3, #7
 8000692:	4d57      	ldr	r5, [pc, #348]	; (80007f0 <__aeabi_fadd+0x330>)
 8000694:	1a24      	subs	r4, r4, r0
 8000696:	4035      	ands	r5, r6
 8000698:	401e      	ands	r6, r3
 800069a:	e7a1      	b.n	80005e0 <__aeabi_fadd+0x120>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d11b      	bne.n	80006d8 <__aeabi_fadd+0x218>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d16e      	bne.n	8000782 <__aeabi_fadd+0x2c2>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x1ea>
 80006a8:	e09a      	b.n	80007e0 <__aeabi_fadd+0x320>
 80006aa:	000a      	movs	r2, r1
 80006ac:	001d      	movs	r5, r3
 80006ae:	003c      	movs	r4, r7
 80006b0:	e724      	b.n	80004fc <__aeabi_fadd+0x3c>
 80006b2:	3f01      	subs	r7, #1
 80006b4:	2f00      	cmp	r7, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x1fa>
 80006b8:	e758      	b.n	800056c <__aeabi_fadd+0xac>
 80006ba:	2cff      	cmp	r4, #255	; 0xff
 80006bc:	d000      	beq.n	80006c0 <__aeabi_fadd+0x200>
 80006be:	e74a      	b.n	8000556 <__aeabi_fadd+0x96>
 80006c0:	e7a7      	b.n	8000612 <__aeabi_fadd+0x152>
 80006c2:	1b5e      	subs	r6, r3, r5
 80006c4:	4689      	mov	r9, r1
 80006c6:	e776      	b.n	80005b6 <__aeabi_fadd+0xf6>
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d11c      	bne.n	8000706 <__aeabi_fadd+0x246>
 80006cc:	000a      	movs	r2, r1
 80006ce:	28ff      	cmp	r0, #255	; 0xff
 80006d0:	d01f      	beq.n	8000712 <__aeabi_fadd+0x252>
 80006d2:	0004      	movs	r4, r0
 80006d4:	001d      	movs	r5, r3
 80006d6:	e711      	b.n	80004fc <__aeabi_fadd+0x3c>
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d15d      	bne.n	8000798 <__aeabi_fadd+0x2d8>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d117      	bne.n	8000710 <__aeabi_fadd+0x250>
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	2200      	movs	r2, #0
 80006e4:	03db      	lsls	r3, r3, #15
 80006e6:	26ff      	movs	r6, #255	; 0xff
 80006e8:	e70f      	b.n	800050a <__aeabi_fadd+0x4a>
 80006ea:	000a      	movs	r2, r1
 80006ec:	26ff      	movs	r6, #255	; 0xff
 80006ee:	2300      	movs	r3, #0
 80006f0:	e70b      	b.n	800050a <__aeabi_fadd+0x4a>
 80006f2:	2c00      	cmp	r4, #0
 80006f4:	d121      	bne.n	800073a <__aeabi_fadd+0x27a>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d166      	bne.n	80007c8 <__aeabi_fadd+0x308>
 80006fa:	28ff      	cmp	r0, #255	; 0xff
 80006fc:	d1e9      	bne.n	80006d2 <__aeabi_fadd+0x212>
 80006fe:	001d      	movs	r5, r3
 8000700:	e787      	b.n	8000612 <__aeabi_fadd+0x152>
 8000702:	2301      	movs	r3, #1
 8000704:	e752      	b.n	80005ac <__aeabi_fadd+0xec>
 8000706:	1c7a      	adds	r2, r7, #1
 8000708:	d0a7      	beq.n	800065a <__aeabi_fadd+0x19a>
 800070a:	43fa      	mvns	r2, r7
 800070c:	28ff      	cmp	r0, #255	; 0xff
 800070e:	d199      	bne.n	8000644 <__aeabi_fadd+0x184>
 8000710:	000a      	movs	r2, r1
 8000712:	001d      	movs	r5, r3
 8000714:	24ff      	movs	r4, #255	; 0xff
 8000716:	e6f1      	b.n	80004fc <__aeabi_fadd+0x3c>
 8000718:	2e00      	cmp	r6, #0
 800071a:	d121      	bne.n	8000760 <__aeabi_fadd+0x2a0>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d04f      	beq.n	80007c0 <__aeabi_fadd+0x300>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d04c      	beq.n	80007be <__aeabi_fadd+0x2fe>
 8000724:	18ed      	adds	r5, r5, r3
 8000726:	016b      	lsls	r3, r5, #5
 8000728:	d59e      	bpl.n	8000668 <__aeabi_fadd+0x1a8>
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <__aeabi_fadd+0x330>)
 800072c:	3607      	adds	r6, #7
 800072e:	402e      	ands	r6, r5
 8000730:	2401      	movs	r4, #1
 8000732:	401d      	ands	r5, r3
 8000734:	e754      	b.n	80005e0 <__aeabi_fadd+0x120>
 8000736:	2301      	movs	r3, #1
 8000738:	e718      	b.n	800056c <__aeabi_fadd+0xac>
 800073a:	28ff      	cmp	r0, #255	; 0xff
 800073c:	d0df      	beq.n	80006fe <__aeabi_fadd+0x23e>
 800073e:	2480      	movs	r4, #128	; 0x80
 8000740:	04e4      	lsls	r4, r4, #19
 8000742:	427f      	negs	r7, r7
 8000744:	4325      	orrs	r5, r4
 8000746:	2f1b      	cmp	r7, #27
 8000748:	dc4d      	bgt.n	80007e6 <__aeabi_fadd+0x326>
 800074a:	2620      	movs	r6, #32
 800074c:	1bf6      	subs	r6, r6, r7
 800074e:	002c      	movs	r4, r5
 8000750:	40b5      	lsls	r5, r6
 8000752:	40fc      	lsrs	r4, r7
 8000754:	1e6a      	subs	r2, r5, #1
 8000756:	4195      	sbcs	r5, r2
 8000758:	4325      	orrs	r5, r4
 800075a:	18ed      	adds	r5, r5, r3
 800075c:	0004      	movs	r4, r0
 800075e:	e706      	b.n	800056e <__aeabi_fadd+0xae>
 8000760:	2d00      	cmp	r5, #0
 8000762:	d0cc      	beq.n	80006fe <__aeabi_fadd+0x23e>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fadd+0x2aa>
 8000768:	e753      	b.n	8000612 <__aeabi_fadd+0x152>
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	4660      	mov	r0, ip
 800076e:	03c9      	lsls	r1, r1, #15
 8000770:	4208      	tst	r0, r1
 8000772:	d003      	beq.n	800077c <__aeabi_fadd+0x2bc>
 8000774:	4640      	mov	r0, r8
 8000776:	4208      	tst	r0, r1
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x2bc>
 800077a:	001d      	movs	r5, r3
 800077c:	2101      	movs	r1, #1
 800077e:	4011      	ands	r1, r2
 8000780:	e747      	b.n	8000612 <__aeabi_fadd+0x152>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x2c8>
 8000786:	e6b9      	b.n	80004fc <__aeabi_fadd+0x3c>
 8000788:	1aea      	subs	r2, r5, r3
 800078a:	0150      	lsls	r0, r2, #5
 800078c:	d525      	bpl.n	80007da <__aeabi_fadd+0x31a>
 800078e:	2607      	movs	r6, #7
 8000790:	1b5d      	subs	r5, r3, r5
 8000792:	402e      	ands	r6, r5
 8000794:	4689      	mov	r9, r1
 8000796:	e723      	b.n	80005e0 <__aeabi_fadd+0x120>
 8000798:	24ff      	movs	r4, #255	; 0xff
 800079a:	2b00      	cmp	r3, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x2e0>
 800079e:	e6ad      	b.n	80004fc <__aeabi_fadd+0x3c>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	4660      	mov	r0, ip
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	4210      	tst	r0, r2
 80007a8:	d004      	beq.n	80007b4 <__aeabi_fadd+0x2f4>
 80007aa:	4640      	mov	r0, r8
 80007ac:	4210      	tst	r0, r2
 80007ae:	d101      	bne.n	80007b4 <__aeabi_fadd+0x2f4>
 80007b0:	001d      	movs	r5, r3
 80007b2:	4689      	mov	r9, r1
 80007b4:	2201      	movs	r2, #1
 80007b6:	464b      	mov	r3, r9
 80007b8:	24ff      	movs	r4, #255	; 0xff
 80007ba:	401a      	ands	r2, r3
 80007bc:	e69e      	b.n	80004fc <__aeabi_fadd+0x3c>
 80007be:	002b      	movs	r3, r5
 80007c0:	08dd      	lsrs	r5, r3, #3
 80007c2:	000a      	movs	r2, r1
 80007c4:	2400      	movs	r4, #0
 80007c6:	e69d      	b.n	8000504 <__aeabi_fadd+0x44>
 80007c8:	1c7a      	adds	r2, r7, #1
 80007ca:	d0c6      	beq.n	800075a <__aeabi_fadd+0x29a>
 80007cc:	43ff      	mvns	r7, r7
 80007ce:	28ff      	cmp	r0, #255	; 0xff
 80007d0:	d1b9      	bne.n	8000746 <__aeabi_fadd+0x286>
 80007d2:	001d      	movs	r5, r3
 80007d4:	e71d      	b.n	8000612 <__aeabi_fadd+0x152>
 80007d6:	2501      	movs	r5, #1
 80007d8:	e73f      	b.n	800065a <__aeabi_fadd+0x19a>
 80007da:	1e15      	subs	r5, r2, #0
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x320>
 80007de:	e744      	b.n	800066a <__aeabi_fadd+0x1aa>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2300      	movs	r3, #0
 80007e4:	e691      	b.n	800050a <__aeabi_fadd+0x4a>
 80007e6:	2501      	movs	r5, #1
 80007e8:	e7b7      	b.n	800075a <__aeabi_fadd+0x29a>
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	7dffffff 	.word	0x7dffffff
 80007f0:	fbffffff 	.word	0xfbffffff

080007f4 <__eqsf2>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	0042      	lsls	r2, r0, #1
 80007f8:	024e      	lsls	r6, r1, #9
 80007fa:	004c      	lsls	r4, r1, #1
 80007fc:	0245      	lsls	r5, r0, #9
 80007fe:	0a6d      	lsrs	r5, r5, #9
 8000800:	0e12      	lsrs	r2, r2, #24
 8000802:	0fc3      	lsrs	r3, r0, #31
 8000804:	0a76      	lsrs	r6, r6, #9
 8000806:	0e24      	lsrs	r4, r4, #24
 8000808:	0fc9      	lsrs	r1, r1, #31
 800080a:	2aff      	cmp	r2, #255	; 0xff
 800080c:	d00f      	beq.n	800082e <__eqsf2+0x3a>
 800080e:	2cff      	cmp	r4, #255	; 0xff
 8000810:	d011      	beq.n	8000836 <__eqsf2+0x42>
 8000812:	2001      	movs	r0, #1
 8000814:	42a2      	cmp	r2, r4
 8000816:	d000      	beq.n	800081a <__eqsf2+0x26>
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	42b5      	cmp	r5, r6
 800081c:	d1fc      	bne.n	8000818 <__eqsf2+0x24>
 800081e:	428b      	cmp	r3, r1
 8000820:	d00d      	beq.n	800083e <__eqsf2+0x4a>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d1f8      	bne.n	8000818 <__eqsf2+0x24>
 8000826:	0028      	movs	r0, r5
 8000828:	1e45      	subs	r5, r0, #1
 800082a:	41a8      	sbcs	r0, r5
 800082c:	e7f4      	b.n	8000818 <__eqsf2+0x24>
 800082e:	2001      	movs	r0, #1
 8000830:	2d00      	cmp	r5, #0
 8000832:	d1f1      	bne.n	8000818 <__eqsf2+0x24>
 8000834:	e7eb      	b.n	800080e <__eqsf2+0x1a>
 8000836:	2001      	movs	r0, #1
 8000838:	2e00      	cmp	r6, #0
 800083a:	d1ed      	bne.n	8000818 <__eqsf2+0x24>
 800083c:	e7e9      	b.n	8000812 <__eqsf2+0x1e>
 800083e:	2000      	movs	r0, #0
 8000840:	e7ea      	b.n	8000818 <__eqsf2+0x24>
 8000842:	46c0      	nop			; (mov r8, r8)

08000844 <__gesf2>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	004a      	lsls	r2, r1, #1
 8000848:	024e      	lsls	r6, r1, #9
 800084a:	0245      	lsls	r5, r0, #9
 800084c:	0044      	lsls	r4, r0, #1
 800084e:	0a6d      	lsrs	r5, r5, #9
 8000850:	0e24      	lsrs	r4, r4, #24
 8000852:	0fc3      	lsrs	r3, r0, #31
 8000854:	0a76      	lsrs	r6, r6, #9
 8000856:	0e12      	lsrs	r2, r2, #24
 8000858:	0fc9      	lsrs	r1, r1, #31
 800085a:	2cff      	cmp	r4, #255	; 0xff
 800085c:	d015      	beq.n	800088a <__gesf2+0x46>
 800085e:	2aff      	cmp	r2, #255	; 0xff
 8000860:	d00e      	beq.n	8000880 <__gesf2+0x3c>
 8000862:	2c00      	cmp	r4, #0
 8000864:	d115      	bne.n	8000892 <__gesf2+0x4e>
 8000866:	2a00      	cmp	r2, #0
 8000868:	d101      	bne.n	800086e <__gesf2+0x2a>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d01c      	beq.n	80008a8 <__gesf2+0x64>
 800086e:	2d00      	cmp	r5, #0
 8000870:	d014      	beq.n	800089c <__gesf2+0x58>
 8000872:	428b      	cmp	r3, r1
 8000874:	d027      	beq.n	80008c6 <__gesf2+0x82>
 8000876:	2002      	movs	r0, #2
 8000878:	3b01      	subs	r3, #1
 800087a:	4018      	ands	r0, r3
 800087c:	3801      	subs	r0, #1
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0ee      	beq.n	8000862 <__gesf2+0x1e>
 8000884:	2002      	movs	r0, #2
 8000886:	4240      	negs	r0, r0
 8000888:	e7f9      	b.n	800087e <__gesf2+0x3a>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d1fa      	bne.n	8000884 <__gesf2+0x40>
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d00e      	beq.n	80008b0 <__gesf2+0x6c>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d10e      	bne.n	80008b4 <__gesf2+0x70>
 8000896:	2e00      	cmp	r6, #0
 8000898:	d0ed      	beq.n	8000876 <__gesf2+0x32>
 800089a:	e00b      	b.n	80008b4 <__gesf2+0x70>
 800089c:	2301      	movs	r3, #1
 800089e:	3901      	subs	r1, #1
 80008a0:	4399      	bics	r1, r3
 80008a2:	0008      	movs	r0, r1
 80008a4:	3001      	adds	r0, #1
 80008a6:	e7ea      	b.n	800087e <__gesf2+0x3a>
 80008a8:	2000      	movs	r0, #0
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d0e7      	beq.n	800087e <__gesf2+0x3a>
 80008ae:	e7e2      	b.n	8000876 <__gesf2+0x32>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d1e7      	bne.n	8000884 <__gesf2+0x40>
 80008b4:	428b      	cmp	r3, r1
 80008b6:	d1de      	bne.n	8000876 <__gesf2+0x32>
 80008b8:	4294      	cmp	r4, r2
 80008ba:	dd05      	ble.n	80008c8 <__gesf2+0x84>
 80008bc:	2102      	movs	r1, #2
 80008be:	1e58      	subs	r0, r3, #1
 80008c0:	4008      	ands	r0, r1
 80008c2:	3801      	subs	r0, #1
 80008c4:	e7db      	b.n	800087e <__gesf2+0x3a>
 80008c6:	2400      	movs	r4, #0
 80008c8:	42a2      	cmp	r2, r4
 80008ca:	dc04      	bgt.n	80008d6 <__gesf2+0x92>
 80008cc:	42b5      	cmp	r5, r6
 80008ce:	d8d2      	bhi.n	8000876 <__gesf2+0x32>
 80008d0:	2000      	movs	r0, #0
 80008d2:	42b5      	cmp	r5, r6
 80008d4:	d2d3      	bcs.n	800087e <__gesf2+0x3a>
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	2301      	movs	r3, #1
 80008da:	4398      	bics	r0, r3
 80008dc:	3001      	adds	r0, #1
 80008de:	e7ce      	b.n	800087e <__gesf2+0x3a>

080008e0 <__lesf2>:
 80008e0:	b530      	push	{r4, r5, lr}
 80008e2:	0042      	lsls	r2, r0, #1
 80008e4:	0244      	lsls	r4, r0, #9
 80008e6:	024d      	lsls	r5, r1, #9
 80008e8:	0fc3      	lsrs	r3, r0, #31
 80008ea:	0048      	lsls	r0, r1, #1
 80008ec:	0a64      	lsrs	r4, r4, #9
 80008ee:	0e12      	lsrs	r2, r2, #24
 80008f0:	0a6d      	lsrs	r5, r5, #9
 80008f2:	0e00      	lsrs	r0, r0, #24
 80008f4:	0fc9      	lsrs	r1, r1, #31
 80008f6:	2aff      	cmp	r2, #255	; 0xff
 80008f8:	d012      	beq.n	8000920 <__lesf2+0x40>
 80008fa:	28ff      	cmp	r0, #255	; 0xff
 80008fc:	d00c      	beq.n	8000918 <__lesf2+0x38>
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d112      	bne.n	8000928 <__lesf2+0x48>
 8000902:	2800      	cmp	r0, #0
 8000904:	d119      	bne.n	800093a <__lesf2+0x5a>
 8000906:	2d00      	cmp	r5, #0
 8000908:	d117      	bne.n	800093a <__lesf2+0x5a>
 800090a:	2c00      	cmp	r4, #0
 800090c:	d02b      	beq.n	8000966 <__lesf2+0x86>
 800090e:	2002      	movs	r0, #2
 8000910:	3b01      	subs	r3, #1
 8000912:	4018      	ands	r0, r3
 8000914:	3801      	subs	r0, #1
 8000916:	e026      	b.n	8000966 <__lesf2+0x86>
 8000918:	2d00      	cmp	r5, #0
 800091a:	d0f0      	beq.n	80008fe <__lesf2+0x1e>
 800091c:	2002      	movs	r0, #2
 800091e:	e022      	b.n	8000966 <__lesf2+0x86>
 8000920:	2c00      	cmp	r4, #0
 8000922:	d1fb      	bne.n	800091c <__lesf2+0x3c>
 8000924:	28ff      	cmp	r0, #255	; 0xff
 8000926:	d01f      	beq.n	8000968 <__lesf2+0x88>
 8000928:	2800      	cmp	r0, #0
 800092a:	d11f      	bne.n	800096c <__lesf2+0x8c>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d11d      	bne.n	800096c <__lesf2+0x8c>
 8000930:	2002      	movs	r0, #2
 8000932:	3b01      	subs	r3, #1
 8000934:	4018      	ands	r0, r3
 8000936:	3801      	subs	r0, #1
 8000938:	e015      	b.n	8000966 <__lesf2+0x86>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d00e      	beq.n	800095c <__lesf2+0x7c>
 800093e:	428b      	cmp	r3, r1
 8000940:	d1e5      	bne.n	800090e <__lesf2+0x2e>
 8000942:	2200      	movs	r2, #0
 8000944:	4290      	cmp	r0, r2
 8000946:	dc04      	bgt.n	8000952 <__lesf2+0x72>
 8000948:	42ac      	cmp	r4, r5
 800094a:	d8e0      	bhi.n	800090e <__lesf2+0x2e>
 800094c:	2000      	movs	r0, #0
 800094e:	42ac      	cmp	r4, r5
 8000950:	d209      	bcs.n	8000966 <__lesf2+0x86>
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	2301      	movs	r3, #1
 8000956:	4398      	bics	r0, r3
 8000958:	3001      	adds	r0, #1
 800095a:	e004      	b.n	8000966 <__lesf2+0x86>
 800095c:	2301      	movs	r3, #1
 800095e:	3901      	subs	r1, #1
 8000960:	4399      	bics	r1, r3
 8000962:	0008      	movs	r0, r1
 8000964:	3001      	adds	r0, #1
 8000966:	bd30      	pop	{r4, r5, pc}
 8000968:	2d00      	cmp	r5, #0
 800096a:	d1d7      	bne.n	800091c <__lesf2+0x3c>
 800096c:	428b      	cmp	r3, r1
 800096e:	d1ce      	bne.n	800090e <__lesf2+0x2e>
 8000970:	4282      	cmp	r2, r0
 8000972:	dde7      	ble.n	8000944 <__lesf2+0x64>
 8000974:	2102      	movs	r1, #2
 8000976:	1e58      	subs	r0, r3, #1
 8000978:	4008      	ands	r0, r1
 800097a:	3801      	subs	r0, #1
 800097c:	e7f3      	b.n	8000966 <__lesf2+0x86>
 800097e:	46c0      	nop			; (mov r8, r8)

08000980 <__aeabi_fmul>:
 8000980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000982:	464e      	mov	r6, r9
 8000984:	4657      	mov	r7, sl
 8000986:	4645      	mov	r5, r8
 8000988:	46de      	mov	lr, fp
 800098a:	b5e0      	push	{r5, r6, r7, lr}
 800098c:	0243      	lsls	r3, r0, #9
 800098e:	0a5b      	lsrs	r3, r3, #9
 8000990:	0045      	lsls	r5, r0, #1
 8000992:	b083      	sub	sp, #12
 8000994:	1c0f      	adds	r7, r1, #0
 8000996:	4699      	mov	r9, r3
 8000998:	0e2d      	lsrs	r5, r5, #24
 800099a:	0fc6      	lsrs	r6, r0, #31
 800099c:	2d00      	cmp	r5, #0
 800099e:	d057      	beq.n	8000a50 <__aeabi_fmul+0xd0>
 80009a0:	2dff      	cmp	r5, #255	; 0xff
 80009a2:	d024      	beq.n	80009ee <__aeabi_fmul+0x6e>
 80009a4:	2080      	movs	r0, #128	; 0x80
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	04c0      	lsls	r0, r0, #19
 80009aa:	4318      	orrs	r0, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	4681      	mov	r9, r0
 80009b0:	469a      	mov	sl, r3
 80009b2:	469b      	mov	fp, r3
 80009b4:	3d7f      	subs	r5, #127	; 0x7f
 80009b6:	027c      	lsls	r4, r7, #9
 80009b8:	007a      	lsls	r2, r7, #1
 80009ba:	0ffb      	lsrs	r3, r7, #31
 80009bc:	0a64      	lsrs	r4, r4, #9
 80009be:	0e12      	lsrs	r2, r2, #24
 80009c0:	4698      	mov	r8, r3
 80009c2:	d023      	beq.n	8000a0c <__aeabi_fmul+0x8c>
 80009c4:	2aff      	cmp	r2, #255	; 0xff
 80009c6:	d04b      	beq.n	8000a60 <__aeabi_fmul+0xe0>
 80009c8:	00e3      	lsls	r3, r4, #3
 80009ca:	2480      	movs	r4, #128	; 0x80
 80009cc:	2000      	movs	r0, #0
 80009ce:	04e4      	lsls	r4, r4, #19
 80009d0:	3a7f      	subs	r2, #127	; 0x7f
 80009d2:	431c      	orrs	r4, r3
 80009d4:	18ad      	adds	r5, r5, r2
 80009d6:	1c6b      	adds	r3, r5, #1
 80009d8:	4647      	mov	r7, r8
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	4653      	mov	r3, sl
 80009de:	4077      	eors	r7, r6
 80009e0:	003a      	movs	r2, r7
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	d848      	bhi.n	8000a78 <__aeabi_fmul+0xf8>
 80009e6:	497d      	ldr	r1, [pc, #500]	; (8000bdc <__aeabi_fmul+0x25c>)
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	58cb      	ldr	r3, [r1, r3]
 80009ec:	469f      	mov	pc, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d000      	beq.n	80009f4 <__aeabi_fmul+0x74>
 80009f2:	e085      	b.n	8000b00 <__aeabi_fmul+0x180>
 80009f4:	3308      	adds	r3, #8
 80009f6:	469a      	mov	sl, r3
 80009f8:	3b06      	subs	r3, #6
 80009fa:	469b      	mov	fp, r3
 80009fc:	027c      	lsls	r4, r7, #9
 80009fe:	007a      	lsls	r2, r7, #1
 8000a00:	0ffb      	lsrs	r3, r7, #31
 8000a02:	25ff      	movs	r5, #255	; 0xff
 8000a04:	0a64      	lsrs	r4, r4, #9
 8000a06:	0e12      	lsrs	r2, r2, #24
 8000a08:	4698      	mov	r8, r3
 8000a0a:	d1db      	bne.n	80009c4 <__aeabi_fmul+0x44>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fmul+0x92>
 8000a10:	e090      	b.n	8000b34 <__aeabi_fmul+0x1b4>
 8000a12:	4652      	mov	r2, sl
 8000a14:	2301      	movs	r3, #1
 8000a16:	431a      	orrs	r2, r3
 8000a18:	4692      	mov	sl, r2
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	e7db      	b.n	80009d6 <__aeabi_fmul+0x56>
 8000a1e:	464c      	mov	r4, r9
 8000a20:	4658      	mov	r0, fp
 8000a22:	0017      	movs	r7, r2
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d024      	beq.n	8000a72 <__aeabi_fmul+0xf2>
 8000a28:	2803      	cmp	r0, #3
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fmul+0xae>
 8000a2c:	e0cf      	b.n	8000bce <__aeabi_fmul+0x24e>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2300      	movs	r3, #0
 8000a32:	2801      	cmp	r0, #1
 8000a34:	d14d      	bne.n	8000ad2 <__aeabi_fmul+0x152>
 8000a36:	0258      	lsls	r0, r3, #9
 8000a38:	05d2      	lsls	r2, r2, #23
 8000a3a:	0a40      	lsrs	r0, r0, #9
 8000a3c:	07ff      	lsls	r7, r7, #31
 8000a3e:	4310      	orrs	r0, r2
 8000a40:	4338      	orrs	r0, r7
 8000a42:	b003      	add	sp, #12
 8000a44:	bc3c      	pop	{r2, r3, r4, r5}
 8000a46:	4690      	mov	r8, r2
 8000a48:	4699      	mov	r9, r3
 8000a4a:	46a2      	mov	sl, r4
 8000a4c:	46ab      	mov	fp, r5
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d15b      	bne.n	8000b0c <__aeabi_fmul+0x18c>
 8000a54:	2304      	movs	r3, #4
 8000a56:	469a      	mov	sl, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	469b      	mov	fp, r3
 8000a5e:	e7aa      	b.n	80009b6 <__aeabi_fmul+0x36>
 8000a60:	35ff      	adds	r5, #255	; 0xff
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	d160      	bne.n	8000b28 <__aeabi_fmul+0x1a8>
 8000a66:	4652      	mov	r2, sl
 8000a68:	2302      	movs	r3, #2
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	4692      	mov	sl, r2
 8000a6e:	2002      	movs	r0, #2
 8000a70:	e7b1      	b.n	80009d6 <__aeabi_fmul+0x56>
 8000a72:	22ff      	movs	r2, #255	; 0xff
 8000a74:	2300      	movs	r3, #0
 8000a76:	e7de      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000a78:	464b      	mov	r3, r9
 8000a7a:	0c1b      	lsrs	r3, r3, #16
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	464b      	mov	r3, r9
 8000a80:	0426      	lsls	r6, r4, #16
 8000a82:	0c36      	lsrs	r6, r6, #16
 8000a84:	0418      	lsls	r0, r3, #16
 8000a86:	4661      	mov	r1, ip
 8000a88:	0033      	movs	r3, r6
 8000a8a:	0c22      	lsrs	r2, r4, #16
 8000a8c:	4664      	mov	r4, ip
 8000a8e:	0c00      	lsrs	r0, r0, #16
 8000a90:	4343      	muls	r3, r0
 8000a92:	434e      	muls	r6, r1
 8000a94:	4350      	muls	r0, r2
 8000a96:	4354      	muls	r4, r2
 8000a98:	1980      	adds	r0, r0, r6
 8000a9a:	0c1a      	lsrs	r2, r3, #16
 8000a9c:	1812      	adds	r2, r2, r0
 8000a9e:	4296      	cmp	r6, r2
 8000aa0:	d903      	bls.n	8000aaa <__aeabi_fmul+0x12a>
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	0249      	lsls	r1, r1, #9
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4464      	add	r4, ip
 8000aaa:	041b      	lsls	r3, r3, #16
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	0410      	lsls	r0, r2, #16
 8000ab0:	18c0      	adds	r0, r0, r3
 8000ab2:	0183      	lsls	r3, r0, #6
 8000ab4:	1e5e      	subs	r6, r3, #1
 8000ab6:	41b3      	sbcs	r3, r6
 8000ab8:	0e80      	lsrs	r0, r0, #26
 8000aba:	4318      	orrs	r0, r3
 8000abc:	0c13      	lsrs	r3, r2, #16
 8000abe:	191b      	adds	r3, r3, r4
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	001c      	movs	r4, r3
 8000ac6:	0123      	lsls	r3, r4, #4
 8000ac8:	d579      	bpl.n	8000bbe <__aeabi_fmul+0x23e>
 8000aca:	2301      	movs	r3, #1
 8000acc:	0862      	lsrs	r2, r4, #1
 8000ace:	401c      	ands	r4, r3
 8000ad0:	4314      	orrs	r4, r2
 8000ad2:	9a01      	ldr	r2, [sp, #4]
 8000ad4:	327f      	adds	r2, #127	; 0x7f
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	dd4d      	ble.n	8000b76 <__aeabi_fmul+0x1f6>
 8000ada:	0763      	lsls	r3, r4, #29
 8000adc:	d004      	beq.n	8000ae8 <__aeabi_fmul+0x168>
 8000ade:	230f      	movs	r3, #15
 8000ae0:	4023      	ands	r3, r4
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_fmul+0x168>
 8000ae6:	3404      	adds	r4, #4
 8000ae8:	0123      	lsls	r3, r4, #4
 8000aea:	d503      	bpl.n	8000af4 <__aeabi_fmul+0x174>
 8000aec:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <__aeabi_fmul+0x260>)
 8000aee:	9a01      	ldr	r2, [sp, #4]
 8000af0:	401c      	ands	r4, r3
 8000af2:	3280      	adds	r2, #128	; 0x80
 8000af4:	2afe      	cmp	r2, #254	; 0xfe
 8000af6:	dcbc      	bgt.n	8000a72 <__aeabi_fmul+0xf2>
 8000af8:	01a3      	lsls	r3, r4, #6
 8000afa:	0a5b      	lsrs	r3, r3, #9
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	e79a      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000b00:	230c      	movs	r3, #12
 8000b02:	469a      	mov	sl, r3
 8000b04:	3b09      	subs	r3, #9
 8000b06:	25ff      	movs	r5, #255	; 0xff
 8000b08:	469b      	mov	fp, r3
 8000b0a:	e754      	b.n	80009b6 <__aeabi_fmul+0x36>
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fad7 	bl	80010c0 <__clzsi2>
 8000b12:	464a      	mov	r2, r9
 8000b14:	1f43      	subs	r3, r0, #5
 8000b16:	2576      	movs	r5, #118	; 0x76
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	426d      	negs	r5, r5
 8000b1e:	4691      	mov	r9, r2
 8000b20:	1a2d      	subs	r5, r5, r0
 8000b22:	469a      	mov	sl, r3
 8000b24:	469b      	mov	fp, r3
 8000b26:	e746      	b.n	80009b6 <__aeabi_fmul+0x36>
 8000b28:	4652      	mov	r2, sl
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	4692      	mov	sl, r2
 8000b30:	2003      	movs	r0, #3
 8000b32:	e750      	b.n	80009d6 <__aeabi_fmul+0x56>
 8000b34:	0020      	movs	r0, r4
 8000b36:	f000 fac3 	bl	80010c0 <__clzsi2>
 8000b3a:	1f43      	subs	r3, r0, #5
 8000b3c:	1a2d      	subs	r5, r5, r0
 8000b3e:	409c      	lsls	r4, r3
 8000b40:	3d76      	subs	r5, #118	; 0x76
 8000b42:	2000      	movs	r0, #0
 8000b44:	e747      	b.n	80009d6 <__aeabi_fmul+0x56>
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	2700      	movs	r7, #0
 8000b4a:	03db      	lsls	r3, r3, #15
 8000b4c:	22ff      	movs	r2, #255	; 0xff
 8000b4e:	e772      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000b50:	4642      	mov	r2, r8
 8000b52:	e766      	b.n	8000a22 <__aeabi_fmul+0xa2>
 8000b54:	464c      	mov	r4, r9
 8000b56:	0032      	movs	r2, r6
 8000b58:	4658      	mov	r0, fp
 8000b5a:	e762      	b.n	8000a22 <__aeabi_fmul+0xa2>
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	464a      	mov	r2, r9
 8000b60:	03db      	lsls	r3, r3, #15
 8000b62:	421a      	tst	r2, r3
 8000b64:	d022      	beq.n	8000bac <__aeabi_fmul+0x22c>
 8000b66:	421c      	tst	r4, r3
 8000b68:	d120      	bne.n	8000bac <__aeabi_fmul+0x22c>
 8000b6a:	4323      	orrs	r3, r4
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	0a5b      	lsrs	r3, r3, #9
 8000b70:	4647      	mov	r7, r8
 8000b72:	22ff      	movs	r2, #255	; 0xff
 8000b74:	e75f      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000b76:	2301      	movs	r3, #1
 8000b78:	1a9a      	subs	r2, r3, r2
 8000b7a:	2a1b      	cmp	r2, #27
 8000b7c:	dc21      	bgt.n	8000bc2 <__aeabi_fmul+0x242>
 8000b7e:	0023      	movs	r3, r4
 8000b80:	9901      	ldr	r1, [sp, #4]
 8000b82:	40d3      	lsrs	r3, r2
 8000b84:	319e      	adds	r1, #158	; 0x9e
 8000b86:	408c      	lsls	r4, r1
 8000b88:	001a      	movs	r2, r3
 8000b8a:	0023      	movs	r3, r4
 8000b8c:	1e5c      	subs	r4, r3, #1
 8000b8e:	41a3      	sbcs	r3, r4
 8000b90:	4313      	orrs	r3, r2
 8000b92:	075a      	lsls	r2, r3, #29
 8000b94:	d004      	beq.n	8000ba0 <__aeabi_fmul+0x220>
 8000b96:	220f      	movs	r2, #15
 8000b98:	401a      	ands	r2, r3
 8000b9a:	2a04      	cmp	r2, #4
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_fmul+0x220>
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	015a      	lsls	r2, r3, #5
 8000ba2:	d411      	bmi.n	8000bc8 <__aeabi_fmul+0x248>
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	0a5b      	lsrs	r3, r3, #9
 8000ba8:	2200      	movs	r2, #0
 8000baa:	e744      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	464a      	mov	r2, r9
 8000bb0:	03db      	lsls	r3, r3, #15
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	025b      	lsls	r3, r3, #9
 8000bb6:	0a5b      	lsrs	r3, r3, #9
 8000bb8:	0037      	movs	r7, r6
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	e73b      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000bbe:	9501      	str	r5, [sp, #4]
 8000bc0:	e787      	b.n	8000ad2 <__aeabi_fmul+0x152>
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e736      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e733      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	03db      	lsls	r3, r3, #15
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	025b      	lsls	r3, r3, #9
 8000bd6:	0a5b      	lsrs	r3, r3, #9
 8000bd8:	22ff      	movs	r2, #255	; 0xff
 8000bda:	e72c      	b.n	8000a36 <__aeabi_fmul+0xb6>
 8000bdc:	080056e4 	.word	0x080056e4
 8000be0:	f7ffffff 	.word	0xf7ffffff

08000be4 <__aeabi_fsub>:
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	4647      	mov	r7, r8
 8000be8:	46ce      	mov	lr, r9
 8000bea:	0044      	lsls	r4, r0, #1
 8000bec:	0fc2      	lsrs	r2, r0, #31
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	0247      	lsls	r7, r0, #9
 8000bf2:	0248      	lsls	r0, r1, #9
 8000bf4:	0a40      	lsrs	r0, r0, #9
 8000bf6:	4684      	mov	ip, r0
 8000bf8:	4666      	mov	r6, ip
 8000bfa:	0048      	lsls	r0, r1, #1
 8000bfc:	0a7f      	lsrs	r7, r7, #9
 8000bfe:	0e24      	lsrs	r4, r4, #24
 8000c00:	00f6      	lsls	r6, r6, #3
 8000c02:	0025      	movs	r5, r4
 8000c04:	4690      	mov	r8, r2
 8000c06:	00fb      	lsls	r3, r7, #3
 8000c08:	0e00      	lsrs	r0, r0, #24
 8000c0a:	0fc9      	lsrs	r1, r1, #31
 8000c0c:	46b1      	mov	r9, r6
 8000c0e:	28ff      	cmp	r0, #255	; 0xff
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fsub+0x30>
 8000c12:	e085      	b.n	8000d20 <__aeabi_fsub+0x13c>
 8000c14:	2601      	movs	r6, #1
 8000c16:	4071      	eors	r1, r6
 8000c18:	1a26      	subs	r6, r4, r0
 8000c1a:	4291      	cmp	r1, r2
 8000c1c:	d057      	beq.n	8000cce <__aeabi_fsub+0xea>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	dd43      	ble.n	8000caa <__aeabi_fsub+0xc6>
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fsub+0x44>
 8000c26:	e07f      	b.n	8000d28 <__aeabi_fsub+0x144>
 8000c28:	4649      	mov	r1, r9
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fsub+0x4c>
 8000c2e:	e0aa      	b.n	8000d86 <__aeabi_fsub+0x1a2>
 8000c30:	3e01      	subs	r6, #1
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fsub+0x54>
 8000c36:	e0f7      	b.n	8000e28 <__aeabi_fsub+0x244>
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	015a      	lsls	r2, r3, #5
 8000c3c:	d400      	bmi.n	8000c40 <__aeabi_fsub+0x5c>
 8000c3e:	e08b      	b.n	8000d58 <__aeabi_fsub+0x174>
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	099c      	lsrs	r4, r3, #6
 8000c44:	0020      	movs	r0, r4
 8000c46:	f000 fa3b 	bl	80010c0 <__clzsi2>
 8000c4a:	3805      	subs	r0, #5
 8000c4c:	4084      	lsls	r4, r0
 8000c4e:	4285      	cmp	r5, r0
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_fsub+0x70>
 8000c52:	e0d3      	b.n	8000dfc <__aeabi_fsub+0x218>
 8000c54:	1b45      	subs	r5, r0, r5
 8000c56:	0023      	movs	r3, r4
 8000c58:	2020      	movs	r0, #32
 8000c5a:	3501      	adds	r5, #1
 8000c5c:	40eb      	lsrs	r3, r5
 8000c5e:	1b45      	subs	r5, r0, r5
 8000c60:	40ac      	lsls	r4, r5
 8000c62:	1e62      	subs	r2, r4, #1
 8000c64:	4194      	sbcs	r4, r2
 8000c66:	4323      	orrs	r3, r4
 8000c68:	2407      	movs	r4, #7
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	401c      	ands	r4, r3
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4641      	mov	r1, r8
 8000c72:	400a      	ands	r2, r1
 8000c74:	2c00      	cmp	r4, #0
 8000c76:	d004      	beq.n	8000c82 <__aeabi_fsub+0x9e>
 8000c78:	210f      	movs	r1, #15
 8000c7a:	4019      	ands	r1, r3
 8000c7c:	2904      	cmp	r1, #4
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fsub+0x9e>
 8000c80:	3304      	adds	r3, #4
 8000c82:	0159      	lsls	r1, r3, #5
 8000c84:	d400      	bmi.n	8000c88 <__aeabi_fsub+0xa4>
 8000c86:	e080      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000c88:	3501      	adds	r5, #1
 8000c8a:	b2ec      	uxtb	r4, r5
 8000c8c:	2dff      	cmp	r5, #255	; 0xff
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fsub+0xae>
 8000c90:	e0a3      	b.n	8000dda <__aeabi_fsub+0x1f6>
 8000c92:	24ff      	movs	r4, #255	; 0xff
 8000c94:	2300      	movs	r3, #0
 8000c96:	025b      	lsls	r3, r3, #9
 8000c98:	05e4      	lsls	r4, r4, #23
 8000c9a:	0a58      	lsrs	r0, r3, #9
 8000c9c:	07d2      	lsls	r2, r2, #31
 8000c9e:	4320      	orrs	r0, r4
 8000ca0:	4310      	orrs	r0, r2
 8000ca2:	bc0c      	pop	{r2, r3}
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	4699      	mov	r9, r3
 8000ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d174      	bne.n	8000d98 <__aeabi_fsub+0x1b4>
 8000cae:	1c60      	adds	r0, r4, #1
 8000cb0:	b2c0      	uxtb	r0, r0
 8000cb2:	2801      	cmp	r0, #1
 8000cb4:	dc00      	bgt.n	8000cb8 <__aeabi_fsub+0xd4>
 8000cb6:	e0a7      	b.n	8000e08 <__aeabi_fsub+0x224>
 8000cb8:	464a      	mov	r2, r9
 8000cba:	1a9c      	subs	r4, r3, r2
 8000cbc:	0162      	lsls	r2, r4, #5
 8000cbe:	d500      	bpl.n	8000cc2 <__aeabi_fsub+0xde>
 8000cc0:	e0b6      	b.n	8000e30 <__aeabi_fsub+0x24c>
 8000cc2:	2c00      	cmp	r4, #0
 8000cc4:	d1be      	bne.n	8000c44 <__aeabi_fsub+0x60>
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2400      	movs	r4, #0
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e7e3      	b.n	8000c96 <__aeabi_fsub+0xb2>
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	dc00      	bgt.n	8000cd4 <__aeabi_fsub+0xf0>
 8000cd2:	e085      	b.n	8000de0 <__aeabi_fsub+0x1fc>
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d046      	beq.n	8000d66 <__aeabi_fsub+0x182>
 8000cd8:	2cff      	cmp	r4, #255	; 0xff
 8000cda:	d049      	beq.n	8000d70 <__aeabi_fsub+0x18c>
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	4648      	mov	r0, r9
 8000ce0:	04d2      	lsls	r2, r2, #19
 8000ce2:	4310      	orrs	r0, r2
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2e1b      	cmp	r6, #27
 8000cea:	dc09      	bgt.n	8000d00 <__aeabi_fsub+0x11c>
 8000cec:	2020      	movs	r0, #32
 8000cee:	464c      	mov	r4, r9
 8000cf0:	1b80      	subs	r0, r0, r6
 8000cf2:	4084      	lsls	r4, r0
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	40f2      	lsrs	r2, r6
 8000cfa:	1e44      	subs	r4, r0, #1
 8000cfc:	41a0      	sbcs	r0, r4
 8000cfe:	4302      	orrs	r2, r0
 8000d00:	189b      	adds	r3, r3, r2
 8000d02:	015a      	lsls	r2, r3, #5
 8000d04:	d528      	bpl.n	8000d58 <__aeabi_fsub+0x174>
 8000d06:	3501      	adds	r5, #1
 8000d08:	2dff      	cmp	r5, #255	; 0xff
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x12a>
 8000d0c:	e0a8      	b.n	8000e60 <__aeabi_fsub+0x27c>
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2407      	movs	r4, #7
 8000d12:	4994      	ldr	r1, [pc, #592]	; (8000f64 <__aeabi_fsub+0x380>)
 8000d14:	401a      	ands	r2, r3
 8000d16:	085b      	lsrs	r3, r3, #1
 8000d18:	400b      	ands	r3, r1
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	401c      	ands	r4, r3
 8000d1e:	e7a6      	b.n	8000c6e <__aeabi_fsub+0x8a>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fsub+0x142>
 8000d24:	e778      	b.n	8000c18 <__aeabi_fsub+0x34>
 8000d26:	e775      	b.n	8000c14 <__aeabi_fsub+0x30>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d054      	beq.n	8000dd6 <__aeabi_fsub+0x1f2>
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	4649      	mov	r1, r9
 8000d30:	04d2      	lsls	r2, r2, #19
 8000d32:	4311      	orrs	r1, r2
 8000d34:	4689      	mov	r9, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	2e1b      	cmp	r6, #27
 8000d3a:	dc09      	bgt.n	8000d50 <__aeabi_fsub+0x16c>
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4648      	mov	r0, r9
 8000d40:	1b89      	subs	r1, r1, r6
 8000d42:	4088      	lsls	r0, r1
 8000d44:	464a      	mov	r2, r9
 8000d46:	0001      	movs	r1, r0
 8000d48:	40f2      	lsrs	r2, r6
 8000d4a:	1e48      	subs	r0, r1, #1
 8000d4c:	4181      	sbcs	r1, r0
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	d500      	bpl.n	8000d58 <__aeabi_fsub+0x174>
 8000d56:	e773      	b.n	8000c40 <__aeabi_fsub+0x5c>
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4641      	mov	r1, r8
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	0759      	lsls	r1, r3, #29
 8000d60:	d000      	beq.n	8000d64 <__aeabi_fsub+0x180>
 8000d62:	e789      	b.n	8000c78 <__aeabi_fsub+0x94>
 8000d64:	e011      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000d66:	4648      	mov	r0, r9
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d158      	bne.n	8000e1e <__aeabi_fsub+0x23a>
 8000d6c:	2cff      	cmp	r4, #255	; 0xff
 8000d6e:	d10c      	bne.n	8000d8a <__aeabi_fsub+0x1a6>
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x194>
 8000d76:	e78c      	b.n	8000c92 <__aeabi_fsub+0xae>
 8000d78:	2080      	movs	r0, #128	; 0x80
 8000d7a:	03c0      	lsls	r0, r0, #15
 8000d7c:	4303      	orrs	r3, r0
 8000d7e:	025b      	lsls	r3, r3, #9
 8000d80:	0a5b      	lsrs	r3, r3, #9
 8000d82:	24ff      	movs	r4, #255	; 0xff
 8000d84:	e787      	b.n	8000c96 <__aeabi_fsub+0xb2>
 8000d86:	2cff      	cmp	r4, #255	; 0xff
 8000d88:	d025      	beq.n	8000dd6 <__aeabi_fsub+0x1f2>
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	2dff      	cmp	r5, #255	; 0xff
 8000d8e:	d0f0      	beq.n	8000d72 <__aeabi_fsub+0x18e>
 8000d90:	025b      	lsls	r3, r3, #9
 8000d92:	0a5b      	lsrs	r3, r3, #9
 8000d94:	b2ec      	uxtb	r4, r5
 8000d96:	e77e      	b.n	8000c96 <__aeabi_fsub+0xb2>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d04d      	beq.n	8000e38 <__aeabi_fsub+0x254>
 8000d9c:	28ff      	cmp	r0, #255	; 0xff
 8000d9e:	d018      	beq.n	8000dd2 <__aeabi_fsub+0x1ee>
 8000da0:	2480      	movs	r4, #128	; 0x80
 8000da2:	04e4      	lsls	r4, r4, #19
 8000da4:	4272      	negs	r2, r6
 8000da6:	4323      	orrs	r3, r4
 8000da8:	2a1b      	cmp	r2, #27
 8000daa:	dd00      	ble.n	8000dae <__aeabi_fsub+0x1ca>
 8000dac:	e0c4      	b.n	8000f38 <__aeabi_fsub+0x354>
 8000dae:	001c      	movs	r4, r3
 8000db0:	2520      	movs	r5, #32
 8000db2:	40d4      	lsrs	r4, r2
 8000db4:	1aaa      	subs	r2, r5, r2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	4193      	sbcs	r3, r2
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	0005      	movs	r5, r0
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	4688      	mov	r8, r1
 8000dc6:	e738      	b.n	8000c3a <__aeabi_fsub+0x56>
 8000dc8:	1c72      	adds	r2, r6, #1
 8000dca:	d0f8      	beq.n	8000dbe <__aeabi_fsub+0x1da>
 8000dcc:	43f2      	mvns	r2, r6
 8000dce:	28ff      	cmp	r0, #255	; 0xff
 8000dd0:	d1ea      	bne.n	8000da8 <__aeabi_fsub+0x1c4>
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	25ff      	movs	r5, #255	; 0xff
 8000dd8:	e7d7      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	0a5b      	lsrs	r3, r3, #9
 8000dde:	e75a      	b.n	8000c96 <__aeabi_fsub+0xb2>
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d141      	bne.n	8000e68 <__aeabi_fsub+0x284>
 8000de4:	1c65      	adds	r5, r4, #1
 8000de6:	b2e9      	uxtb	r1, r5
 8000de8:	2901      	cmp	r1, #1
 8000dea:	dd45      	ble.n	8000e78 <__aeabi_fsub+0x294>
 8000dec:	2dff      	cmp	r5, #255	; 0xff
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x20e>
 8000df0:	e74f      	b.n	8000c92 <__aeabi_fsub+0xae>
 8000df2:	2407      	movs	r4, #7
 8000df4:	444b      	add	r3, r9
 8000df6:	085b      	lsrs	r3, r3, #1
 8000df8:	401c      	ands	r4, r3
 8000dfa:	e738      	b.n	8000c6e <__aeabi_fsub+0x8a>
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <__aeabi_fsub+0x384>)
 8000e00:	1a2d      	subs	r5, r5, r0
 8000e02:	4023      	ands	r3, r4
 8000e04:	4014      	ands	r4, r2
 8000e06:	e732      	b.n	8000c6e <__aeabi_fsub+0x8a>
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d11d      	bne.n	8000e48 <__aeabi_fsub+0x264>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d17a      	bne.n	8000f06 <__aeabi_fsub+0x322>
 8000e10:	464b      	mov	r3, r9
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x234>
 8000e16:	e091      	b.n	8000f3c <__aeabi_fsub+0x358>
 8000e18:	000a      	movs	r2, r1
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	e7b5      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000e1e:	3e01      	subs	r6, #1
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d119      	bne.n	8000e58 <__aeabi_fsub+0x274>
 8000e24:	444b      	add	r3, r9
 8000e26:	e76c      	b.n	8000d02 <__aeabi_fsub+0x11e>
 8000e28:	2cff      	cmp	r4, #255	; 0xff
 8000e2a:	d184      	bne.n	8000d36 <__aeabi_fsub+0x152>
 8000e2c:	25ff      	movs	r5, #255	; 0xff
 8000e2e:	e7ac      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000e30:	464a      	mov	r2, r9
 8000e32:	4688      	mov	r8, r1
 8000e34:	1ad4      	subs	r4, r2, r3
 8000e36:	e705      	b.n	8000c44 <__aeabi_fsub+0x60>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1c5      	bne.n	8000dc8 <__aeabi_fsub+0x1e4>
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	28ff      	cmp	r0, #255	; 0xff
 8000e40:	d0c8      	beq.n	8000dd4 <__aeabi_fsub+0x1f0>
 8000e42:	0005      	movs	r5, r0
 8000e44:	464b      	mov	r3, r9
 8000e46:	e7a0      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d149      	bne.n	8000ee0 <__aeabi_fsub+0x2fc>
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d077      	beq.n	8000f42 <__aeabi_fsub+0x35e>
 8000e52:	000a      	movs	r2, r1
 8000e54:	25ff      	movs	r5, #255	; 0xff
 8000e56:	e798      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000e58:	2cff      	cmp	r4, #255	; 0xff
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_fsub+0x27a>
 8000e5c:	e743      	b.n	8000ce6 <__aeabi_fsub+0x102>
 8000e5e:	e787      	b.n	8000d70 <__aeabi_fsub+0x18c>
 8000e60:	000a      	movs	r2, r1
 8000e62:	24ff      	movs	r4, #255	; 0xff
 8000e64:	2300      	movs	r3, #0
 8000e66:	e716      	b.n	8000c96 <__aeabi_fsub+0xb2>
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d115      	bne.n	8000e98 <__aeabi_fsub+0x2b4>
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d157      	bne.n	8000f20 <__aeabi_fsub+0x33c>
 8000e70:	28ff      	cmp	r0, #255	; 0xff
 8000e72:	d1e6      	bne.n	8000e42 <__aeabi_fsub+0x25e>
 8000e74:	464b      	mov	r3, r9
 8000e76:	e77b      	b.n	8000d70 <__aeabi_fsub+0x18c>
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d120      	bne.n	8000ebe <__aeabi_fsub+0x2da>
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d057      	beq.n	8000f30 <__aeabi_fsub+0x34c>
 8000e80:	4649      	mov	r1, r9
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d053      	beq.n	8000f2e <__aeabi_fsub+0x34a>
 8000e86:	444b      	add	r3, r9
 8000e88:	015a      	lsls	r2, r3, #5
 8000e8a:	d568      	bpl.n	8000f5e <__aeabi_fsub+0x37a>
 8000e8c:	2407      	movs	r4, #7
 8000e8e:	4a36      	ldr	r2, [pc, #216]	; (8000f68 <__aeabi_fsub+0x384>)
 8000e90:	401c      	ands	r4, r3
 8000e92:	2501      	movs	r5, #1
 8000e94:	4013      	ands	r3, r2
 8000e96:	e6ea      	b.n	8000c6e <__aeabi_fsub+0x8a>
 8000e98:	28ff      	cmp	r0, #255	; 0xff
 8000e9a:	d0eb      	beq.n	8000e74 <__aeabi_fsub+0x290>
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	04d2      	lsls	r2, r2, #19
 8000ea0:	4276      	negs	r6, r6
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	2e1b      	cmp	r6, #27
 8000ea6:	dc53      	bgt.n	8000f50 <__aeabi_fsub+0x36c>
 8000ea8:	2520      	movs	r5, #32
 8000eaa:	1bad      	subs	r5, r5, r6
 8000eac:	001a      	movs	r2, r3
 8000eae:	40ab      	lsls	r3, r5
 8000eb0:	40f2      	lsrs	r2, r6
 8000eb2:	1e5c      	subs	r4, r3, #1
 8000eb4:	41a3      	sbcs	r3, r4
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	444b      	add	r3, r9
 8000eba:	0005      	movs	r5, r0
 8000ebc:	e721      	b.n	8000d02 <__aeabi_fsub+0x11e>
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0d8      	beq.n	8000e74 <__aeabi_fsub+0x290>
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x2e6>
 8000ec8:	e752      	b.n	8000d70 <__aeabi_fsub+0x18c>
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	03c9      	lsls	r1, r1, #15
 8000ece:	420f      	tst	r7, r1
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x2f0>
 8000ed2:	e74d      	b.n	8000d70 <__aeabi_fsub+0x18c>
 8000ed4:	4660      	mov	r0, ip
 8000ed6:	4208      	tst	r0, r1
 8000ed8:	d000      	beq.n	8000edc <__aeabi_fsub+0x2f8>
 8000eda:	e749      	b.n	8000d70 <__aeabi_fsub+0x18c>
 8000edc:	464b      	mov	r3, r9
 8000ede:	e747      	b.n	8000d70 <__aeabi_fsub+0x18c>
 8000ee0:	4648      	mov	r0, r9
 8000ee2:	25ff      	movs	r5, #255	; 0xff
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d100      	bne.n	8000eea <__aeabi_fsub+0x306>
 8000ee8:	e74f      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	03d2      	lsls	r2, r2, #15
 8000eee:	4217      	tst	r7, r2
 8000ef0:	d004      	beq.n	8000efc <__aeabi_fsub+0x318>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	4210      	tst	r0, r2
 8000ef6:	d101      	bne.n	8000efc <__aeabi_fsub+0x318>
 8000ef8:	464b      	mov	r3, r9
 8000efa:	4688      	mov	r8, r1
 8000efc:	2201      	movs	r2, #1
 8000efe:	4641      	mov	r1, r8
 8000f00:	25ff      	movs	r5, #255	; 0xff
 8000f02:	400a      	ands	r2, r1
 8000f04:	e741      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000f06:	4648      	mov	r0, r9
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	d01f      	beq.n	8000f4c <__aeabi_fsub+0x368>
 8000f0c:	1a1a      	subs	r2, r3, r0
 8000f0e:	0150      	lsls	r0, r2, #5
 8000f10:	d520      	bpl.n	8000f54 <__aeabi_fsub+0x370>
 8000f12:	464a      	mov	r2, r9
 8000f14:	2407      	movs	r4, #7
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	401c      	ands	r4, r3
 8000f1a:	4688      	mov	r8, r1
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	e6a6      	b.n	8000c6e <__aeabi_fsub+0x8a>
 8000f20:	1c74      	adds	r4, r6, #1
 8000f22:	d0c9      	beq.n	8000eb8 <__aeabi_fsub+0x2d4>
 8000f24:	43f6      	mvns	r6, r6
 8000f26:	28ff      	cmp	r0, #255	; 0xff
 8000f28:	d1bc      	bne.n	8000ea4 <__aeabi_fsub+0x2c0>
 8000f2a:	464b      	mov	r3, r9
 8000f2c:	e720      	b.n	8000d70 <__aeabi_fsub+0x18c>
 8000f2e:	4699      	mov	r9, r3
 8000f30:	464b      	mov	r3, r9
 8000f32:	2500      	movs	r5, #0
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	e72b      	b.n	8000d90 <__aeabi_fsub+0x1ac>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e740      	b.n	8000dbe <__aeabi_fsub+0x1da>
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e6a9      	b.n	8000c96 <__aeabi_fsub+0xb2>
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	2200      	movs	r2, #0
 8000f46:	03db      	lsls	r3, r3, #15
 8000f48:	24ff      	movs	r4, #255	; 0xff
 8000f4a:	e6a4      	b.n	8000c96 <__aeabi_fsub+0xb2>
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	e71c      	b.n	8000d8a <__aeabi_fsub+0x1a6>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e7b1      	b.n	8000eb8 <__aeabi_fsub+0x2d4>
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d0f1      	beq.n	8000f3c <__aeabi_fsub+0x358>
 8000f58:	0013      	movs	r3, r2
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	e6fc      	b.n	8000d58 <__aeabi_fsub+0x174>
 8000f5e:	2500      	movs	r5, #0
 8000f60:	e6fa      	b.n	8000d58 <__aeabi_fsub+0x174>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7dffffff 	.word	0x7dffffff
 8000f68:	fbffffff 	.word	0xfbffffff

08000f6c <__aeabi_f2iz>:
 8000f6c:	0241      	lsls	r1, r0, #9
 8000f6e:	0042      	lsls	r2, r0, #1
 8000f70:	0fc3      	lsrs	r3, r0, #31
 8000f72:	0a49      	lsrs	r1, r1, #9
 8000f74:	0e12      	lsrs	r2, r2, #24
 8000f76:	2000      	movs	r0, #0
 8000f78:	2a7e      	cmp	r2, #126	; 0x7e
 8000f7a:	d90d      	bls.n	8000f98 <__aeabi_f2iz+0x2c>
 8000f7c:	2a9d      	cmp	r2, #157	; 0x9d
 8000f7e:	d80c      	bhi.n	8000f9a <__aeabi_f2iz+0x2e>
 8000f80:	2080      	movs	r0, #128	; 0x80
 8000f82:	0400      	lsls	r0, r0, #16
 8000f84:	4301      	orrs	r1, r0
 8000f86:	2a95      	cmp	r2, #149	; 0x95
 8000f88:	dc0a      	bgt.n	8000fa0 <__aeabi_f2iz+0x34>
 8000f8a:	2096      	movs	r0, #150	; 0x96
 8000f8c:	1a82      	subs	r2, r0, r2
 8000f8e:	40d1      	lsrs	r1, r2
 8000f90:	4248      	negs	r0, r1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_f2iz+0x2c>
 8000f96:	0008      	movs	r0, r1
 8000f98:	4770      	bx	lr
 8000f9a:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <__aeabi_f2iz+0x3c>)
 8000f9c:	1898      	adds	r0, r3, r2
 8000f9e:	e7fb      	b.n	8000f98 <__aeabi_f2iz+0x2c>
 8000fa0:	3a96      	subs	r2, #150	; 0x96
 8000fa2:	4091      	lsls	r1, r2
 8000fa4:	e7f4      	b.n	8000f90 <__aeabi_f2iz+0x24>
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	7fffffff 	.word	0x7fffffff

08000fac <__aeabi_i2f>:
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d03d      	beq.n	800102e <__aeabi_i2f+0x82>
 8000fb2:	17c3      	asrs	r3, r0, #31
 8000fb4:	18c5      	adds	r5, r0, r3
 8000fb6:	405d      	eors	r5, r3
 8000fb8:	0fc4      	lsrs	r4, r0, #31
 8000fba:	0028      	movs	r0, r5
 8000fbc:	f000 f880 	bl	80010c0 <__clzsi2>
 8000fc0:	229e      	movs	r2, #158	; 0x9e
 8000fc2:	1a12      	subs	r2, r2, r0
 8000fc4:	2a96      	cmp	r2, #150	; 0x96
 8000fc6:	dc07      	bgt.n	8000fd8 <__aeabi_i2f+0x2c>
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	2808      	cmp	r0, #8
 8000fcc:	dd33      	ble.n	8001036 <__aeabi_i2f+0x8a>
 8000fce:	3808      	subs	r0, #8
 8000fd0:	4085      	lsls	r5, r0
 8000fd2:	0268      	lsls	r0, r5, #9
 8000fd4:	0a40      	lsrs	r0, r0, #9
 8000fd6:	e023      	b.n	8001020 <__aeabi_i2f+0x74>
 8000fd8:	2a99      	cmp	r2, #153	; 0x99
 8000fda:	dd0b      	ble.n	8000ff4 <__aeabi_i2f+0x48>
 8000fdc:	2305      	movs	r3, #5
 8000fde:	0029      	movs	r1, r5
 8000fe0:	1a1b      	subs	r3, r3, r0
 8000fe2:	40d9      	lsrs	r1, r3
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	331b      	adds	r3, #27
 8000fe8:	409d      	lsls	r5, r3
 8000fea:	002b      	movs	r3, r5
 8000fec:	1e5d      	subs	r5, r3, #1
 8000fee:	41ab      	sbcs	r3, r5
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	000d      	movs	r5, r1
 8000ff4:	2805      	cmp	r0, #5
 8000ff6:	dd01      	ble.n	8000ffc <__aeabi_i2f+0x50>
 8000ff8:	1f43      	subs	r3, r0, #5
 8000ffa:	409d      	lsls	r5, r3
 8000ffc:	002b      	movs	r3, r5
 8000ffe:	490f      	ldr	r1, [pc, #60]	; (800103c <__aeabi_i2f+0x90>)
 8001000:	400b      	ands	r3, r1
 8001002:	076e      	lsls	r6, r5, #29
 8001004:	d009      	beq.n	800101a <__aeabi_i2f+0x6e>
 8001006:	260f      	movs	r6, #15
 8001008:	4035      	ands	r5, r6
 800100a:	2d04      	cmp	r5, #4
 800100c:	d005      	beq.n	800101a <__aeabi_i2f+0x6e>
 800100e:	3304      	adds	r3, #4
 8001010:	015d      	lsls	r5, r3, #5
 8001012:	d502      	bpl.n	800101a <__aeabi_i2f+0x6e>
 8001014:	229f      	movs	r2, #159	; 0x9f
 8001016:	400b      	ands	r3, r1
 8001018:	1a12      	subs	r2, r2, r0
 800101a:	019b      	lsls	r3, r3, #6
 800101c:	0a58      	lsrs	r0, r3, #9
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	0240      	lsls	r0, r0, #9
 8001022:	05d2      	lsls	r2, r2, #23
 8001024:	0a40      	lsrs	r0, r0, #9
 8001026:	07e4      	lsls	r4, r4, #31
 8001028:	4310      	orrs	r0, r2
 800102a:	4320      	orrs	r0, r4
 800102c:	bd70      	pop	{r4, r5, r6, pc}
 800102e:	2400      	movs	r4, #0
 8001030:	2200      	movs	r2, #0
 8001032:	2000      	movs	r0, #0
 8001034:	e7f4      	b.n	8001020 <__aeabi_i2f+0x74>
 8001036:	0268      	lsls	r0, r5, #9
 8001038:	0a40      	lsrs	r0, r0, #9
 800103a:	e7f1      	b.n	8001020 <__aeabi_i2f+0x74>
 800103c:	fbffffff 	.word	0xfbffffff

08001040 <__aeabi_ui2f>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	1e04      	subs	r4, r0, #0
 8001044:	d034      	beq.n	80010b0 <__aeabi_ui2f+0x70>
 8001046:	f000 f83b 	bl	80010c0 <__clzsi2>
 800104a:	229e      	movs	r2, #158	; 0x9e
 800104c:	1a12      	subs	r2, r2, r0
 800104e:	2a96      	cmp	r2, #150	; 0x96
 8001050:	dc07      	bgt.n	8001062 <__aeabi_ui2f+0x22>
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	2808      	cmp	r0, #8
 8001056:	dd2e      	ble.n	80010b6 <__aeabi_ui2f+0x76>
 8001058:	3808      	subs	r0, #8
 800105a:	4084      	lsls	r4, r0
 800105c:	0260      	lsls	r0, r4, #9
 800105e:	0a40      	lsrs	r0, r0, #9
 8001060:	e021      	b.n	80010a6 <__aeabi_ui2f+0x66>
 8001062:	2a99      	cmp	r2, #153	; 0x99
 8001064:	dd09      	ble.n	800107a <__aeabi_ui2f+0x3a>
 8001066:	0003      	movs	r3, r0
 8001068:	0021      	movs	r1, r4
 800106a:	331b      	adds	r3, #27
 800106c:	4099      	lsls	r1, r3
 800106e:	1e4b      	subs	r3, r1, #1
 8001070:	4199      	sbcs	r1, r3
 8001072:	2305      	movs	r3, #5
 8001074:	1a1b      	subs	r3, r3, r0
 8001076:	40dc      	lsrs	r4, r3
 8001078:	430c      	orrs	r4, r1
 800107a:	2805      	cmp	r0, #5
 800107c:	dd01      	ble.n	8001082 <__aeabi_ui2f+0x42>
 800107e:	1f43      	subs	r3, r0, #5
 8001080:	409c      	lsls	r4, r3
 8001082:	0023      	movs	r3, r4
 8001084:	490d      	ldr	r1, [pc, #52]	; (80010bc <__aeabi_ui2f+0x7c>)
 8001086:	400b      	ands	r3, r1
 8001088:	0765      	lsls	r5, r4, #29
 800108a:	d009      	beq.n	80010a0 <__aeabi_ui2f+0x60>
 800108c:	250f      	movs	r5, #15
 800108e:	402c      	ands	r4, r5
 8001090:	2c04      	cmp	r4, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_ui2f+0x60>
 8001094:	3304      	adds	r3, #4
 8001096:	015c      	lsls	r4, r3, #5
 8001098:	d502      	bpl.n	80010a0 <__aeabi_ui2f+0x60>
 800109a:	229f      	movs	r2, #159	; 0x9f
 800109c:	400b      	ands	r3, r1
 800109e:	1a12      	subs	r2, r2, r0
 80010a0:	019b      	lsls	r3, r3, #6
 80010a2:	0a58      	lsrs	r0, r3, #9
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	0240      	lsls	r0, r0, #9
 80010a8:	05d2      	lsls	r2, r2, #23
 80010aa:	0a40      	lsrs	r0, r0, #9
 80010ac:	4310      	orrs	r0, r2
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
 80010b0:	2200      	movs	r2, #0
 80010b2:	2000      	movs	r0, #0
 80010b4:	e7f7      	b.n	80010a6 <__aeabi_ui2f+0x66>
 80010b6:	0260      	lsls	r0, r4, #9
 80010b8:	0a40      	lsrs	r0, r0, #9
 80010ba:	e7f4      	b.n	80010a6 <__aeabi_ui2f+0x66>
 80010bc:	fbffffff 	.word	0xfbffffff

080010c0 <__clzsi2>:
 80010c0:	211c      	movs	r1, #28
 80010c2:	2301      	movs	r3, #1
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	4298      	cmp	r0, r3
 80010c8:	d301      	bcc.n	80010ce <__clzsi2+0xe>
 80010ca:	0c00      	lsrs	r0, r0, #16
 80010cc:	3910      	subs	r1, #16
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	4298      	cmp	r0, r3
 80010d2:	d301      	bcc.n	80010d8 <__clzsi2+0x18>
 80010d4:	0a00      	lsrs	r0, r0, #8
 80010d6:	3908      	subs	r1, #8
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	4298      	cmp	r0, r3
 80010dc:	d301      	bcc.n	80010e2 <__clzsi2+0x22>
 80010de:	0900      	lsrs	r0, r0, #4
 80010e0:	3904      	subs	r1, #4
 80010e2:	a202      	add	r2, pc, #8	; (adr r2, 80010ec <__clzsi2+0x2c>)
 80010e4:	5c10      	ldrb	r0, [r2, r0]
 80010e6:	1840      	adds	r0, r0, r1
 80010e8:	4770      	bx	lr
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	02020304 	.word	0x02020304
 80010f0:	01010101 	.word	0x01010101
	...

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fe:	2410      	movs	r4, #16
{
 8001100:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	a80c      	add	r0, sp, #48	; 0x30
 8001108:	f003 fec1 	bl	8004e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	0022      	movs	r2, r4
 800110e:	2100      	movs	r1, #0
 8001110:	a801      	add	r0, sp, #4
 8001112:	f003 febc 	bl	8004e8e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001116:	2218      	movs	r2, #24
 8001118:	2100      	movs	r1, #0
 800111a:	a805      	add	r0, sp, #20
 800111c:	f003 feb7 	bl	8004e8e <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001122:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001126:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800112a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800112e:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001130:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f001 ff7b 	bl	800302c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800113c:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800113e:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001140:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001142:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001146:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001148:	f002 fa02 	bl	8003550 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SystemClock_Config+0x64>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114e:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8001150:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001152:	9408      	str	r4, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001154:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001156:	f002 fa87 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800115a:	b019      	add	sp, #100	; 0x64
 800115c:	bd30      	pop	{r4, r5, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	00020020 	.word	0x00020020

08001164 <main>:
{
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001168:	f000 fc06 	bl	8001978 <HAL_Init>
  SystemClock_Config();
 800116c:	f7ff ffc6 	bl	80010fc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	2214      	movs	r2, #20
 8001172:	2100      	movs	r1, #0
 8001174:	a809      	add	r0, sp, #36	; 0x24
 8001176:	f003 fe8a 	bl	8004e8e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	4ca0      	ldr	r4, [pc, #640]	; (8001400 <main+0x29c>)
 800117e:	03c9      	lsls	r1, r1, #15
 8001180:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001182:	48a0      	ldr	r0, [pc, #640]	; (8001404 <main+0x2a0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001184:	430a      	orrs	r2, r1
 8001186:	6162      	str	r2, [r4, #20]
 8001188:	6963      	ldr	r3, [r4, #20]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800118c:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001190:	9306      	str	r3, [sp, #24]
 8001192:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	6962      	ldr	r2, [r4, #20]
 8001196:	0289      	lsls	r1, r1, #10
 8001198:	430a      	orrs	r2, r1
 800119a:	6162      	str	r2, [r4, #20]
 800119c:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	9307      	str	r3, [sp, #28]
 80011a6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	6962      	ldr	r2, [r4, #20]
 80011aa:	02c9      	lsls	r1, r1, #11
 80011ac:	430a      	orrs	r2, r1
 80011ae:	6162      	str	r2, [r4, #20]
 80011b0:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	400b      	ands	r3, r1
 80011b6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011b8:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011bc:	f001 f8d8 	bl	8002370 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 80011c0:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011c2:	a909      	add	r1, sp, #36	; 0x24
 80011c4:	488f      	ldr	r0, [pc, #572]	; (8001404 <main+0x2a0>)
  GPIO_InitStruct.Pin = LED_Pin;
 80011c6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f001 f825 	bl	800221c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011d4:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	433b      	orrs	r3, r7
 80011d8:	6163      	str	r3, [r4, #20]
 80011da:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011dc:	0029      	movs	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	403b      	ands	r3, r7
 80011e0:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011e2:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e4:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011e6:	f000 fef3 	bl	8001fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011ea:	2009      	movs	r0, #9
 80011ec:	f000 ff1a 	bl	8002024 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f0:	220c      	movs	r2, #12
 80011f2:	0029      	movs	r1, r5
 80011f4:	a809      	add	r0, sp, #36	; 0x24
 80011f6:	f003 fe4a 	bl	8004e8e <memset>
  hadc.Instance = ADC1;
 80011fa:	4c83      	ldr	r4, [pc, #524]	; (8001408 <main+0x2a4>)
 80011fc:	4b83      	ldr	r3, [pc, #524]	; (800140c <main+0x2a8>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011fe:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8001200:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	2304      	movs	r3, #4
 8001204:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001206:	23c2      	movs	r3, #194	; 0xc2
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800120c:	1d63      	adds	r3, r4, #5
 800120e:	77dd      	strb	r5, [r3, #31]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001210:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001214:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001216:	6127      	str	r7, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001218:	7625      	strb	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800121a:	7665      	strb	r5, [r4, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800121c:	76a7      	strb	r7, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800121e:	76e5      	strb	r5, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001220:	6225      	str	r5, [r4, #32]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	62a7      	str	r7, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001224:	f000 fc8c 	bl	8001b40 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800122e:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001230:	a909      	add	r1, sp, #36	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001232:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001234:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001236:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Channel = ADC_CHANNEL_0;
 8001238:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800123a:	f000 fdf5 	bl	8001e28 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 800123e:	4e74      	ldr	r6, [pc, #464]	; (8001410 <main+0x2ac>)
 8001240:	4b74      	ldr	r3, [pc, #464]	; (8001414 <main+0x2b0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001242:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8001244:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001246:	4b74      	ldr	r3, [pc, #464]	; (8001418 <main+0x2b4>)
  hi2c1.Init.OwnAddress1 = 0;
 8001248:	60b5      	str	r5, [r6, #8]
  hi2c1.Init.Timing = 0x2000090E;
 800124a:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124e:	6135      	str	r5, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001250:	6175      	str	r5, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001252:	61b5      	str	r5, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001254:	61f5      	str	r5, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	6235      	str	r5, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001258:	f001 f9a2 	bl	80025a0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125c:	0029      	movs	r1, r5
 800125e:	0030      	movs	r0, r6
 8001260:	f001 faaa 	bl	80027b8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001264:	0029      	movs	r1, r5
 8001266:	0030      	movs	r0, r6
 8001268:	f001 facc 	bl	8002804 <HAL_I2CEx_ConfigDigitalFilter>
  MX_USB_DEVICE_Init();
 800126c:	f003 fb9e 	bl	80049ac <MX_USB_DEVICE_Init>
  ssd1306_Init();
 8001270:	f000 fa66 	bl	8001740 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001274:	0028      	movs	r0, r5
 8001276:	f000 fa3b 	bl	80016f0 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800127a:	f000 fa47 	bl	800170c <ssd1306_UpdateScreen>
  ssd1306_SetCursor(5, 5);
 800127e:	2105      	movs	r1, #5
 8001280:	0008      	movs	r0, r1
 8001282:	f000 fb4f 	bl	8001924 <ssd1306_SetCursor>
  sprintf(dispBuffer, "RF Power meter");
 8001286:	4e65      	ldr	r6, [pc, #404]	; (800141c <main+0x2b8>)
 8001288:	4965      	ldr	r1, [pc, #404]	; (8001420 <main+0x2bc>)
 800128a:	0030      	movs	r0, r6
 800128c:	f003 fe28 	bl	8004ee0 <strcpy>
  ssd1306_WriteString(dispBuffer, Font_7x10, White);
 8001290:	4a64      	ldr	r2, [pc, #400]	; (8001424 <main+0x2c0>)
 8001292:	003b      	movs	r3, r7
 8001294:	6811      	ldr	r1, [r2, #0]
 8001296:	0030      	movs	r0, r6
 8001298:	6852      	ldr	r2, [r2, #4]
 800129a:	f000 fb2f 	bl	80018fc <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800129e:	f000 fa35 	bl	800170c <ssd1306_UpdateScreen>
  ssd1306_SetCursor(80, 35);
 80012a2:	2123      	movs	r1, #35	; 0x23
 80012a4:	2050      	movs	r0, #80	; 0x50
 80012a6:	f000 fb3d 	bl	8001924 <ssd1306_SetCursor>
  sprintf(dispBuffer, "dBm");
 80012aa:	495f      	ldr	r1, [pc, #380]	; (8001428 <main+0x2c4>)
 80012ac:	0030      	movs	r0, r6
 80012ae:	f003 fe17 	bl	8004ee0 <strcpy>
  ssd1306_WriteString(dispBuffer, Font_11x18, White);
 80012b2:	4a5e      	ldr	r2, [pc, #376]	; (800142c <main+0x2c8>)
 80012b4:	003b      	movs	r3, r7
 80012b6:	6811      	ldr	r1, [r2, #0]
 80012b8:	0030      	movs	r0, r6
 80012ba:	6852      	ldr	r2, [r2, #4]
 80012bc:	f000 fb1e 	bl	80018fc <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80012c0:	f000 fa24 	bl	800170c <ssd1306_UpdateScreen>
  read_update=0;
 80012c4:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <main+0x2cc>)
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK){
 80012c6:	0020      	movs	r0, r4
  read_update=0;
 80012c8:	801d      	strh	r5, [r3, #0]
  avgValue=0;
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <main+0x2d0>)
 80012cc:	801d      	strh	r5, [r3, #0]
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK){
 80012ce:	f000 fe2b 	bl	8001f28 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcBuffer, ADC_BUFFER_SIZE);
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	4958      	ldr	r1, [pc, #352]	; (8001438 <main+0x2d4>)
 80012d6:	0020      	movs	r0, r4
 80012d8:	f000 fcd8 	bl	8001c8c <HAL_ADC_Start_DMA>
	  if(read_update==1)
 80012dc:	4b54      	ldr	r3, [pc, #336]	; (8001430 <main+0x2cc>)
 80012de:	881a      	ldrh	r2, [r3, #0]
 80012e0:	2a01      	cmp	r2, #1
 80012e2:	d000      	beq.n	80012e6 <main+0x182>
 80012e4:	e088      	b.n	80013f8 <main+0x294>
		  read_update=0;
 80012e6:	2200      	movs	r2, #0
		  for (int i=2;i<ADC_BUFFER_SIZE;i++)
 80012e8:	2502      	movs	r5, #2
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012ea:	2102      	movs	r1, #2
 80012ec:	4845      	ldr	r0, [pc, #276]	; (8001404 <main+0x2a0>)
		  read_update=0;
 80012ee:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012f0:	f001 f844 	bl	800237c <HAL_GPIO_TogglePin>
		  avgValue=adcBuffer[1];
 80012f4:	4b50      	ldr	r3, [pc, #320]	; (8001438 <main+0x2d4>)
 80012f6:	885e      	ldrh	r6, [r3, #2]
			  avgValue = avgValue - avgValue/i + adcBuffer[i]/i; // Ayman's signature equation
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <main+0x2d4>)
 80012fa:	006b      	lsls	r3, r5, #1
 80012fc:	0029      	movs	r1, r5
 80012fe:	5ad0      	ldrh	r0, [r2, r3]
 8001300:	f7fe ffa0 	bl	8000244 <__divsi3>
 8001304:	0029      	movs	r1, r5
 8001306:	0007      	movs	r7, r0
 8001308:	0030      	movs	r0, r6
 800130a:	f7fe ff9b 	bl	8000244 <__divsi3>
 800130e:	1a3f      	subs	r7, r7, r0
 8001310:	19f6      	adds	r6, r6, r7
		  for (int i=2;i<ADC_BUFFER_SIZE;i++)
 8001312:	3501      	adds	r5, #1
			  avgValue = avgValue - avgValue/i + adcBuffer[i]/i; // Ayman's signature equation
 8001314:	b2b6      	uxth	r6, r6
		  for (int i=2;i<ADC_BUFFER_SIZE;i++)
 8001316:	2d40      	cmp	r5, #64	; 0x40
 8001318:	d1ee      	bne.n	80012f8 <main+0x194>
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <main+0x2d0>)
		  p_in_V = (float)avgValue* 0.0008f; // convert to voltage
 800131c:	0030      	movs	r0, r6
 800131e:	801e      	strh	r6, [r3, #0]
 8001320:	f7ff fe8e 	bl	8001040 <__aeabi_ui2f>
 8001324:	4945      	ldr	r1, [pc, #276]	; (800143c <main+0x2d8>)
 8001326:	f7ff fb2b 	bl	8000980 <__aeabi_fmul>
		  p_in_dB = p_in_V * (-49.632f) + 12.777f; // convert to dB
 800132a:	4945      	ldr	r1, [pc, #276]	; (8001440 <main+0x2dc>)
 800132c:	f7ff fb28 	bl	8000980 <__aeabi_fmul>
 8001330:	4944      	ldr	r1, [pc, #272]	; (8001444 <main+0x2e0>)
 8001332:	f7ff f8c5 	bl	80004c0 <__aeabi_fadd>
 8001336:	1c05      	adds	r5, r0, #0
		  int ipart = (int)p_in_dB;
 8001338:	f7ff fe18 	bl	8000f6c <__aeabi_f2iz>
 800133c:	0007      	movs	r7, r0
		  float fpart = (p_in_dB - (float)ipart)*10.0;
 800133e:	f7ff fe35 	bl	8000fac <__aeabi_i2f>
 8001342:	1c01      	adds	r1, r0, #0
 8001344:	1c28      	adds	r0, r5, #0
 8001346:	f7ff fc4d 	bl	8000be4 <__aeabi_fsub>
 800134a:	493f      	ldr	r1, [pc, #252]	; (8001448 <main+0x2e4>)
 800134c:	f7ff fb18 	bl	8000980 <__aeabi_fmul>
		  ssd1306_SetCursor(15, 35);
 8001350:	2123      	movs	r1, #35	; 0x23
		  float fpart = (p_in_dB - (float)ipart)*10.0;
 8001352:	1c06      	adds	r6, r0, #0
		  ssd1306_SetCursor(15, 35);
 8001354:	200f      	movs	r0, #15
 8001356:	f000 fae5 	bl	8001924 <ssd1306_SetCursor>
		  sprintf(dispBuffer, "     ");
 800135a:	4d30      	ldr	r5, [pc, #192]	; (800141c <main+0x2b8>)
 800135c:	493b      	ldr	r1, [pc, #236]	; (800144c <main+0x2e8>)
 800135e:	0028      	movs	r0, r5
 8001360:	f003 fdbe 	bl	8004ee0 <strcpy>
		  ssd1306_WriteString(dispBuffer, Font_11x18, White);
 8001364:	4a31      	ldr	r2, [pc, #196]	; (800142c <main+0x2c8>)
 8001366:	2301      	movs	r3, #1
 8001368:	6811      	ldr	r1, [r2, #0]
 800136a:	0028      	movs	r0, r5
 800136c:	6852      	ldr	r2, [r2, #4]
 800136e:	f000 fac5 	bl	80018fc <ssd1306_WriteString>
		  ssd1306_SetCursor(15, 35);
 8001372:	2123      	movs	r1, #35	; 0x23
 8001374:	200f      	movs	r0, #15
 8001376:	f000 fad5 	bl	8001924 <ssd1306_SetCursor>
		  sprintf(dispBuffer, "%c%2d.%d",
 800137a:	2320      	movs	r3, #32
 800137c:	9303      	str	r3, [sp, #12]
 800137e:	2f00      	cmp	r7, #0
 8001380:	da01      	bge.n	8001386 <main+0x222>
 8001382:	330d      	adds	r3, #13
 8001384:	9303      	str	r3, [sp, #12]
 8001386:	17fb      	asrs	r3, r7, #31
 8001388:	18ff      	adds	r7, r7, r3
 800138a:	2100      	movs	r1, #0
 800138c:	1c30      	adds	r0, r6, #0
 800138e:	405f      	eors	r7, r3
 8001390:	f7ff f856 	bl	8000440 <__aeabi_fcmplt>
 8001394:	2800      	cmp	r0, #0
 8001396:	d031      	beq.n	80013fc <main+0x298>
				  (char)((fpart<0)?(fpart*-1):fpart));
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	061b      	lsls	r3, r3, #24
 800139c:	18f0      	adds	r0, r6, r3
 800139e:	f7ff f877 	bl	8000490 <__aeabi_f2uiz>
		  sprintf(dispBuffer, "%c%2d.%d",
 80013a2:	b2c6      	uxtb	r6, r0
 80013a4:	003b      	movs	r3, r7
 80013a6:	9a03      	ldr	r2, [sp, #12]
 80013a8:	4929      	ldr	r1, [pc, #164]	; (8001450 <main+0x2ec>)
 80013aa:	9600      	str	r6, [sp, #0]
 80013ac:	0028      	movs	r0, r5
 80013ae:	f003 fd77 	bl	8004ea0 <siprintf>
		  ssd1306_WriteString(dispBuffer, Font_11x18, White);
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <main+0x2c8>)
 80013b4:	2301      	movs	r3, #1
 80013b6:	6811      	ldr	r1, [r2, #0]
 80013b8:	0028      	movs	r0, r5
 80013ba:	6852      	ldr	r2, [r2, #4]
 80013bc:	f000 fa9e 	bl	80018fc <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80013c0:	f000 f9a4 	bl	800170c <ssd1306_UpdateScreen>
		  memset(dispBuffer,0, sizeof(dispBuffer));
 80013c4:	2212      	movs	r2, #18
 80013c6:	2100      	movs	r1, #0
 80013c8:	0028      	movs	r0, r5
 80013ca:	f003 fd60 	bl	8004e8e <memset>
		  sprintf(dispBuffer, "%c%2d.%d\n",
 80013ce:	003b      	movs	r3, r7
 80013d0:	9a03      	ldr	r2, [sp, #12]
 80013d2:	4920      	ldr	r1, [pc, #128]	; (8001454 <main+0x2f0>)
 80013d4:	9600      	str	r6, [sp, #0]
 80013d6:	0028      	movs	r0, r5
 80013d8:	f003 fd62 	bl	8004ea0 <siprintf>
		  CDC_Transmit_FS((uint8_t*)dispBuffer, sizeof(dispBuffer));
 80013dc:	2112      	movs	r1, #18
 80013de:	0028      	movs	r0, r5
 80013e0:	f003 fb36 	bl	8004a50 <CDC_Transmit_FS>
		  memset(dispBuffer,0, sizeof(dispBuffer));
 80013e4:	2212      	movs	r2, #18
 80013e6:	2100      	movs	r1, #0
 80013e8:	0028      	movs	r0, r5
 80013ea:	f003 fd50 	bl	8004e8e <memset>
		  HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcBuffer, ADC_BUFFER_SIZE);
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	4911      	ldr	r1, [pc, #68]	; (8001438 <main+0x2d4>)
 80013f2:	0020      	movs	r0, r4
 80013f4:	f000 fc4a 	bl	8001c8c <HAL_ADC_Start_DMA>
	 __NOP();
 80013f8:	46c0      	nop			; (mov r8, r8)
	  if(read_update==1)
 80013fa:	e76f      	b.n	80012dc <main+0x178>
				  (char)((fpart<0)?(fpart*-1):fpart));
 80013fc:	1c30      	adds	r0, r6, #0
 80013fe:	e7ce      	b.n	800139e <main+0x23a>
 8001400:	40021000 	.word	0x40021000
 8001404:	48000400 	.word	0x48000400
 8001408:	2000096c 	.word	0x2000096c
 800140c:	40012400 	.word	0x40012400
 8001410:	200008c8 	.word	0x200008c8
 8001414:	40005400 	.word	0x40005400
 8001418:	2000090e 	.word	0x2000090e
 800141c:	20000914 	.word	0x20000914
 8001420:	08005724 	.word	0x08005724
 8001424:	2000000c 	.word	0x2000000c
 8001428:	08005733 	.word	0x08005733
 800142c:	20000004 	.word	0x20000004
 8001430:	200008c4 	.word	0x200008c4
 8001434:	2000028c 	.word	0x2000028c
 8001438:	2000020c 	.word	0x2000020c
 800143c:	3a51b717 	.word	0x3a51b717
 8001440:	c246872b 	.word	0xc246872b
 8001444:	414c6e98 	.word	0x414c6e98
 8001448:	41200000 	.word	0x41200000
 800144c:	08005737 	.word	0x08005737
 8001450:	0800573d 	.word	0x0800573d
 8001454:	08005746 	.word	0x08005746

08001458 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001458:	b510      	push	{r4, lr}
	HAL_ADC_Stop_DMA(hadc);
 800145a:	f000 fc61 	bl	8001d20 <HAL_ADC_Stop_DMA>
	read_update=1;
 800145e:	2201      	movs	r2, #1
 8001460:	4b01      	ldr	r3, [pc, #4]	; (8001468 <HAL_ADC_ConvCpltCallback+0x10>)
 8001462:	801a      	strh	r2, [r3, #0]
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}
 8001464:	bd10      	pop	{r4, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	200008c4 	.word	0x200008c4

0800146c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800146c:	4770      	bx	lr
	...

08001470 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001470:	2001      	movs	r0, #1
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_MspInit+0x34>)
{
 8001474:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	6999      	ldr	r1, [r3, #24]
 8001478:	4301      	orrs	r1, r0
 800147a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4002      	ands	r2, r0
 8001484:	9200      	str	r2, [sp, #0]
 8001486:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	430a      	orrs	r2, r1
 800148c:	61da      	str	r2, [r3, #28]
 800148e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	400b      	ands	r3, r1
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8001498:	2310      	movs	r3, #16
 800149a:	6811      	ldr	r1, [r2, #0]
 800149c:	430b      	orrs	r3, r1
 800149e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a0:	b002      	add	sp, #8
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ac:	b530      	push	{r4, r5, lr}
 80014ae:	0005      	movs	r5, r0
 80014b0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	2214      	movs	r2, #20
 80014b4:	2100      	movs	r1, #0
 80014b6:	a803      	add	r0, sp, #12
 80014b8:	f003 fce9 	bl	8004e8e <memset>
  if(hadc->Instance==ADC1)
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_ADC_MspInit+0x88>)
 80014be:	682a      	ldr	r2, [r5, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d134      	bne.n	800152e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c4:	2080      	movs	r0, #128	; 0x80
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_ADC_MspInit+0x8c>)
 80014c8:	0080      	lsls	r0, r0, #2
 80014ca:	6999      	ldr	r1, [r3, #24]
 80014cc:	4301      	orrs	r1, r0
 80014ce:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d6:	4002      	ands	r2, r0
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	695a      	ldr	r2, [r3, #20]
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	430a      	orrs	r2, r1
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	400b      	ands	r3, r1
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ee:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f4:	3302      	adds	r3, #2
 80014f6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f000 fe90 	bl	800221c <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80014fe:	4c0f      	ldr	r4, [pc, #60]	; (800153c <HAL_ADC_MspInit+0x90>)
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001504:	1892      	adds	r2, r2, r2
 8001506:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 800150c:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150e:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001510:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001512:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001514:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001516:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001518:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800151a:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800151c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800151e:	f000 fda7 	bl	8002070 <HAL_DMA_Init>
 8001522:	2800      	cmp	r0, #0
 8001524:	d001      	beq.n	800152a <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001526:	f7ff ffa1 	bl	800146c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800152a:	632c      	str	r4, [r5, #48]	; 0x30
 800152c:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800152e:	b009      	add	sp, #36	; 0x24
 8001530:	bd30      	pop	{r4, r5, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40012400 	.word	0x40012400
 8001538:	40021000 	.word	0x40021000
 800153c:	20000928 	.word	0x20000928
 8001540:	40020008 	.word	0x40020008

08001544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001544:	b510      	push	{r4, lr}
 8001546:	0004      	movs	r4, r0
 8001548:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	2214      	movs	r2, #20
 800154c:	2100      	movs	r1, #0
 800154e:	a803      	add	r0, sp, #12
 8001550:	f003 fc9d 	bl	8004e8e <memset>
  if(hi2c->Instance==I2C1)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_I2C_MspInit+0x5c>)
 8001556:	6822      	ldr	r2, [r4, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d11e      	bne.n	800159a <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	4c11      	ldr	r4, [pc, #68]	; (80015a4 <HAL_I2C_MspInit+0x60>)
 8001560:	03c9      	lsls	r1, r1, #15
 8001562:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001564:	4810      	ldr	r0, [pc, #64]	; (80015a8 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001566:	430a      	orrs	r2, r1
 8001568:	6162      	str	r2, [r4, #20]
 800156a:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800156c:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800156e:	400b      	ands	r3, r1
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001574:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001576:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	3b11      	subs	r3, #17
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800157c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001582:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001584:	f000 fe4a 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	69e2      	ldr	r2, [r4, #28]
 800158c:	0389      	lsls	r1, r1, #14
 800158e:	430a      	orrs	r2, r1
 8001590:	61e2      	str	r2, [r4, #28]
 8001592:	69e3      	ldr	r3, [r4, #28]
 8001594:	400b      	ands	r3, r1
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800159a:	b008      	add	sp, #32
 800159c:	bd10      	pop	{r4, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48001400 	.word	0x48001400

080015ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015ac:	4770      	bx	lr

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler>

080015b0 <SVC_Handler>:
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 f9ef 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bd10      	pop	{r4, pc}

080015bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80015be:	4802      	ldr	r0, [pc, #8]	; (80015c8 <DMA1_Channel1_IRQHandler+0xc>)
 80015c0:	f000 fde2 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000928 	.word	0x20000928

080015cc <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80015cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015ce:	4802      	ldr	r0, [pc, #8]	; (80015d8 <USB_IRQHandler+0xc>)
 80015d0:	f001 fa50 	bl	8002a74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	20000f3c 	.word	0x20000f3c

080015dc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <_sbrk+0x30>)
 80015de:	490c      	ldr	r1, [pc, #48]	; (8001610 <_sbrk+0x34>)
{
 80015e0:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e2:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <_sbrk+0x38>)
{
 80015e6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d101      	bne.n	80015f2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <_sbrk+0x3c>)
 80015f0:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	1882      	adds	r2, r0, r2
 80015f6:	428a      	cmp	r2, r1
 80015f8:	d906      	bls.n	8001608 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80015fa:	f003 fc15 	bl	8004e28 <__errno>
 80015fe:	230c      	movs	r3, #12
 8001600:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001602:	2001      	movs	r0, #1
 8001604:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001606:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001608:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800160a:	e7fc      	b.n	8001606 <_sbrk+0x2a>
 800160c:	00000100 	.word	0x00000100
 8001610:	20001800 	.word	0x20001800
 8001614:	20000290 	.word	0x20000290
 8001618:	200011b8 	.word	0x200011b8

0800161c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800161c:	4770      	bx	lr
	...

08001620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001622:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <LoopForever+0x6>)
    LDR R1, [R0]
 8001626:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001628:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <LoopForever+0xa>)
    CMP R1, R2
 800162c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800162e:	d105      	bne.n	800163c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001630:	4812      	ldr	r0, [pc, #72]	; (800167c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001632:	4913      	ldr	r1, [pc, #76]	; (8001680 <LoopForever+0x12>)
    STR R1, [R0]
 8001634:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001636:	4813      	ldr	r0, [pc, #76]	; (8001684 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001638:	4913      	ldr	r1, [pc, #76]	; (8001688 <LoopForever+0x1a>)
    STR R1, [R0]
 800163a:	6001      	str	r1, [r0, #0]

0800163c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <LoopForever+0x1e>)
  ldr r1, =_edata
 800163e:	4914      	ldr	r1, [pc, #80]	; (8001690 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <LoopForever+0x26>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001654:	4c11      	ldr	r4, [pc, #68]	; (800169c <LoopForever+0x2e>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001662:	f7ff ffdb 	bl	800161c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001666:	f003 fbe5 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166a:	f7ff fd7b 	bl	8001164 <main>

0800166e <LoopForever>:

LoopForever:
    b LoopForever
 800166e:	e7fe      	b.n	800166e <LoopForever>
  ldr   r0, =_estack
 8001670:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001674:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001678:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800167c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001680:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001684:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001688:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001694:	08006cac 	.word	0x08006cac
  ldr r2, =_sbss
 8001698:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800169c:	200011b4 	.word	0x200011b4

080016a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_IRQHandler>
	...

080016a4 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80016a6:	2217      	movs	r2, #23
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016a8:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte) {
 80016aa:	446a      	add	r2, sp
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016ac:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte) {
 80016ae:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	3302      	adds	r3, #2
 80016b4:	9200      	str	r2, [sp, #0]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	2178      	movs	r1, #120	; 0x78
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <ssd1306_WriteCommand+0x24>)
 80016be:	f000 ffc5 	bl	800264c <HAL_I2C_Mem_Write>
}
 80016c2:	b007      	add	sp, #28
 80016c4:	bd00      	pop	{pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	200008c8 	.word	0x200008c8

080016cc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80016cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80016ce:	2301      	movs	r3, #1
 80016d0:	b289      	uxth	r1, r1
 80016d2:	425b      	negs	r3, r3
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	9101      	str	r1, [sp, #4]
 80016d8:	9000      	str	r0, [sp, #0]
 80016da:	3302      	adds	r3, #2
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	2178      	movs	r1, #120	; 0x78
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <ssd1306_WriteData+0x20>)
 80016e2:	f000 ffb3 	bl	800264c <HAL_I2C_Mem_Write>
}
 80016e6:	b005      	add	sp, #20
 80016e8:	bd00      	pop	{pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	200008c8 	.word	0x200008c8

080016f0 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80016f0:	1e42      	subs	r2, r0, #1
 80016f2:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <ssd1306_Fill+0x18>)
 80016fa:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80016fc:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80016fe:	54c8      	strb	r0, [r1, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001700:	3301      	adds	r3, #1
 8001702:	4293      	cmp	r3, r2
 8001704:	d1fb      	bne.n	80016fe <ssd1306_Fill+0xe>
    }
}
 8001706:	4770      	bx	lr
 8001708:	2000029a 	.word	0x2000029a

0800170c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800170c:	b510      	push	{r4, lr}
 800170e:	2400      	movs	r4, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
        ssd1306_WriteCommand(0xB0 + i);
 8001710:	0020      	movs	r0, r4
 8001712:	3850      	subs	r0, #80	; 0x50
 8001714:	b2c0      	uxtb	r0, r0
 8001716:	f7ff ffc5 	bl	80016a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ffc2 	bl	80016a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001720:	2010      	movs	r0, #16
 8001722:	f7ff ffbf 	bl	80016a4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <ssd1306_UpdateScreen+0x30>)
 8001728:	01e0      	lsls	r0, r4, #7
 800172a:	18c0      	adds	r0, r0, r3
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	3401      	adds	r4, #1
 8001730:	f7ff ffcc 	bl	80016cc <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8001734:	2c08      	cmp	r4, #8
 8001736:	d1eb      	bne.n	8001710 <ssd1306_UpdateScreen+0x4>
    }
}
 8001738:	bd10      	pop	{r4, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	2000029a 	.word	0x2000029a

08001740 <ssd1306_Init>:
void ssd1306_Init(void) {
 8001740:	b510      	push	{r4, lr}
    HAL_Delay(100);
 8001742:	2064      	movs	r0, #100	; 0x64
 8001744:	f000 f93a 	bl	80019bc <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8001748:	20ae      	movs	r0, #174	; 0xae
 800174a:	f7ff ffab 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800174e:	2020      	movs	r0, #32
 8001750:	f7ff ffa8 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff ffa5 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800175a:	20b0      	movs	r0, #176	; 0xb0
 800175c:	f7ff ffa2 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001760:	20c8      	movs	r0, #200	; 0xc8
 8001762:	f7ff ff9f 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ff9c 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800176c:	2010      	movs	r0, #16
 800176e:	f7ff ff99 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001772:	2040      	movs	r0, #64	; 0x40
 8001774:	f7ff ff96 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001778:	2081      	movs	r0, #129	; 0x81
 800177a:	f7ff ff93 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 800177e:	20ff      	movs	r0, #255	; 0xff
 8001780:	f7ff ff90 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001784:	20a1      	movs	r0, #161	; 0xa1
 8001786:	f7ff ff8d 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 800178a:	20a6      	movs	r0, #166	; 0xa6
 800178c:	f7ff ff8a 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001790:	20a8      	movs	r0, #168	; 0xa8
 8001792:	f7ff ff87 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001796:	203f      	movs	r0, #63	; 0x3f
 8001798:	f7ff ff84 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800179c:	20a4      	movs	r0, #164	; 0xa4
 800179e:	f7ff ff81 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017a2:	20d3      	movs	r0, #211	; 0xd3
 80017a4:	f7ff ff7e 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ff7b 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017ae:	20d5      	movs	r0, #213	; 0xd5
 80017b0:	f7ff ff78 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017b4:	20f0      	movs	r0, #240	; 0xf0
 80017b6:	f7ff ff75 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017ba:	20d9      	movs	r0, #217	; 0xd9
 80017bc:	f7ff ff72 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017c0:	2022      	movs	r0, #34	; 0x22
 80017c2:	f7ff ff6f 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017c6:	20da      	movs	r0, #218	; 0xda
 80017c8:	f7ff ff6c 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80017cc:	2012      	movs	r0, #18
 80017ce:	f7ff ff69 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017d2:	20db      	movs	r0, #219	; 0xdb
 80017d4:	f7ff ff66 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017d8:	2020      	movs	r0, #32
 80017da:	f7ff ff63 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017de:	208d      	movs	r0, #141	; 0x8d
 80017e0:	f7ff ff60 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017e4:	2014      	movs	r0, #20
 80017e6:	f7ff ff5d 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80017ea:	20af      	movs	r0, #175	; 0xaf
 80017ec:	f7ff ff5a 	bl	80016a4 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff ff7d 	bl	80016f0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80017f6:	f7ff ff89 	bl	800170c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80017fa:	2200      	movs	r2, #0
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <ssd1306_Init+0xc8>)
 80017fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001800:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8001802:	3201      	adds	r2, #1
 8001804:	715a      	strb	r2, [r3, #5]
}
 8001806:	bd10      	pop	{r4, pc}
 8001808:	20000294 	.word	0x20000294

0800180c <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800180c:	b243      	sxtb	r3, r0
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800180e:	b570      	push	{r4, r5, r6, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001810:	2b00      	cmp	r3, #0
 8001812:	db16      	blt.n	8001842 <ssd1306_DrawPixel+0x36>
 8001814:	293f      	cmp	r1, #63	; 0x3f
 8001816:	d814      	bhi.n	8001842 <ssd1306_DrawPixel+0x36>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <ssd1306_DrawPixel+0x40>)
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <ssd1306_DrawPixel+0x1a>
        color = (SSD1306_COLOR)!color;
 8001820:	4253      	negs	r3, r2
 8001822:	415a      	adcs	r2, r3
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	2407      	movs	r4, #7
 8001828:	08cb      	lsrs	r3, r1, #3
 800182a:	400c      	ands	r4, r1
 800182c:	2101      	movs	r1, #1
 800182e:	40a1      	lsls	r1, r4
 8001830:	01db      	lsls	r3, r3, #7
 8001832:	4d07      	ldr	r5, [pc, #28]	; (8001850 <ssd1306_DrawPixel+0x44>)
 8001834:	1818      	adds	r0, r3, r0
 8001836:	562e      	ldrsb	r6, [r5, r0]
 8001838:	b24b      	sxtb	r3, r1
    }
    
    // Draw in the right color
    if(color == White) {
 800183a:	2a01      	cmp	r2, #1
 800183c:	d102      	bne.n	8001844 <ssd1306_DrawPixel+0x38>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800183e:	4333      	orrs	r3, r6
 8001840:	542b      	strb	r3, [r5, r0]
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 8001842:	bd70      	pop	{r4, r5, r6, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001844:	439e      	bics	r6, r3
 8001846:	542e      	strb	r6, [r5, r0]
 8001848:	e7fb      	b.n	8001842 <ssd1306_DrawPixel+0x36>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	20000294 	.word	0x20000294
 8001850:	2000029a 	.word	0x2000029a

08001854 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	9303      	str	r3, [sp, #12]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800185a:	0003      	movs	r3, r0
 800185c:	3b20      	subs	r3, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800185e:	9207      	str	r2, [sp, #28]
    if (ch < 32 || ch > 126)
 8001860:	b2da      	uxtb	r2, r3
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001862:	0005      	movs	r5, r0
 8001864:	9106      	str	r1, [sp, #24]
    if (ch < 32 || ch > 126)
 8001866:	2a5e      	cmp	r2, #94	; 0x5e
 8001868:	d843      	bhi.n	80018f2 <ssd1306_WriteChar+0x9e>
 800186a:	aa06      	add	r2, sp, #24
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	9201      	str	r2, [sp, #4]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <ssd1306_WriteChar+0xa4>)
 8001872:	9801      	ldr	r0, [sp, #4]
 8001874:	8811      	ldrh	r1, [r2, #0]
 8001876:	9100      	str	r1, [sp, #0]
 8001878:	1809      	adds	r1, r1, r0
 800187a:	2980      	cmp	r1, #128	; 0x80
 800187c:	dc39      	bgt.n	80018f2 <ssd1306_WriteChar+0x9e>
 800187e:	a906      	add	r1, sp, #24
 8001880:	7849      	ldrb	r1, [r1, #1]
 8001882:	9102      	str	r1, [sp, #8]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001884:	8854      	ldrh	r4, [r2, #2]
 8001886:	1862      	adds	r2, r4, r1
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001888:	2a40      	cmp	r2, #64	; 0x40
 800188a:	dc32      	bgt.n	80018f2 <ssd1306_WriteChar+0x9e>
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800188c:	000a      	movs	r2, r1
    for(i = 0; i < Font.FontHeight; i++) {
 800188e:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001890:	435a      	muls	r2, r3
 8001892:	b2e4      	uxtb	r4, r4
 8001894:	9204      	str	r2, [sp, #16]
    for(i = 0; i < Font.FontHeight; i++) {
 8001896:	9b02      	ldr	r3, [sp, #8]
 8001898:	42bb      	cmp	r3, r7
 800189a:	d808      	bhi.n	80018ae <ssd1306_WriteChar+0x5a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800189c:	9a01      	ldr	r2, [sp, #4]
 800189e:	9b00      	ldr	r3, [sp, #0]
 80018a0:	4694      	mov	ip, r2
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <ssd1306_WriteChar+0xa4>)
 80018a4:	4463      	add	r3, ip
 80018a6:	8013      	strh	r3, [r2, #0]
    
    // Return written char for validation
    return ch;
}
 80018a8:	0028      	movs	r0, r5
 80018aa:	b009      	add	sp, #36	; 0x24
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 80018ae:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80018b0:	9b04      	ldr	r3, [sp, #16]
 80018b2:	9a07      	ldr	r2, [sp, #28]
 80018b4:	19db      	adds	r3, r3, r7
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	5a9b      	ldrh	r3, [r3, r2]
 80018ba:	9305      	str	r3, [sp, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80018bc:	9b01      	ldr	r3, [sp, #4]
 80018be:	42b3      	cmp	r3, r6
 80018c0:	d803      	bhi.n	80018ca <ssd1306_WriteChar+0x76>
 80018c2:	3401      	adds	r4, #1
    for(i = 0; i < Font.FontHeight; i++) {
 80018c4:	3701      	adds	r7, #1
 80018c6:	b2e4      	uxtb	r4, r4
 80018c8:	e7e5      	b.n	8001896 <ssd1306_WriteChar+0x42>
 80018ca:	9b00      	ldr	r3, [sp, #0]
            if((b << j) & 0x8000)  {
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	18f0      	adds	r0, r6, r3
 80018d0:	9b05      	ldr	r3, [sp, #20]
 80018d2:	0212      	lsls	r2, r2, #8
 80018d4:	40b3      	lsls	r3, r6
 80018d6:	b2c0      	uxtb	r0, r0
 80018d8:	4213      	tst	r3, r2
 80018da:	d005      	beq.n	80018e8 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80018dc:	9a03      	ldr	r2, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018de:	0021      	movs	r1, r4
 80018e0:	f7ff ff94 	bl	800180c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80018e4:	3601      	adds	r6, #1
 80018e6:	e7e9      	b.n	80018bc <ssd1306_WriteChar+0x68>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018e8:	9a03      	ldr	r2, [sp, #12]
 80018ea:	4253      	negs	r3, r2
 80018ec:	415a      	adcs	r2, r3
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	e7f5      	b.n	80018de <ssd1306_WriteChar+0x8a>
        return 0;
 80018f2:	2500      	movs	r5, #0
 80018f4:	e7d8      	b.n	80018a8 <ssd1306_WriteChar+0x54>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	20000294 	.word	0x20000294

080018fc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80018fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018fe:	0004      	movs	r4, r0
 8001900:	001d      	movs	r5, r3
 8001902:	9100      	str	r1, [sp, #0]
 8001904:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 8001906:	7820      	ldrb	r0, [r4, #0]
 8001908:	2800      	cmp	r0, #0
 800190a:	d100      	bne.n	800190e <ssd1306_WriteString+0x12>
        str++;
    }
    
    // Everything ok
    return *str;
}
 800190c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800190e:	002b      	movs	r3, r5
 8001910:	9900      	ldr	r1, [sp, #0]
 8001912:	9a01      	ldr	r2, [sp, #4]
 8001914:	f7ff ff9e 	bl	8001854 <ssd1306_WriteChar>
 8001918:	0003      	movs	r3, r0
 800191a:	7820      	ldrb	r0, [r4, #0]
 800191c:	4283      	cmp	r3, r0
 800191e:	d1f5      	bne.n	800190c <ssd1306_WriteString+0x10>
        str++;
 8001920:	3401      	adds	r4, #1
 8001922:	e7f0      	b.n	8001906 <ssd1306_WriteString+0xa>

08001924 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8001924:	4b01      	ldr	r3, [pc, #4]	; (800192c <ssd1306_SetCursor+0x8>)
 8001926:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8001928:	8059      	strh	r1, [r3, #2]
}
 800192a:	4770      	bx	lr
 800192c:	20000294 	.word	0x20000294

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	20fa      	movs	r0, #250	; 0xfa
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_InitTick+0x3c>)
 8001938:	0080      	lsls	r0, r0, #2
 800193a:	7819      	ldrb	r1, [r3, #0]
 800193c:	f7fe fbf8 	bl	8000130 <__udivsi3>
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_InitTick+0x40>)
 8001942:	0001      	movs	r1, r0
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f7fe fbf3 	bl	8000130 <__udivsi3>
 800194a:	f000 fb77 	bl	800203c <HAL_SYSTICK_Config>
 800194e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001952:	2c00      	cmp	r4, #0
 8001954:	d109      	bne.n	800196a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	2d03      	cmp	r5, #3
 8001958:	d807      	bhi.n	800196a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195a:	3802      	subs	r0, #2
 800195c:	0022      	movs	r2, r4
 800195e:	0029      	movs	r1, r5
 8001960:	f000 fb36 	bl	8001fd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	0020      	movs	r0, r4
 8001966:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_InitTick+0x44>)
 8001968:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	20000014 	.word	0x20000014
 8001970:	20000000 	.word	0x20000000
 8001974:	20000018 	.word	0x20000018

08001978 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	2310      	movs	r3, #16
 800197a:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_Init+0x1c>)
{
 800197c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001980:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001982:	430b      	orrs	r3, r1
 8001984:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	f7ff ffd3 	bl	8001930 <HAL_InitTick>
  HAL_MspInit();
 800198a:	f7ff fd71 	bl	8001470 <HAL_MspInit>
}
 800198e:	2000      	movs	r0, #0
 8001990:	bd10      	pop	{r4, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001998:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_IncTick+0x10>)
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_IncTick+0x14>)
 800199c:	6811      	ldr	r1, [r2, #0]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	185b      	adds	r3, r3, r1
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	4770      	bx	lr
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	200009ac 	.word	0x200009ac
 80019ac:	20000014 	.word	0x20000014

080019b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <HAL_GetTick+0x8>)
 80019b2:	6818      	ldr	r0, [r3, #0]
}
 80019b4:	4770      	bx	lr
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	200009ac 	.word	0x200009ac

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fff6 	bl	80019b0 <HAL_GetTick>
 80019c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	1c63      	adds	r3, r4, #1
 80019c8:	d002      	beq.n	80019d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <HAL_Delay+0x20>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	1b40      	subs	r0, r0, r5
 80019d6:	42a0      	cmp	r0, r4
 80019d8:	d3fa      	bcc.n	80019d0 <HAL_Delay+0x14>
  {
  }
}
 80019da:	bd70      	pop	{r4, r5, r6, pc}
 80019dc:	20000014 	.word	0x20000014

080019e0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019e0:	2103      	movs	r1, #3
 80019e2:	6803      	ldr	r3, [r0, #0]
{
 80019e4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019e6:	689a      	ldr	r2, [r3, #8]
{
 80019e8:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019ea:	400a      	ands	r2, r1
 80019ec:	2a01      	cmp	r2, #1
 80019ee:	d001      	beq.n	80019f4 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019f0:	2000      	movs	r0, #0
}
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	4211      	tst	r1, r2
 80019f8:	d102      	bne.n	8001a00 <ADC_Disable+0x20>
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	0412      	lsls	r2, r2, #16
 80019fe:	d5f7      	bpl.n	80019f0 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a00:	2205      	movs	r2, #5
 8001a02:	689d      	ldr	r5, [r3, #8]
 8001a04:	4015      	ands	r5, r2
 8001a06:	2d01      	cmp	r5, #1
 8001a08:	d11a      	bne.n	8001a40 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	3a03      	subs	r2, #3
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	2203      	movs	r2, #3
 8001a14:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001a16:	f7ff ffcb 	bl	80019b0 <HAL_GetTick>
 8001a1a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	422b      	tst	r3, r5
 8001a22:	d0e5      	beq.n	80019f0 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a24:	f7ff ffc4 	bl	80019b0 <HAL_GetTick>
 8001a28:	1b80      	subs	r0, r0, r6
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d9f6      	bls.n	8001a1c <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	2310      	movs	r3, #16
 8001a30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	4313      	orrs	r3, r2
 8001a36:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a3a:	431d      	orrs	r5, r3
 8001a3c:	63e5      	str	r5, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001a3e:	e7d8      	b.n	80019f2 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a40:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a42:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a46:	4313      	orrs	r3, r2
 8001a48:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a4c:	4303      	orrs	r3, r0
 8001a4e:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001a50:	e7cf      	b.n	80019f2 <ADC_Disable+0x12>
	...

08001a54 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001a54:	2300      	movs	r3, #0
{
 8001a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001a5a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a5c:	6803      	ldr	r3, [r0, #0]
{
 8001a5e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	400a      	ands	r2, r1
 8001a64:	2a01      	cmp	r2, #1
 8001a66:	d107      	bne.n	8001a78 <ADC_Enable+0x24>
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	4211      	tst	r1, r2
 8001a6c:	d001      	beq.n	8001a72 <ADC_Enable+0x1e>
  return HAL_OK;
 8001a6e:	2000      	movs	r0, #0
}
 8001a70:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	0412      	lsls	r2, r2, #16
 8001a76:	d4fa      	bmi.n	8001a6e <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a78:	6899      	ldr	r1, [r3, #8]
 8001a7a:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <ADC_Enable+0x8c>)
 8001a7c:	4211      	tst	r1, r2
 8001a7e:	d008      	beq.n	8001a92 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a86:	4313      	orrs	r3, r2
 8001a88:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a8c:	4303      	orrs	r3, r0
 8001a8e:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001a90:	e7ee      	b.n	8001a70 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8001a92:	2201      	movs	r2, #1
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <ADC_Enable+0x90>)
 8001a9c:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <ADC_Enable+0x94>)
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	f7fe fb46 	bl	8000130 <__udivsi3>
 8001aa4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d115      	bne.n	8001ad8 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001aac:	f7ff ff80 	bl	80019b0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ab0:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8001ab2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	422b      	tst	r3, r5
 8001aba:	d1d8      	bne.n	8001a6e <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001abc:	f7ff ff78 	bl	80019b0 <HAL_GetTick>
 8001ac0:	1b80      	subs	r0, r0, r6
 8001ac2:	2802      	cmp	r0, #2
 8001ac4:	d9f6      	bls.n	8001ab4 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001acc:	4313      	orrs	r3, r2
 8001ace:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ad2:	432b      	orrs	r3, r5
 8001ad4:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001ad6:	e7cb      	b.n	8001a70 <ADC_Enable+0x1c>
      wait_loop_index--;
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	e7e2      	b.n	8001aa6 <ADC_Enable+0x52>
 8001ae0:	80000017 	.word	0x80000017
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	000f4240 	.word	0x000f4240

08001aec <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001aec:	2204      	movs	r2, #4
 8001aee:	6803      	ldr	r3, [r0, #0]
{
 8001af0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001af2:	6899      	ldr	r1, [r3, #8]
{
 8001af4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001af6:	4211      	tst	r1, r2
 8001af8:	d101      	bne.n	8001afe <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001afa:	2000      	movs	r0, #0
}
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001afe:	6899      	ldr	r1, [r3, #8]
 8001b00:	4211      	tst	r1, r2
 8001b02:	d006      	beq.n	8001b12 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001b04:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b06:	0792      	lsls	r2, r2, #30
 8001b08:	d403      	bmi.n	8001b12 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	6899      	ldr	r1, [r3, #8]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001b12:	f7ff ff4d 	bl	80019b0 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b16:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8001b18:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	422b      	tst	r3, r5
 8001b20:	d0eb      	beq.n	8001afa <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b22:	f7ff ff45 	bl	80019b0 <HAL_GetTick>
 8001b26:	1b80      	subs	r0, r0, r6
 8001b28:	2802      	cmp	r0, #2
 8001b2a:	d9f6      	bls.n	8001b1a <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2c:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b32:	4313      	orrs	r3, r2
 8001b34:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001b3c:	e7de      	b.n	8001afc <ADC_ConversionStop+0x10>
	...

08001b40 <HAL_ADC_Init>:
{
 8001b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b42:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001b44:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001b46:	2c00      	cmp	r4, #0
 8001b48:	d07e      	beq.n	8001c48 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001b50:	0022      	movs	r2, r4
 8001b52:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001b56:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001b58:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001b5a:	f7ff fca7 	bl	80014ac <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b60:	06db      	lsls	r3, r3, #27
 8001b62:	d500      	bpl.n	8001b66 <HAL_ADC_Init+0x26>
 8001b64:	e085      	b.n	8001c72 <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b66:	2204      	movs	r2, #4
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	6898      	ldr	r0, [r3, #8]
 8001b6c:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001b6e:	d000      	beq.n	8001b72 <HAL_ADC_Init+0x32>
 8001b70:	e07f      	b.n	8001c72 <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b74:	4942      	ldr	r1, [pc, #264]	; (8001c80 <HAL_ADC_Init+0x140>)
 8001b76:	4011      	ands	r1, r2
 8001b78:	2202      	movs	r2, #2
 8001b7a:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b7c:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	400a      	ands	r2, r1
 8001b84:	2a01      	cmp	r2, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_ADC_Init+0x54>
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	4211      	tst	r1, r2
 8001b8c:	d10e      	bne.n	8001bac <HAL_ADC_Init+0x6c>
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	0412      	lsls	r2, r2, #16
 8001b92:	d40b      	bmi.n	8001bac <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b94:	2118      	movs	r1, #24
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	438a      	bics	r2, r1
 8001b9a:	68a1      	ldr	r1, [r4, #8]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ba0:	6919      	ldr	r1, [r3, #16]
 8001ba2:	6862      	ldr	r2, [r4, #4]
 8001ba4:	0089      	lsls	r1, r1, #2
 8001ba6:	0889      	lsrs	r1, r1, #2
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_ADC_Init+0x144>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb4:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001bb6:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb8:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001bba:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bbc:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001bbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bc0:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001bc2:	3a01      	subs	r2, #1
 8001bc4:	1e56      	subs	r6, r2, #1
 8001bc6:	41b2      	sbcs	r2, r6
 8001bc8:	0316      	lsls	r6, r2, #12
 8001bca:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bcc:	034f      	lsls	r7, r1, #13
 8001bce:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001bd0:	6922      	ldr	r2, [r4, #16]
 8001bd2:	432f      	orrs	r7, r5
 8001bd4:	2a02      	cmp	r2, #2
 8001bd6:	d100      	bne.n	8001bda <HAL_ADC_Init+0x9a>
 8001bd8:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001bda:	1d62      	adds	r2, r4, #5
 8001bdc:	7fd2      	ldrb	r2, [r2, #31]
 8001bde:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001be0:	433a      	orrs	r2, r7
 8001be2:	4332      	orrs	r2, r6
 8001be4:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be6:	7ee0      	ldrb	r0, [r4, #27]
 8001be8:	2801      	cmp	r0, #1
 8001bea:	d104      	bne.n	8001bf6 <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bec:	2900      	cmp	r1, #0
 8001bee:	d12c      	bne.n	8001c4a <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0249      	lsls	r1, r1, #9
 8001bf4:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bf6:	20c2      	movs	r0, #194	; 0xc2
 8001bf8:	69e1      	ldr	r1, [r4, #28]
 8001bfa:	30ff      	adds	r0, #255	; 0xff
 8001bfc:	4281      	cmp	r1, r0
 8001bfe:	d002      	beq.n	8001c06 <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c00:	6a20      	ldr	r0, [r4, #32]
 8001c02:	4301      	orrs	r1, r0
 8001c04:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c06:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001c08:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c0a:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c12:	4281      	cmp	r1, r0
 8001c14:	d002      	beq.n	8001c1c <HAL_ADC_Init+0xdc>
 8001c16:	1e48      	subs	r0, r1, #1
 8001c18:	2806      	cmp	r0, #6
 8001c1a:	d807      	bhi.n	8001c2c <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c1c:	2507      	movs	r5, #7
 8001c1e:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c20:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c22:	43a8      	bics	r0, r5
 8001c24:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c26:	6958      	ldr	r0, [r3, #20]
 8001c28:	4301      	orrs	r1, r0
 8001c2a:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4916      	ldr	r1, [pc, #88]	; (8001c88 <HAL_ADC_Init+0x148>)
 8001c30:	400b      	ands	r3, r1
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d111      	bne.n	8001c5a <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001c36:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001c38:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001c3a:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c3e:	4393      	bics	r3, r2
 8001c40:	001a      	movs	r2, r3
 8001c42:	2301      	movs	r3, #1
 8001c44:	4313      	orrs	r3, r2
 8001c46:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4a:	2120      	movs	r1, #32
 8001c4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001c4e:	4329      	orrs	r1, r5
 8001c50:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c52:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c54:	4308      	orrs	r0, r1
 8001c56:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001c58:	e7cd      	b.n	8001bf6 <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8001c5a:	2212      	movs	r2, #18
 8001c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001c60:	4393      	bics	r3, r2
 8001c62:	001a      	movs	r2, r3
 8001c64:	2310      	movs	r3, #16
 8001c66:	4313      	orrs	r3, r2
 8001c68:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c6c:	4303      	orrs	r3, r0
 8001c6e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c70:	e7ea      	b.n	8001c48 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	2310      	movs	r3, #16
 8001c74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c7c:	e7e4      	b.n	8001c48 <HAL_ADC_Init+0x108>
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	fffffefd 	.word	0xfffffefd
 8001c84:	fffe0219 	.word	0xfffe0219
 8001c88:	833fffe7 	.word	0x833fffe7

08001c8c <HAL_ADC_Start_DMA>:
{
 8001c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c8e:	6803      	ldr	r3, [r0, #0]
{
 8001c90:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c92:	689b      	ldr	r3, [r3, #8]
{
 8001c94:	000f      	movs	r7, r1
 8001c96:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8001c98:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c9a:	075b      	lsls	r3, r3, #29
 8001c9c:	d430      	bmi.n	8001d00 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8001c9e:	0026      	movs	r6, r4
 8001ca0:	3634      	adds	r6, #52	; 0x34
 8001ca2:	7833      	ldrb	r3, [r6, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d02b      	beq.n	8001d00 <HAL_ADC_Start_DMA+0x74>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cac:	7e63      	ldrb	r3, [r4, #25]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d127      	bne.n	8001d02 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8001cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cb4:	4a16      	ldr	r2, [pc, #88]	; (8001d10 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001cb8:	401a      	ands	r2, r3
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cc2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001cc6:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001cc8:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cca:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cce:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd0:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_ADC_Start_DMA+0x90>)
 8001cd4:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cd6:	231c      	movs	r3, #28
 8001cd8:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cda:	684a      	ldr	r2, [r1, #4]
 8001cdc:	3b0c      	subs	r3, #12
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	68ca      	ldr	r2, [r1, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cea:	003a      	movs	r2, r7
 8001cec:	3140      	adds	r1, #64	; 0x40
 8001cee:	9b01      	ldr	r3, [sp, #4]
 8001cf0:	f000 f9f0 	bl	80020d4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	0028      	movs	r0, r5
 8001cf8:	6822      	ldr	r2, [r4, #0]
 8001cfa:	6891      	ldr	r1, [r2, #8]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6093      	str	r3, [r2, #8]
}
 8001d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001d02:	0020      	movs	r0, r4
 8001d04:	f7ff fea6 	bl	8001a54 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d0d2      	beq.n	8001cb2 <HAL_ADC_Start_DMA+0x26>
 8001d0c:	e7f8      	b.n	8001d00 <HAL_ADC_Start_DMA+0x74>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	fffff0fe 	.word	0xfffff0fe
 8001d14:	08001d91 	.word	0x08001d91
 8001d18:	08001e03 	.word	0x08001e03
 8001d1c:	08001e0f 	.word	0x08001e0f

08001d20 <HAL_ADC_Stop_DMA>:
{  
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001d22:	0006      	movs	r6, r0
 8001d24:	3634      	adds	r6, #52	; 0x34
 8001d26:	7833      	ldrb	r3, [r6, #0]
{  
 8001d28:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001d2a:	2502      	movs	r5, #2
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d020      	beq.n	8001d72 <HAL_ADC_Stop_DMA+0x52>
 8001d30:	2701      	movs	r7, #1
 8001d32:	7037      	strb	r7, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001d34:	f7ff feda 	bl	8001aec <ADC_ConversionStop>
 8001d38:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8001d3a:	d118      	bne.n	8001d6e <HAL_ADC_Stop_DMA+0x4e>
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8001d3c:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001d3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8001d40:	68d3      	ldr	r3, [r2, #12]
 8001d42:	43bb      	bics	r3, r7
 8001d44:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001d46:	f000 fa01 	bl	800214c <HAL_DMA_Abort>
 8001d4a:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status != HAL_OK)
 8001d4c:	d003      	beq.n	8001d56 <HAL_ADC_Stop_DMA+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d4e:	2340      	movs	r3, #64	; 0x40
 8001d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d52:	4313      	orrs	r3, r2
 8001d54:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d56:	2110      	movs	r1, #16
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	6853      	ldr	r3, [r2, #4]
 8001d5c:	438b      	bics	r3, r1
 8001d5e:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d108      	bne.n	8001d76 <HAL_ADC_Stop_DMA+0x56>
      tmp_hal_status = ADC_Disable(hadc);
 8001d64:	0020      	movs	r0, r4
 8001d66:	f7ff fe3b 	bl	80019e0 <ADC_Disable>
 8001d6a:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8001d6c:	d007      	beq.n	8001d7e <HAL_ADC_Stop_DMA+0x5e>
  __HAL_UNLOCK(hadc);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	7033      	strb	r3, [r6, #0]
}
 8001d72:	0028      	movs	r0, r5
 8001d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_Disable(hadc);
 8001d76:	0020      	movs	r0, r4
 8001d78:	f7ff fe32 	bl	80019e0 <ADC_Disable>
 8001d7c:	e7f7      	b.n	8001d6e <HAL_ADC_Stop_DMA+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d80:	4a02      	ldr	r2, [pc, #8]	; (8001d8c <HAL_ADC_Stop_DMA+0x6c>)
 8001d82:	401a      	ands	r2, r3
 8001d84:	2301      	movs	r3, #1
 8001d86:	4313      	orrs	r3, r2
 8001d88:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d8a:	e7f0      	b.n	8001d6e <HAL_ADC_Stop_DMA+0x4e>
 8001d8c:	fffffefe 	.word	0xfffffefe

08001d90 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d90:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d92:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001d94:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d98:	4211      	tst	r1, r2
 8001d9a:	d12a      	bne.n	8001df2 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d9e:	32b1      	adds	r2, #177	; 0xb1
 8001da0:	32ff      	adds	r2, #255	; 0xff
 8001da2:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001da4:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001da6:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	0109      	lsls	r1, r1, #4
 8001dac:	68d0      	ldr	r0, [r2, #12]
 8001dae:	4208      	tst	r0, r1
 8001db0:	d112      	bne.n	8001dd8 <ADC_DMAConvCplt+0x48>
 8001db2:	7e99      	ldrb	r1, [r3, #26]
 8001db4:	2900      	cmp	r1, #0
 8001db6:	d10f      	bne.n	8001dd8 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001db8:	6811      	ldr	r1, [r2, #0]
 8001dba:	0709      	lsls	r1, r1, #28
 8001dbc:	d50c      	bpl.n	8001dd8 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dbe:	6891      	ldr	r1, [r2, #8]
 8001dc0:	0749      	lsls	r1, r1, #29
 8001dc2:	d40d      	bmi.n	8001de0 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dc4:	200c      	movs	r0, #12
 8001dc6:	6851      	ldr	r1, [r2, #4]
 8001dc8:	4381      	bics	r1, r0
 8001dca:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dce:	490b      	ldr	r1, [pc, #44]	; (8001dfc <ADC_DMAConvCplt+0x6c>)
 8001dd0:	4011      	ands	r1, r2
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff fb3d 	bl	8001458 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001dde:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	2220      	movs	r2, #32
 8001de2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001de4:	430a      	orrs	r2, r1
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001dec:	430a      	orrs	r2, r1
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
 8001df0:	e7f2      	b.n	8001dd8 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4798      	blx	r3
}
 8001df8:	e7f1      	b.n	8001dde <ADC_DMAConvCplt+0x4e>
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	fffffefe 	.word	0xfffffefe

08001e00 <HAL_ADC_ConvHalfCpltCallback>:
 8001e00:	4770      	bx	lr

08001e02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e02:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001e04:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001e06:	f7ff fffb 	bl	8001e00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e0a:	bd10      	pop	{r4, pc}

08001e0c <HAL_ADC_ErrorCallback>:
 8001e0c:	4770      	bx	lr

08001e0e <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e0e:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e10:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001e12:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e14:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001e16:	4313      	orrs	r3, r2
 8001e18:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001e22:	f7ff fff3 	bl	8001e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e26:	bd10      	pop	{r4, pc}

08001e28 <HAL_ADC_ConfigChannel>:
{
 8001e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001e2a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001e2c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001e2e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001e30:	3434      	adds	r4, #52	; 0x34
 8001e32:	7822      	ldrb	r2, [r4, #0]
{
 8001e34:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8001e36:	2002      	movs	r0, #2
 8001e38:	2a01      	cmp	r2, #1
 8001e3a:	d02b      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0x6c>
 8001e3c:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e3e:	681d      	ldr	r5, [r3, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e40:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e42:	68a8      	ldr	r0, [r5, #8]
  __HAL_LOCK(hadc);
 8001e44:	7022      	strb	r2, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e46:	0740      	lsls	r0, r0, #29
 8001e48:	d45a      	bmi.n	8001f00 <HAL_ADC_ConfigChannel+0xd8>
 8001e4a:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e4c:	482f      	ldr	r0, [pc, #188]	; (8001f0c <HAL_ADC_ConfigChannel+0xe4>)
 8001e4e:	001f      	movs	r7, r3
 8001e50:	4684      	mov	ip, r0
 8001e52:	6848      	ldr	r0, [r1, #4]
 8001e54:	409a      	lsls	r2, r3
 8001e56:	3f10      	subs	r7, #16
 8001e58:	4560      	cmp	r0, ip
 8001e5a:	d03b      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e5c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001e5e:	4310      	orrs	r0, r2
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e60:	2280      	movs	r2, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e62:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e64:	0552      	lsls	r2, r2, #21
 8001e66:	4296      	cmp	r6, r2
 8001e68:	d00f      	beq.n	8001e8a <HAL_ADC_ConfigChannel+0x62>
 8001e6a:	3e01      	subs	r6, #1
 8001e6c:	2e06      	cmp	r6, #6
 8001e6e:	d90c      	bls.n	8001e8a <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e70:	688a      	ldr	r2, [r1, #8]
 8001e72:	2107      	movs	r1, #7
 8001e74:	6968      	ldr	r0, [r5, #20]
 8001e76:	4008      	ands	r0, r1
 8001e78:	4282      	cmp	r2, r0
 8001e7a:	d006      	beq.n	8001e8a <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e7c:	6968      	ldr	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e7e:	400a      	ands	r2, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e80:	4388      	bics	r0, r1
 8001e82:	6168      	str	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e84:	6968      	ldr	r0, [r5, #20]
 8001e86:	4302      	orrs	r2, r0
 8001e88:	616a      	str	r2, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e8a:	2f02      	cmp	r7, #2
 8001e8c:	d903      	bls.n	8001e96 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001e90:	2300      	movs	r3, #0
 8001e92:	7023      	strb	r3, [r4, #0]
}
 8001e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_ADC_ConfigChannel+0xe8>)
 8001e98:	2080      	movs	r0, #128	; 0x80
 8001e9a:	6811      	ldr	r1, [r2, #0]
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d015      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0xa4>
 8001ea0:	2b11      	cmp	r3, #17
 8001ea2:	d115      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0xa8>
 8001ea4:	03c0      	lsls	r0, r0, #15
 8001ea6:	4301      	orrs	r1, r0
 8001ea8:	6011      	str	r1, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d1ef      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_ADC_ConfigChannel+0xec>)
 8001eb0:	4919      	ldr	r1, [pc, #100]	; (8001f18 <HAL_ADC_ConfigChannel+0xf0>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f7fe f93c 	bl	8000130 <__udivsi3>
 8001eb8:	230a      	movs	r3, #10
 8001eba:	4358      	muls	r0, r3
 8001ebc:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001ebe:	9b01      	ldr	r3, [sp, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0e4      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001ec4:	9b01      	ldr	r3, [sp, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	e7f8      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ecc:	0400      	lsls	r0, r0, #16
 8001ece:	e7ea      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x7e>
 8001ed0:	0440      	lsls	r0, r0, #17
 8001ed2:	e7e8      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ed4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001ed6:	4391      	bics	r1, r2
 8001ed8:	62a9      	str	r1, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eda:	2f02      	cmp	r7, #2
 8001edc:	d8d7      	bhi.n	8001e8e <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_ADC_ConfigChannel+0xe8>)
 8001ee0:	6811      	ldr	r1, [r2, #0]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d00a      	beq.n	8001efc <HAL_ADC_ConfigChannel+0xd4>
 8001ee6:	3b11      	subs	r3, #17
 8001ee8:	1e58      	subs	r0, r3, #1
 8001eea:	4183      	sbcs	r3, r0
 8001eec:	480b      	ldr	r0, [pc, #44]	; (8001f1c <HAL_ADC_ConfigChannel+0xf4>)
 8001eee:	425b      	negs	r3, r3
 8001ef0:	4003      	ands	r3, r0
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <HAL_ADC_ConfigChannel+0xf8>)
 8001ef4:	181b      	adds	r3, r3, r0
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e7c8      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x66>
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_ADC_ConfigChannel+0xfc>)
 8001efe:	e7fa      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0xce>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	2120      	movs	r1, #32
 8001f02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f04:	4301      	orrs	r1, r0
 8001f06:	6399      	str	r1, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001f08:	0010      	movs	r0, r2
 8001f0a:	e7c1      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x68>
 8001f0c:	00001001 	.word	0x00001001
 8001f10:	40012708 	.word	0x40012708
 8001f14:	20000000 	.word	0x20000000
 8001f18:	000f4240 	.word	0x000f4240
 8001f1c:	ff400000 	.word	0xff400000
 8001f20:	ffbfffff 	.word	0xffbfffff
 8001f24:	ff7fffff 	.word	0xff7fffff

08001f28 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2a:	0006      	movs	r6, r0
 8001f2c:	3634      	adds	r6, #52	; 0x34
 8001f2e:	7833      	ldrb	r3, [r6, #0]
{
 8001f30:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001f32:	2002      	movs	r0, #2
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d042      	beq.n	8001fbe <HAL_ADCEx_Calibration_Start+0x96>
 8001f38:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f3a:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8001f3c:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	400a      	ands	r2, r1
 8001f44:	2a01      	cmp	r2, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_ADCEx_Calibration_Start+0x2c>
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	4211      	tst	r1, r2
 8001f4c:	d138      	bne.n	8001fc0 <HAL_ADCEx_Calibration_Start+0x98>
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	0412      	lsls	r2, r2, #16
 8001f52:	d435      	bmi.n	8001fc0 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001f54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f56:	491d      	ldr	r1, [pc, #116]	; (8001fcc <HAL_ADCEx_Calibration_Start+0xa4>)
 8001f58:	4011      	ands	r1, r2
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001f5e:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8001f60:	63a2      	str	r2, [r4, #56]	; 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001f62:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	438a      	bics	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	0612      	lsls	r2, r2, #24
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001f74:	f7ff fd1c 	bl	80019b0 <HAL_GetTick>
 8001f78:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	db0e      	blt.n	8001fa0 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001f82:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001f84:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001f86:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001f88:	430d      	orrs	r5, r1
 8001f8a:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8e:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001f90:	4393      	bics	r3, r2
 8001f92:	001a      	movs	r2, r3
 8001f94:	2301      	movs	r3, #1
 8001f96:	4313      	orrs	r3, r2
 8001f98:	63a3      	str	r3, [r4, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8001f9e:	e00e      	b.n	8001fbe <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fa0:	f7ff fd06 	bl	80019b0 <HAL_GetTick>
 8001fa4:	1bc0      	subs	r0, r0, r7
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9e7      	bls.n	8001f7a <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 8001faa:	2212      	movs	r2, #18
 8001fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	7033      	strb	r3, [r6, #0]
}
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	63a3      	str	r3, [r4, #56]	; 0x38
 8001fca:	e7e6      	b.n	8001f9a <HAL_ADCEx_Calibration_Start+0x72>
 8001fcc:	fffffefd 	.word	0xfffffefd

08001fd0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd0:	b530      	push	{r4, r5, lr}
 8001fd2:	25ff      	movs	r5, #255	; 0xff
 8001fd4:	2403      	movs	r4, #3
 8001fd6:	002a      	movs	r2, r5
 8001fd8:	b2c3      	uxtb	r3, r0
 8001fda:	401c      	ands	r4, r3
 8001fdc:	00e4      	lsls	r4, r4, #3
 8001fde:	40a2      	lsls	r2, r4
 8001fe0:	0189      	lsls	r1, r1, #6
 8001fe2:	4029      	ands	r1, r5
 8001fe4:	43d2      	mvns	r2, r2
 8001fe6:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	db0a      	blt.n	8002002 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fec:	24c0      	movs	r4, #192	; 0xc0
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_NVIC_SetPriority+0x4c>)
 8001ff0:	0880      	lsrs	r0, r0, #2
 8001ff2:	0080      	lsls	r0, r0, #2
 8001ff4:	18c0      	adds	r0, r0, r3
 8001ff6:	00a4      	lsls	r4, r4, #2
 8001ff8:	5903      	ldr	r3, [r0, r4]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	4311      	orrs	r1, r2
 8001ffe:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002000:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002002:	200f      	movs	r0, #15
 8002004:	4003      	ands	r3, r0
 8002006:	3b08      	subs	r3, #8
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_NVIC_SetPriority+0x50>)
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	181b      	adds	r3, r3, r0
 8002010:	69d8      	ldr	r0, [r3, #28]
 8002012:	4002      	ands	r2, r0
 8002014:	4311      	orrs	r1, r2
 8002016:	61d9      	str	r1, [r3, #28]
 8002018:	e7f2      	b.n	8002000 <HAL_NVIC_SetPriority+0x30>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002024:	2800      	cmp	r0, #0
 8002026:	db05      	blt.n	8002034 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002028:	231f      	movs	r3, #31
 800202a:	4018      	ands	r0, r3
 800202c:	3b1e      	subs	r3, #30
 800202e:	4083      	lsls	r3, r0
 8002030:	4a01      	ldr	r2, [pc, #4]	; (8002038 <HAL_NVIC_EnableIRQ+0x14>)
 8002032:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002034:	4770      	bx	lr
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	e000e100 	.word	0xe000e100

0800203c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_SYSTICK_Config+0x28>)
 800203e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002040:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002042:	4293      	cmp	r3, r2
 8002044:	d80d      	bhi.n	8002062 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002046:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800204a:	4808      	ldr	r0, [pc, #32]	; (800206c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800204e:	6a03      	ldr	r3, [r0, #32]
 8002050:	0609      	lsls	r1, r1, #24
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	430b      	orrs	r3, r1
 8002058:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002060:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002062:	4770      	bx	lr
 8002064:	00ffffff 	.word	0x00ffffff
 8002068:	e000e010 	.word	0xe000e010
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8002074:	2501      	movs	r5, #1
  if(NULL == hdma)
 8002076:	2800      	cmp	r0, #0
 8002078:	d024      	beq.n	80020c4 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800207a:	2302      	movs	r3, #2
 800207c:	1c86      	adds	r6, r0, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800207e:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002080:	77f3      	strb	r3, [r6, #31]
  tmp = hdma->Instance->CCR;
 8002082:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002086:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002088:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800208a:	6863      	ldr	r3, [r4, #4]
 800208c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	68e1      	ldr	r1, [r4, #12]
 8002090:	430b      	orrs	r3, r1
 8002092:	6921      	ldr	r1, [r4, #16]
 8002094:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002096:	6961      	ldr	r1, [r4, #20]
 8002098:	430b      	orrs	r3, r1
 800209a:	69a1      	ldr	r1, [r4, #24]
 800209c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800209e:	69e1      	ldr	r1, [r4, #28]
 80020a0:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80020a2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020a4:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_DMA_Init+0x5c>)
 80020a8:	2114      	movs	r1, #20
 80020aa:	18c0      	adds	r0, r0, r3
 80020ac:	f7fe f840 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020b2:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80020b4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b6:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020b8:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ba:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80020bc:	77f5      	strb	r5, [r6, #31]
  hdma->Lock = HAL_UNLOCKED;
 80020be:	1964      	adds	r4, r4, r5
  return HAL_OK;
 80020c0:	001d      	movs	r5, r3
  hdma->Lock = HAL_UNLOCKED;
 80020c2:	77e3      	strb	r3, [r4, #31]
}  
 80020c4:	0028      	movs	r0, r5
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
 80020c8:	ffffc00f 	.word	0xffffc00f
 80020cc:	bffdfff8 	.word	0xbffdfff8
 80020d0:	40020000 	.word	0x40020000

080020d4 <HAL_DMA_Start_IT>:
{
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80020d6:	1c44      	adds	r4, r0, #1
 80020d8:	7fe6      	ldrb	r6, [r4, #31]
{
 80020da:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 80020dc:	2002      	movs	r0, #2
 80020de:	2e01      	cmp	r6, #1
 80020e0:	d027      	beq.n	8002132 <HAL_DMA_Start_IT+0x5e>
 80020e2:	3801      	subs	r0, #1
 80020e4:	77e0      	strb	r0, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e6:	1ca8      	adds	r0, r5, #2
 80020e8:	7fc6      	ldrb	r6, [r0, #31]
 80020ea:	4684      	mov	ip, r0
 80020ec:	b2f6      	uxtb	r6, r6
 80020ee:	2002      	movs	r0, #2
 80020f0:	2700      	movs	r7, #0
 80020f2:	2e01      	cmp	r6, #1
 80020f4:	d128      	bne.n	8002148 <HAL_DMA_Start_IT+0x74>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80020f6:	4664      	mov	r4, ip
 80020f8:	77e0      	strb	r0, [r4, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020fa:	682c      	ldr	r4, [r5, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fc:	63af      	str	r7, [r5, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020fe:	6820      	ldr	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002100:	6c2f      	ldr	r7, [r5, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002102:	43b0      	bics	r0, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002104:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002106:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002108:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800210a:	6046      	str	r6, [r0, #4]
  hdma->Instance->CNDTR = DataLength;
 800210c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800210e:	686b      	ldr	r3, [r5, #4]
 8002110:	6828      	ldr	r0, [r5, #0]
 8002112:	2b10      	cmp	r3, #16
 8002114:	d10e      	bne.n	8002134 <HAL_DMA_Start_IT+0x60>
    hdma->Instance->CPAR = DstAddress;
 8002116:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002118:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800211a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800211c:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_DMA_Start_IT+0x66>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002122:	230e      	movs	r3, #14
 8002124:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002126:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002128:	2301      	movs	r3, #1
 800212a:	6802      	ldr	r2, [r0, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	6003      	str	r3, [r0, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002130:	2000      	movs	r0, #0
} 
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002134:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002136:	60e2      	str	r2, [r4, #12]
 8002138:	e7ef      	b.n	800211a <HAL_DMA_Start_IT+0x46>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800213a:	230a      	movs	r3, #10
 800213c:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800213e:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002140:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	4393      	bics	r3, r2
 8002146:	e7ee      	b.n	8002126 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8002148:	77e7      	strb	r7, [r4, #31]
 800214a:	e7f2      	b.n	8002132 <HAL_DMA_Start_IT+0x5e>

0800214c <HAL_DMA_Abort>:
{
 800214c:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214e:	1c85      	adds	r5, r0, #2
 8002150:	7feb      	ldrb	r3, [r5, #31]
 8002152:	1c44      	adds	r4, r0, #1
 8002154:	2b02      	cmp	r3, #2
 8002156:	d005      	beq.n	8002164 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	2304      	movs	r3, #4
 800215a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800215c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002160:	77e3      	strb	r3, [r4, #31]
}
 8002162:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002164:	210e      	movs	r1, #14
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	438a      	bics	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800216e:	2201      	movs	r2, #1
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	4391      	bics	r1, r2
 8002174:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002176:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002178:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800217a:	0010      	movs	r0, r2
 800217c:	4088      	lsls	r0, r1
 800217e:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8002180:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8002182:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8002184:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002186:	e7ec      	b.n	8002162 <HAL_DMA_Abort+0x16>

08002188 <HAL_DMA_IRQHandler>:
{
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800218a:	2704      	movs	r7, #4
 800218c:	003e      	movs	r6, r7
 800218e:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002190:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002192:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002194:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002196:	6803      	ldr	r3, [r0, #0]
 8002198:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800219a:	4235      	tst	r5, r6
 800219c:	d00d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x32>
 800219e:	423c      	tst	r4, r7
 80021a0:	d00b      	beq.n	80021ba <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	0689      	lsls	r1, r1, #26
 80021a6:	d402      	bmi.n	80021ae <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	43b9      	bics	r1, r7
 80021ac:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80021ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021b0:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d019      	beq.n	80021ea <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 80021b6:	4798      	blx	r3
}  
 80021b8:	e017      	b.n	80021ea <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021ba:	2702      	movs	r7, #2
 80021bc:	003e      	movs	r6, r7
 80021be:	408e      	lsls	r6, r1
 80021c0:	4235      	tst	r5, r6
 80021c2:	d013      	beq.n	80021ec <HAL_DMA_IRQHandler+0x64>
 80021c4:	423c      	tst	r4, r7
 80021c6:	d011      	beq.n	80021ec <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	0689      	lsls	r1, r1, #26
 80021cc:	d406      	bmi.n	80021dc <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021ce:	240a      	movs	r4, #10
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	43a1      	bics	r1, r4
 80021d4:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80021d6:	2101      	movs	r1, #1
 80021d8:	19c3      	adds	r3, r0, r7
 80021da:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80021dc:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80021de:	2200      	movs	r2, #0
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 80021e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d1e5      	bne.n	80021b6 <HAL_DMA_IRQHandler+0x2e>
}  
 80021ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021ec:	2608      	movs	r6, #8
 80021ee:	0037      	movs	r7, r6
 80021f0:	408f      	lsls	r7, r1
 80021f2:	423d      	tst	r5, r7
 80021f4:	d0f9      	beq.n	80021ea <HAL_DMA_IRQHandler+0x62>
 80021f6:	4234      	tst	r4, r6
 80021f8:	d0f7      	beq.n	80021ea <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021fa:	250e      	movs	r5, #14
 80021fc:	681c      	ldr	r4, [r3, #0]
 80021fe:	43ac      	bics	r4, r5
 8002200:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002202:	2301      	movs	r3, #1
 8002204:	001c      	movs	r4, r3
 8002206:	408c      	lsls	r4, r1
 8002208:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 800220a:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800220c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800220e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8002210:	2200      	movs	r2, #0
 8002212:	18c3      	adds	r3, r0, r3
 8002214:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8002216:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002218:	e7e5      	b.n	80021e6 <HAL_DMA_IRQHandler+0x5e>
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	680b      	ldr	r3, [r1, #0]
{ 
 8002220:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8002224:	2300      	movs	r3, #0
{ 
 8002226:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	9a03      	ldr	r2, [sp, #12]
 800222a:	40da      	lsrs	r2, r3
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 800222e:	b007      	add	sp, #28
 8002230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002232:	2201      	movs	r2, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	9202      	str	r2, [sp, #8]
 8002238:	9902      	ldr	r1, [sp, #8]
 800223a:	9a03      	ldr	r2, [sp, #12]
 800223c:	400a      	ands	r2, r1
 800223e:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8002240:	d100      	bne.n	8002244 <HAL_GPIO_Init+0x28>
 8002242:	e088      	b.n	8002356 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002244:	9a01      	ldr	r2, [sp, #4]
 8002246:	2110      	movs	r1, #16
 8002248:	6852      	ldr	r2, [r2, #4]
 800224a:	0016      	movs	r6, r2
 800224c:	438e      	bics	r6, r1
 800224e:	2e02      	cmp	r6, #2
 8002250:	d10e      	bne.n	8002270 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002252:	2507      	movs	r5, #7
 8002254:	401d      	ands	r5, r3
 8002256:	00ad      	lsls	r5, r5, #2
 8002258:	3901      	subs	r1, #1
 800225a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 800225c:	08dc      	lsrs	r4, r3, #3
 800225e:	00a4      	lsls	r4, r4, #2
 8002260:	1904      	adds	r4, r0, r4
 8002262:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002264:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002266:	9901      	ldr	r1, [sp, #4]
 8002268:	6909      	ldr	r1, [r1, #16]
 800226a:	40a9      	lsls	r1, r5
 800226c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800226e:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002270:	2403      	movs	r4, #3
 8002272:	005f      	lsls	r7, r3, #1
 8002274:	40bc      	lsls	r4, r7
 8002276:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002278:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227a:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800227c:	4025      	ands	r5, r4
 800227e:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002280:	2503      	movs	r5, #3
 8002282:	4015      	ands	r5, r2
 8002284:	40bd      	lsls	r5, r7
 8002286:	4661      	mov	r1, ip
 8002288:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800228a:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800228c:	2e01      	cmp	r6, #1
 800228e:	d80f      	bhi.n	80022b0 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002290:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8002292:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002294:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002296:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002298:	40bd      	lsls	r5, r7
 800229a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800229c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800229e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022a2:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022a6:	2101      	movs	r1, #1
 80022a8:	400d      	ands	r5, r1
 80022aa:	409d      	lsls	r5, r3
 80022ac:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80022ae:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80022b0:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022b2:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022b4:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022b6:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b8:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ba:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022bc:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022be:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80022c0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c2:	420a      	tst	r2, r1
 80022c4:	d047      	beq.n	8002356 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2101      	movs	r1, #1
 80022c8:	4c24      	ldr	r4, [pc, #144]	; (800235c <HAL_GPIO_Init+0x140>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ca:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022cc:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ce:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d0:	430d      	orrs	r5, r1
 80022d2:	61a5      	str	r5, [r4, #24]
 80022d4:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80022d6:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d8:	400c      	ands	r4, r1
 80022da:	9405      	str	r4, [sp, #20]
 80022dc:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022de:	240f      	movs	r4, #15
 80022e0:	491f      	ldr	r1, [pc, #124]	; (8002360 <HAL_GPIO_Init+0x144>)
 80022e2:	00ad      	lsls	r5, r5, #2
 80022e4:	00b6      	lsls	r6, r6, #2
 80022e6:	186d      	adds	r5, r5, r1
 80022e8:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ea:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 80022ec:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ee:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022f0:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f2:	2400      	movs	r4, #0
 80022f4:	4288      	cmp	r0, r1
 80022f6:	d008      	beq.n	800230a <HAL_GPIO_Init+0xee>
 80022f8:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x148>)
 80022fa:	3401      	adds	r4, #1
 80022fc:	4288      	cmp	r0, r1
 80022fe:	d004      	beq.n	800230a <HAL_GPIO_Init+0xee>
 8002300:	4919      	ldr	r1, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x14c>)
 8002302:	3404      	adds	r4, #4
 8002304:	4288      	cmp	r0, r1
 8002306:	d100      	bne.n	800230a <HAL_GPIO_Init+0xee>
 8002308:	3c03      	subs	r4, #3
 800230a:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 800230c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800230e:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8002310:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002312:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002314:	4c15      	ldr	r4, [pc, #84]	; (800236c <HAL_GPIO_Init+0x150>)
        temp &= ~(iocurrent);
 8002316:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8002318:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800231a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231c:	03d1      	lsls	r1, r2, #15
 800231e:	d401      	bmi.n	8002324 <HAL_GPIO_Init+0x108>
        temp &= ~(iocurrent);
 8002320:	003e      	movs	r6, r7
 8002322:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002324:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8002326:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8002328:	9e00      	ldr	r6, [sp, #0]
 800232a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232c:	0391      	lsls	r1, r2, #14
 800232e:	d401      	bmi.n	8002334 <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 8002330:	003e      	movs	r6, r7
 8002332:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8002334:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002336:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8002338:	9e00      	ldr	r6, [sp, #0]
 800233a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233c:	02d1      	lsls	r1, r2, #11
 800233e:	d401      	bmi.n	8002344 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8002340:	003e      	movs	r6, r7
 8002342:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8002344:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002346:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8002348:	9f00      	ldr	r7, [sp, #0]
 800234a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800234c:	0292      	lsls	r2, r2, #10
 800234e:	d401      	bmi.n	8002354 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8002350:	402e      	ands	r6, r5
 8002352:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8002354:	60e7      	str	r7, [r4, #12]
    position++;
 8002356:	3301      	adds	r3, #1
 8002358:	e766      	b.n	8002228 <HAL_GPIO_Init+0xc>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002370:	2a00      	cmp	r2, #0
 8002372:	d001      	beq.n	8002378 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002374:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002376:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002378:	6281      	str	r1, [r0, #40]	; 0x28
}
 800237a:	e7fc      	b.n	8002376 <HAL_GPIO_WritePin+0x6>

0800237c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800237c:	6943      	ldr	r3, [r0, #20]
 800237e:	4219      	tst	r1, r3
 8002380:	d000      	beq.n	8002384 <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002382:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002384:	6181      	str	r1, [r0, #24]
  }
}
 8002386:	4770      	bx	lr

08002388 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002388:	6803      	ldr	r3, [r0, #0]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	0792      	lsls	r2, r2, #30
 800238e:	d501      	bpl.n	8002394 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002390:	2200      	movs	r2, #0
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002394:	2201      	movs	r2, #1
 8002396:	6999      	ldr	r1, [r3, #24]
 8002398:	4211      	tst	r1, r2
 800239a:	d102      	bne.n	80023a2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800239c:	6999      	ldr	r1, [r3, #24]
 800239e:	430a      	orrs	r2, r1
 80023a0:	619a      	str	r2, [r3, #24]
  }
}
 80023a2:	4770      	bx	lr

080023a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80023a4:	b530      	push	{r4, r5, lr}
 80023a6:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023a8:	0412      	lsls	r2, r2, #16
 80023aa:	6800      	ldr	r0, [r0, #0]
 80023ac:	4322      	orrs	r2, r4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <I2C_TransferConfig+0x24>)
 80023b2:	6845      	ldr	r5, [r0, #4]
 80023b4:	0589      	lsls	r1, r1, #22
 80023b6:	0d64      	lsrs	r4, r4, #21
 80023b8:	0d89      	lsrs	r1, r1, #22
 80023ba:	4314      	orrs	r4, r2
 80023bc:	43a5      	bics	r5, r4
 80023be:	430b      	orrs	r3, r1
 80023c0:	432b      	orrs	r3, r5
 80023c2:	6043      	str	r3, [r0, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80023c4:	bd30      	pop	{r4, r5, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	03ff63ff 	.word	0x03ff63ff

080023cc <I2C_IsAcknowledgeFailed>:
{
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ce:	6803      	ldr	r3, [r0, #0]
{
 80023d0:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d2:	6998      	ldr	r0, [r3, #24]
 80023d4:	2310      	movs	r3, #16
{
 80023d6:	000e      	movs	r6, r1
 80023d8:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023da:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023dc:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023de:	2800      	cmp	r0, #0
 80023e0:	d118      	bne.n	8002414 <I2C_IsAcknowledgeFailed+0x48>
}
 80023e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80023e4:	1c72      	adds	r2, r6, #1
 80023e6:	d016      	beq.n	8002416 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7ff fae2 	bl	80019b0 <HAL_GetTick>
 80023ec:	1bc0      	subs	r0, r0, r7
 80023ee:	42b0      	cmp	r0, r6
 80023f0:	d801      	bhi.n	80023f6 <I2C_IsAcknowledgeFailed+0x2a>
 80023f2:	2e00      	cmp	r6, #0
 80023f4:	d10e      	bne.n	8002414 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f6:	2220      	movs	r2, #32
 80023f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023fa:	4313      	orrs	r3, r2
 80023fc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	0023      	movs	r3, r4
 8002400:	3341      	adds	r3, #65	; 0x41
 8002402:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	0022      	movs	r2, r4
 8002406:	2300      	movs	r3, #0
 8002408:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800240a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8002410:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8002412:	e7e6      	b.n	80023e2 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	422a      	tst	r2, r5
 800241a:	d0e3      	beq.n	80023e4 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800241e:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002422:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002424:	f7ff ffb0 	bl	8002388 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	4906      	ldr	r1, [pc, #24]	; (8002444 <I2C_IsAcknowledgeFailed+0x78>)
 800242c:	6853      	ldr	r3, [r2, #4]
 800242e:	400b      	ands	r3, r1
 8002430:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002432:	2304      	movs	r3, #4
 8002434:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002436:	4313      	orrs	r3, r2
 8002438:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	0023      	movs	r3, r4
 800243c:	3341      	adds	r3, #65	; 0x41
 800243e:	701d      	strb	r5, [r3, #0]
 8002440:	e7e0      	b.n	8002404 <I2C_IsAcknowledgeFailed+0x38>
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	fe00e800 	.word	0xfe00e800

08002448 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	0004      	movs	r4, r0
 800244c:	000d      	movs	r5, r1
 800244e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002450:	2720      	movs	r7, #32
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	423b      	tst	r3, r7
 8002458:	d001      	beq.n	800245e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800245a:	2000      	movs	r0, #0
}
 800245c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800245e:	0032      	movs	r2, r6
 8002460:	0029      	movs	r1, r5
 8002462:	0020      	movs	r0, r4
 8002464:	f7ff ffb2 	bl	80023cc <I2C_IsAcknowledgeFailed>
 8002468:	2800      	cmp	r0, #0
 800246a:	d113      	bne.n	8002494 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7ff faa0 	bl	80019b0 <HAL_GetTick>
 8002470:	1b80      	subs	r0, r0, r6
 8002472:	42a8      	cmp	r0, r5
 8002474:	d801      	bhi.n	800247a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002476:	2d00      	cmp	r5, #0
 8002478:	d1eb      	bne.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247a:	2220      	movs	r2, #32
 800247c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800247e:	4313      	orrs	r3, r2
 8002480:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002482:	0023      	movs	r3, r4
 8002484:	3341      	adds	r3, #65	; 0x41
 8002486:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	0022      	movs	r2, r4
 800248a:	2300      	movs	r3, #0
 800248c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800248e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002492:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
 8002496:	e7e1      	b.n	800245c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002498 <I2C_WaitOnFlagUntilTimeout>:
{
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	0004      	movs	r4, r0
 800249c:	000e      	movs	r6, r1
 800249e:	0017      	movs	r7, r2
 80024a0:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	6993      	ldr	r3, [r2, #24]
 80024a6:	4033      	ands	r3, r6
 80024a8:	1b9b      	subs	r3, r3, r6
 80024aa:	4259      	negs	r1, r3
 80024ac:	414b      	adcs	r3, r1
 80024ae:	42bb      	cmp	r3, r7
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80024b2:	2000      	movs	r0, #0
 80024b4:	e017      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	1c6b      	adds	r3, r5, #1
 80024b8:	d0f4      	beq.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7ff fa79 	bl	80019b0 <HAL_GetTick>
 80024be:	9b06      	ldr	r3, [sp, #24]
 80024c0:	1ac0      	subs	r0, r0, r3
 80024c2:	42a8      	cmp	r0, r5
 80024c4:	d801      	bhi.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x32>
 80024c6:	2d00      	cmp	r5, #0
 80024c8:	d1eb      	bne.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ca:	2220      	movs	r2, #32
 80024cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80024ce:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	4313      	orrs	r3, r2
 80024d2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	0023      	movs	r3, r4
 80024d6:	3341      	adds	r3, #65	; 0x41
 80024d8:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024da:	0022      	movs	r2, r4
 80024dc:	2300      	movs	r3, #0
 80024de:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80024e0:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80024e4:	7023      	strb	r3, [r4, #0]
}
 80024e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	0004      	movs	r4, r0
 80024ec:	000d      	movs	r5, r1
 80024ee:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024f0:	2702      	movs	r7, #2
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	423b      	tst	r3, r7
 80024f8:	d001      	beq.n	80024fe <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80024fa:	2000      	movs	r0, #0
}
 80024fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fe:	0032      	movs	r2, r6
 8002500:	0029      	movs	r1, r5
 8002502:	0020      	movs	r0, r4
 8002504:	f7ff ff62 	bl	80023cc <I2C_IsAcknowledgeFailed>
 8002508:	2800      	cmp	r0, #0
 800250a:	d115      	bne.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800250c:	1c6b      	adds	r3, r5, #1
 800250e:	d0f0      	beq.n	80024f2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7ff fa4e 	bl	80019b0 <HAL_GetTick>
 8002514:	1b80      	subs	r0, r0, r6
 8002516:	42a8      	cmp	r0, r5
 8002518:	d801      	bhi.n	800251e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800251a:	2d00      	cmp	r5, #0
 800251c:	d1e9      	bne.n	80024f2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251e:	2220      	movs	r2, #32
 8002520:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002522:	4313      	orrs	r3, r2
 8002524:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002526:	0023      	movs	r3, r4
 8002528:	3341      	adds	r3, #65	; 0x41
 800252a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	0022      	movs	r2, r4
 800252e:	2300      	movs	r3, #0
 8002530:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8002532:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002536:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
 800253a:	e7df      	b.n	80024fc <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800253c <I2C_RequestMemoryWrite>:
{
 800253c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800253e:	0014      	movs	r4, r2
 8002540:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <I2C_RequestMemoryWrite+0x60>)
{
 8002546:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	045b      	lsls	r3, r3, #17
 800254e:	f7ff ff29 	bl	80023a4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	9a07      	ldr	r2, [sp, #28]
 8002554:	9906      	ldr	r1, [sp, #24]
 8002556:	0028      	movs	r0, r5
 8002558:	f7ff ffc6 	bl	80024e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800255c:	2800      	cmp	r0, #0
 800255e:	d001      	beq.n	8002564 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 8002560:	2001      	movs	r0, #1
}
 8002562:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002564:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002566:	2e01      	cmp	r6, #1
 8002568:	d10d      	bne.n	8002586 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800256a:	b2e4      	uxtb	r4, r4
 800256c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800256e:	9b07      	ldr	r3, [sp, #28]
 8002570:	2200      	movs	r2, #0
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2180      	movs	r1, #128	; 0x80
 8002576:	9b06      	ldr	r3, [sp, #24]
 8002578:	0028      	movs	r0, r5
 800257a:	f7ff ff8d 	bl	8002498 <I2C_WaitOnFlagUntilTimeout>
 800257e:	1e43      	subs	r3, r0, #1
 8002580:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8002582:	b2c0      	uxtb	r0, r0
 8002584:	e7ed      	b.n	8002562 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002586:	0a22      	lsrs	r2, r4, #8
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258a:	9906      	ldr	r1, [sp, #24]
 800258c:	9a07      	ldr	r2, [sp, #28]
 800258e:	0028      	movs	r0, r5
 8002590:	f7ff ffaa 	bl	80024e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002594:	2800      	cmp	r0, #0
 8002596:	d1e3      	bne.n	8002560 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	e7e6      	b.n	800256a <I2C_RequestMemoryWrite+0x2e>
 800259c:	80002000 	.word	0x80002000

080025a0 <HAL_I2C_Init>:
{
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80025a6:	2c00      	cmp	r4, #0
 80025a8:	d03f      	beq.n	800262a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025aa:	0025      	movs	r5, r4
 80025ac:	3541      	adds	r5, #65	; 0x41
 80025ae:	782b      	ldrb	r3, [r5, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80025b6:	0022      	movs	r2, r4
 80025b8:	3240      	adds	r2, #64	; 0x40
 80025ba:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80025bc:	0020      	movs	r0, r4
 80025be:	f7fe ffc1 	bl	8001544 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80025c4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80025c8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ca:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68a6      	ldr	r6, [r4, #8]
 80025d0:	438a      	bics	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025d4:	6861      	ldr	r1, [r4, #4]
 80025d6:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <HAL_I2C_Init+0xa0>)
 80025d8:	400a      	ands	r2, r1
 80025da:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_I2C_Init+0xa4>)
 80025e0:	4011      	ands	r1, r2
 80025e2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e4:	2801      	cmp	r0, #1
 80025e6:	d121      	bne.n	800262c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	0209      	lsls	r1, r1, #8
 80025ec:	4331      	orrs	r1, r6
 80025ee:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025f0:	6858      	ldr	r0, [r3, #4]
 80025f2:	4915      	ldr	r1, [pc, #84]	; (8002648 <HAL_I2C_Init+0xa8>)
 80025f4:	4301      	orrs	r1, r0
 80025f6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025f8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fa:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025fc:	400a      	ands	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002600:	6961      	ldr	r1, [r4, #20]
 8002602:	6922      	ldr	r2, [r4, #16]
 8002604:	430a      	orrs	r2, r1
 8002606:	69a1      	ldr	r1, [r4, #24]
 8002608:	0209      	lsls	r1, r1, #8
 800260a:	430a      	orrs	r2, r1
 800260c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800260e:	6a21      	ldr	r1, [r4, #32]
 8002610:	69e2      	ldr	r2, [r4, #28]
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002616:	2201      	movs	r2, #1
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800261e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002622:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002624:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	3442      	adds	r4, #66	; 0x42
 8002628:	7020      	strb	r0, [r4, #0]
}
 800262a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800262c:	2184      	movs	r1, #132	; 0x84
 800262e:	0209      	lsls	r1, r1, #8
 8002630:	4331      	orrs	r1, r6
 8002632:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002634:	2802      	cmp	r0, #2
 8002636:	d1db      	bne.n	80025f0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0109      	lsls	r1, r1, #4
 800263c:	6059      	str	r1, [r3, #4]
 800263e:	e7d7      	b.n	80025f0 <HAL_I2C_Init+0x50>
 8002640:	f0ffffff 	.word	0xf0ffffff
 8002644:	ffff7fff 	.word	0xffff7fff
 8002648:	02008000 	.word	0x02008000

0800264c <HAL_I2C_Mem_Write>:
{
 800264c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	0007      	movs	r7, r0
{
 8002650:	b089      	sub	sp, #36	; 0x24
 8002652:	9307      	str	r3, [sp, #28]
 8002654:	ab0e      	add	r3, sp, #56	; 0x38
 8002656:	9206      	str	r2, [sp, #24]
 8002658:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800265a:	3741      	adds	r7, #65	; 0x41
{
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	9204      	str	r2, [sp, #16]
 8002660:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	783b      	ldrb	r3, [r7, #0]
{
 8002664:	0004      	movs	r4, r0
 8002666:	000d      	movs	r5, r1
    return HAL_BUSY;
 8002668:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800266a:	2b20      	cmp	r3, #32
 800266c:	d108      	bne.n	8002680 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 800266e:	2a00      	cmp	r2, #0
 8002670:	d002      	beq.n	8002678 <HAL_I2C_Mem_Write+0x2c>
 8002672:	9b05      	ldr	r3, [sp, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800267e:	2001      	movs	r0, #1
}
 8002680:	b009      	add	sp, #36	; 0x24
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002684:	0023      	movs	r3, r4
 8002686:	3340      	adds	r3, #64	; 0x40
 8002688:	9303      	str	r3, [sp, #12]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d0f7      	beq.n	8002680 <HAL_I2C_Mem_Write+0x34>
 8002690:	2201      	movs	r2, #1
 8002692:	9b03      	ldr	r3, [sp, #12]
 8002694:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002696:	f7ff f98b 	bl	80019b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800269a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800269c:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800269e:	9000      	str	r0, [sp, #0]
 80026a0:	2319      	movs	r3, #25
 80026a2:	2201      	movs	r2, #1
 80026a4:	0209      	lsls	r1, r1, #8
 80026a6:	0020      	movs	r0, r4
 80026a8:	f7ff fef6 	bl	8002498 <I2C_WaitOnFlagUntilTimeout>
 80026ac:	1e06      	subs	r6, r0, #0
 80026ae:	d1e6      	bne.n	800267e <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026b0:	2321      	movs	r3, #33	; 0x21
 80026b2:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b4:	0027      	movs	r7, r4
 80026b6:	331f      	adds	r3, #31
 80026b8:	3742      	adds	r7, #66	; 0x42
 80026ba:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 80026bc:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026be:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80026c0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80026c2:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80026c4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80026c6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c8:	9b02      	ldr	r3, [sp, #8]
 80026ca:	9a06      	ldr	r2, [sp, #24]
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80026d0:	0029      	movs	r1, r5
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	0020      	movs	r0, r4
 80026d6:	9b07      	ldr	r3, [sp, #28]
 80026d8:	f7ff ff30 	bl	800253c <I2C_RequestMemoryWrite>
 80026dc:	2800      	cmp	r0, #0
 80026de:	d002      	beq.n	80026e6 <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 80026e0:	9b03      	ldr	r3, [sp, #12]
 80026e2:	701e      	strb	r6, [r3, #0]
 80026e4:	e7cb      	b.n	800267e <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026e8:	2bff      	cmp	r3, #255	; 0xff
 80026ea:	d953      	bls.n	8002794 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ec:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026ee:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f2:	045b      	lsls	r3, r3, #17
 80026f4:	9000      	str	r0, [sp, #0]
 80026f6:	0029      	movs	r1, r5
 80026f8:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026fa:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026fc:	f7ff fe52 	bl	80023a4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002700:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	9a02      	ldr	r2, [sp, #8]
 8002704:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002706:	0020      	movs	r0, r4
 8002708:	f7ff feee 	bl	80024e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800270c:	2800      	cmp	r0, #0
 800270e:	d1b6      	bne.n	800267e <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002716:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002718:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800271a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800271c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800271e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002720:	3b01      	subs	r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002726:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002728:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800272a:	b292      	uxth	r2, r2
 800272c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800272e:	2b00      	cmp	r3, #0
 8002730:	d017      	beq.n	8002762 <HAL_I2C_Mem_Write+0x116>
 8002732:	2a00      	cmp	r2, #0
 8002734:	d115      	bne.n	8002762 <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002736:	9b02      	ldr	r3, [sp, #8]
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	0020      	movs	r0, r4
 800273e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002740:	f7ff feaa 	bl	8002498 <I2C_WaitOnFlagUntilTimeout>
 8002744:	2800      	cmp	r0, #0
 8002746:	d19a      	bne.n	800267e <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800274a:	2bff      	cmp	r3, #255	; 0xff
 800274c:	d92a      	bls.n	80027a4 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800274e:	23ff      	movs	r3, #255	; 0xff
 8002750:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	9000      	str	r0, [sp, #0]
 8002758:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800275a:	0029      	movs	r1, r5
 800275c:	0020      	movs	r0, r4
 800275e:	f7ff fe21 	bl	80023a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002762:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1cc      	bne.n	8002702 <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002768:	9a02      	ldr	r2, [sp, #8]
 800276a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800276c:	0020      	movs	r0, r4
 800276e:	f7ff fe6b 	bl	8002448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002772:	2800      	cmp	r0, #0
 8002774:	d000      	beq.n	8002778 <HAL_I2C_Mem_Write+0x12c>
 8002776:	e782      	b.n	800267e <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	2120      	movs	r1, #32
 800277a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800277c:	4d0d      	ldr	r5, [pc, #52]	; (80027b4 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	402a      	ands	r2, r5
 8002784:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002788:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800278a:	3341      	adds	r3, #65	; 0x41
 800278c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278e:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8002790:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002792:	e775      	b.n	8002680 <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002794:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002796:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002798:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800279a:	b292      	uxth	r2, r2
 800279c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	9000      	str	r0, [sp, #0]
 80027a2:	e7a8      	b.n	80026f6 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80027a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027a6:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 80027a8:	b292      	uxth	r2, r2
 80027aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	9000      	str	r0, [sp, #0]
 80027b0:	e7d3      	b.n	800275a <HAL_I2C_Mem_Write+0x10e>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	fe00e800 	.word	0xfe00e800

080027b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	0004      	movs	r4, r0
 80027bc:	3441      	adds	r4, #65	; 0x41
 80027be:	7822      	ldrb	r2, [r4, #0]
{
 80027c0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c6:	2a20      	cmp	r2, #32
 80027c8:	d118      	bne.n	80027fc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80027ca:	001d      	movs	r5, r3
 80027cc:	3540      	adds	r5, #64	; 0x40
 80027ce:	782e      	ldrb	r6, [r5, #0]
 80027d0:	2e01      	cmp	r6, #1
 80027d2:	d013      	beq.n	80027fc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80027d4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d6:	3022      	adds	r0, #34	; 0x22
 80027d8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80027da:	681e      	ldr	r6, [r3, #0]
 80027dc:	3823      	subs	r0, #35	; 0x23
 80027de:	4386      	bics	r6, r0
 80027e0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027e2:	681e      	ldr	r6, [r3, #0]
 80027e4:	4f06      	ldr	r7, [pc, #24]	; (8002800 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80027e6:	403e      	ands	r6, r7
 80027e8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80027ea:	681e      	ldr	r6, [r3, #0]
 80027ec:	4331      	orrs	r1, r6
 80027ee:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80027f0:	6819      	ldr	r1, [r3, #0]
 80027f2:	4308      	orrs	r0, r1
 80027f4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80027f6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80027fa:	7028      	strb	r0, [r5, #0]
  }
}
 80027fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	ffffefff 	.word	0xffffefff

08002804 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	0005      	movs	r5, r0
 8002808:	3541      	adds	r5, #65	; 0x41
 800280a:	782a      	ldrb	r2, [r5, #0]
{
 800280c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800280e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002810:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002812:	2a20      	cmp	r2, #32
 8002814:	d117      	bne.n	8002846 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002816:	001c      	movs	r4, r3
 8002818:	3440      	adds	r4, #64	; 0x40
 800281a:	7826      	ldrb	r6, [r4, #0]
 800281c:	2e01      	cmp	r6, #1
 800281e:	d012      	beq.n	8002846 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002820:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002822:	3022      	adds	r0, #34	; 0x22
 8002824:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002826:	681e      	ldr	r6, [r3, #0]
 8002828:	3823      	subs	r0, #35	; 0x23
 800282a:	4386      	bics	r6, r0
 800282c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800282e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002830:	4f05      	ldr	r7, [pc, #20]	; (8002848 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8002832:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002834:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002836:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002838:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	4308      	orrs	r0, r1
 800283e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002840:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002844:	7020      	strb	r0, [r4, #0]
  }
}
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002848:	fffff0ff 	.word	0xfffff0ff

0800284c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	0004      	movs	r4, r0
 8002850:	b087      	sub	sp, #28
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8002852:	2501      	movs	r5, #1
  if (hpcd == NULL)
 8002854:	2800      	cmp	r0, #0
 8002856:	d031      	beq.n	80028bc <HAL_PCD_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002858:	4d2c      	ldr	r5, [pc, #176]	; (800290c <HAL_PCD_Init+0xc0>)
 800285a:	5d43      	ldrb	r3, [r0, r5]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d104      	bne.n	800286c <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002862:	228a      	movs	r2, #138	; 0x8a
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	5483      	strb	r3, [r0, r2]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002868:	f002 f984 	bl	8004b74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800286c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800286e:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002870:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 8002872:	f000 ff99 	bl	80037a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002876:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002878:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800287a:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287c:	6861      	ldr	r1, [r4, #4]
 800287e:	428b      	cmp	r3, r1
 8002880:	d31f      	bcc.n	80028c2 <HAL_PCD_Init+0x76>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002882:	2300      	movs	r3, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002884:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002886:	4299      	cmp	r1, r3
 8002888:	d82c      	bhi.n	80028e4 <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800288a:	0023      	movs	r3, r4
 800288c:	466a      	mov	r2, sp
 800288e:	3310      	adds	r3, #16
 8002890:	cb43      	ldmia	r3!, {r0, r1, r6}
 8002892:	c243      	stmia	r2!, {r0, r1, r6}
 8002894:	cb03      	ldmia	r3!, {r0, r1}
 8002896:	c203      	stmia	r2!, {r0, r1}
 8002898:	68a2      	ldr	r2, [r4, #8]
 800289a:	68e3      	ldr	r3, [r4, #12]
 800289c:	6861      	ldr	r1, [r4, #4]
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	f000 ff8c 	bl	80037bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	1d62      	adds	r2, r4, #5
 80028a8:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 80028aa:	2201      	movs	r2, #1
 80028ac:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  
  return HAL_OK;
 80028ae:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 80028b0:	69e3      	ldr	r3, [r4, #28]
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d102      	bne.n	80028bc <HAL_PCD_Init+0x70>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028b6:	0020      	movs	r0, r4
 80028b8:	f000 fba2 	bl	8003000 <HAL_PCDEx_ActivateLPM>
}
 80028bc:	0028      	movs	r0, r5
 80028be:	b007      	add	sp, #28
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	18a2      	adds	r2, r4, r2
 80028c6:	0017      	movs	r7, r2
 80028c8:	3729      	adds	r7, #41	; 0x29
 80028ca:	703e      	strb	r6, [r7, #0]
    hpcd->IN_ep[i].num = i;
 80028cc:	3f01      	subs	r7, #1
 80028ce:	703b      	strb	r3, [r7, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d0:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d2:	70f8      	strb	r0, [r7, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d4:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028d6:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80028d8:	1c9a      	adds	r2, r3, #2
 80028da:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028dc:	3301      	adds	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 80028de:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e7cc      	b.n	800287e <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	18a2      	adds	r2, r4, r2
 80028e8:	0016      	movs	r6, r2
 80028ea:	362a      	adds	r6, #42	; 0x2a
 80028ec:	36ff      	adds	r6, #255	; 0xff
 80028ee:	7030      	strb	r0, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028f0:	32fc      	adds	r2, #252	; 0xfc
    hpcd->OUT_ep[i].num = i;
 80028f2:	3e01      	subs	r6, #1
 80028f4:	7033      	strb	r3, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028f6:	70f0      	strb	r0, [r6, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028f8:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028fa:	6410      	str	r0, [r2, #64]	; 0x40
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028fc:	001a      	movs	r2, r3
 80028fe:	320a      	adds	r2, #10
 8002900:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002902:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002904:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e7bd      	b.n	8002886 <HAL_PCD_Init+0x3a>
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	00000229 	.word	0x00000229

08002910 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002910:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8002912:	258a      	movs	r5, #138	; 0x8a
 8002914:	00ad      	lsls	r5, r5, #2
 8002916:	5d43      	ldrb	r3, [r0, r5]
{
 8002918:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800291a:	2002      	movs	r0, #2
 800291c:	2b01      	cmp	r3, #1
 800291e:	d009      	beq.n	8002934 <HAL_PCD_Start+0x24>
 8002920:	2301      	movs	r3, #1
  (void)USB_DevConnect(hpcd->Instance);
 8002922:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002924:	5563      	strb	r3, [r4, r5]
  (void)USB_DevConnect(hpcd->Instance);
 8002926:	f001 f99e 	bl	8003c66 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	f000 ff32 	bl	8003794 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002930:	2000      	movs	r0, #0
 8002932:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8002934:	bd70      	pop	{r4, r5, r6, pc}

08002936 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002936:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8002938:	258a      	movs	r5, #138	; 0x8a
 800293a:	00ad      	lsls	r5, r5, #2
 800293c:	5d43      	ldrb	r3, [r0, r5]
{
 800293e:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8002940:	2002      	movs	r0, #2
 8002942:	2b01      	cmp	r3, #1
 8002944:	d008      	beq.n	8002958 <HAL_PCD_SetAddress+0x22>
 8002946:	2301      	movs	r3, #1
 8002948:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 800294a:	1d63      	adds	r3, r4, #5
 800294c:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	f001 f982 	bl	8003c58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002954:	2000      	movs	r0, #0
 8002956:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8002958:	bd70      	pop	{r4, r5, r6, pc}

0800295a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800295a:	b570      	push	{r4, r5, r6, lr}
 800295c:	2607      	movs	r6, #7
 800295e:	0004      	movs	r4, r0
 8002960:	400e      	ands	r6, r1
 8002962:	0170      	lsls	r0, r6, #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002964:	b249      	sxtb	r1, r1
 8002966:	1825      	adds	r5, r4, r0
 8002968:	2900      	cmp	r1, #0
 800296a:	da1e      	bge.n	80029aa <HAL_PCD_EP_Open+0x50>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296c:	0001      	movs	r1, r0
    ep->is_in = 1U;
 800296e:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002970:	3128      	adds	r1, #40	; 0x28
 8002972:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8002974:	3529      	adds	r5, #41	; 0x29
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8002976:	7028      	strb	r0, [r5, #0]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8002978:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800297a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800297c:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 800297e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002980:	2a00      	cmp	r2, #0
 8002982:	d000      	beq.n	8002986 <HAL_PCD_EP_Open+0x2c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002984:	81ce      	strh	r6, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002986:	2b02      	cmp	r3, #2
 8002988:	d101      	bne.n	800298e <HAL_PCD_EP_Open+0x34>
  {
    ep->data_pid_start = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	710b      	strb	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 800298e:	258a      	movs	r5, #138	; 0x8a
 8002990:	00ad      	lsls	r5, r5, #2
 8002992:	5d63      	ldrb	r3, [r4, r5]
 8002994:	2002      	movs	r0, #2
 8002996:	2b01      	cmp	r3, #1
 8002998:	d006      	beq.n	80029a8 <HAL_PCD_EP_Open+0x4e>
 800299a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800299c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800299e:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029a0:	f000 ff22 	bl	80037e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a4:	2000      	movs	r0, #0
 80029a6:	5560      	strb	r0, [r4, r5]

  return ret;
}
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029aa:	0001      	movs	r1, r0
 80029ac:	3129      	adds	r1, #41	; 0x29
 80029ae:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80029b0:	352a      	adds	r5, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80029b4:	35ff      	adds	r5, #255	; 0xff
 80029b6:	2000      	movs	r0, #0
 80029b8:	e7dd      	b.n	8002976 <HAL_PCD_EP_Open+0x1c>

080029ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ba:	b570      	push	{r4, r5, r6, lr}
 80029bc:	0004      	movs	r4, r0
 80029be:	2007      	movs	r0, #7
 80029c0:	4008      	ands	r0, r1
 80029c2:	0143      	lsls	r3, r0, #5
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029c4:	b249      	sxtb	r1, r1
 80029c6:	18e2      	adds	r2, r4, r3
 80029c8:	2900      	cmp	r1, #0
 80029ca:	da13      	bge.n	80029f4 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029cc:	3328      	adds	r3, #40	; 0x28
 80029ce:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80029d0:	2301      	movs	r3, #1
 80029d2:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 80029d4:	258a      	movs	r5, #138	; 0x8a
    ep->is_in = 0U;
 80029d6:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 80029d8:	00ad      	lsls	r5, r5, #2
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029da:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80029dc:	5d63      	ldrb	r3, [r4, r5]
 80029de:	2002      	movs	r0, #2
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d006      	beq.n	80029f2 <HAL_PCD_EP_Close+0x38>
 80029e4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029e6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80029e8:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ea:	f001 f83f 	bl	8003a6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ee:	2000      	movs	r0, #0
 80029f0:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	3329      	adds	r3, #41	; 0x29
 80029f6:	33ff      	adds	r3, #255	; 0xff
    ep->is_in = 0U;
 80029f8:	322a      	adds	r2, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80029fc:	32ff      	adds	r2, #255	; 0xff
 80029fe:	2300      	movs	r3, #0
 8002a00:	e7e8      	b.n	80029d4 <HAL_PCD_EP_Close+0x1a>

08002a02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a04:	2407      	movs	r4, #7
 8002a06:	4021      	ands	r1, r4
 8002a08:	014c      	lsls	r4, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a0a:	1906      	adds	r6, r0, r4
 8002a0c:	0037      	movs	r7, r6
 8002a0e:	37fc      	adds	r7, #252	; 0xfc
  ep->xfer_len = len;
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
  ep->xfer_count = 0U;
  ep->is_in = 0U;
 8002a12:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8002a14:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8002a16:	332a      	adds	r3, #42	; 0x2a
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a18:	3629      	adds	r6, #41	; 0x29
  ep->is_in = 0U;
 8002a1a:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	36ff      	adds	r6, #255	; 0xff
  ep->xfer_count = 0U;
 8002a1e:	64bd      	str	r5, [r7, #72]	; 0x48
  ep->xfer_buff = pBuf;
 8002a20:	643a      	str	r2, [r7, #64]	; 0x40
  ep->is_in = 0U;
 8002a22:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a24:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a26:	0021      	movs	r1, r4
 8002a28:	3129      	adds	r1, #41	; 0x29
 8002a2a:	31ff      	adds	r1, #255	; 0xff
 8002a2c:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2e:	6800      	ldr	r0, [r0, #0]
 8002a30:	f001 f93c 	bl	8003cac <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002a34:	0028      	movs	r0, r5
 8002a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a38 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a38:	2307      	movs	r3, #7
 8002a3a:	4019      	ands	r1, r3
 8002a3c:	310a      	adds	r1, #10
 8002a3e:	0149      	lsls	r1, r1, #5
 8002a40:	1840      	adds	r0, r0, r1
 8002a42:	6840      	ldr	r0, [r0, #4]
}
 8002a44:	4770      	bx	lr

08002a46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a46:	b570      	push	{r4, r5, r6, lr}
 8002a48:	2407      	movs	r4, #7
 8002a4a:	4021      	ands	r1, r4
 8002a4c:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a4e:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8002a50:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8002a52:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8002a54:	0023      	movs	r3, r4
  ep->xfer_buff = pBuf;
 8002a56:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8002a58:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8002a5a:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002a5c:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5e:	3428      	adds	r4, #40	; 0x28
  ep->is_in = 1U;
 8002a60:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a62:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	0029      	movs	r1, r5
 8002a66:	3128      	adds	r1, #40	; 0x28
 8002a68:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	f001 f91e 	bl	8003cac <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002a70:	0030      	movs	r0, r6
 8002a72:	bd70      	pop	{r4, r5, r6, pc}

08002a74 <HAL_PCD_IRQHandler>:
{
 8002a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a76:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a78:	6800      	ldr	r0, [r0, #0]
 8002a7a:	f001 f8fc 	bl	8003c76 <USB_ReadInterrupts>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a7e:	2780      	movs	r7, #128	; 0x80
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a80:	0403      	lsls	r3, r0, #16
 8002a82:	d500      	bpl.n	8002a86 <HAL_PCD_IRQHandler+0x12>
 8002a84:	e0d9      	b.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a86:	6820      	ldr	r0, [r4, #0]
 8002a88:	f001 f8f5 	bl	8003c76 <USB_ReadInterrupts>
 8002a8c:	0543      	lsls	r3, r0, #21
 8002a8e:	d50c      	bpl.n	8002aaa <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	49ac      	ldr	r1, [pc, #688]	; (8002d44 <HAL_PCD_IRQHandler+0x2d0>)
 8002a94:	3306      	adds	r3, #6
 8002a96:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8002a98:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8002a9e:	f002 f8aa 	bl	8004bf6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	0020      	movs	r0, r4
 8002aa6:	f7ff ff46 	bl	8002936 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	f001 f8e3 	bl	8003c76 <USB_ReadInterrupts>
 8002ab0:	0443      	lsls	r3, r0, #17
 8002ab2:	d505      	bpl.n	8002ac0 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	49a4      	ldr	r1, [pc, #656]	; (8002d48 <HAL_PCD_IRQHandler+0x2d4>)
 8002ab8:	3306      	adds	r3, #6
 8002aba:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002abc:	400a      	ands	r2, r1
 8002abe:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	f001 f8d8 	bl	8003c76 <USB_ReadInterrupts>
 8002ac6:	0483      	lsls	r3, r0, #18
 8002ac8:	d505      	bpl.n	8002ad6 <HAL_PCD_IRQHandler+0x62>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	499f      	ldr	r1, [pc, #636]	; (8002d4c <HAL_PCD_IRQHandler+0x2d8>)
 8002ace:	3306      	adds	r3, #6
 8002ad0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ad6:	6820      	ldr	r0, [r4, #0]
 8002ad8:	f001 f8cd 	bl	8003c76 <USB_ReadInterrupts>
 8002adc:	04c3      	lsls	r3, r0, #19
 8002ade:	d51c      	bpl.n	8002b1a <HAL_PCD_IRQHandler+0xa6>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ae8:	438a      	bics	r2, r1
 8002aea:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002aec:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002aee:	1849      	adds	r1, r1, r1
 8002af0:	438a      	bics	r2, r1
 8002af2:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8002af4:	2398      	movs	r3, #152	; 0x98
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	5ce2      	ldrb	r2, [r4, r3]
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d104      	bne.n	8002b08 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8002afe:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b00:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8002b02:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b04:	f000 fa90 	bl	8003028 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8002b08:	0020      	movs	r0, r4
 8002b0a:	f002 f897 	bl	8004c3c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	498f      	ldr	r1, [pc, #572]	; (8002d50 <HAL_PCD_IRQHandler+0x2dc>)
 8002b12:	3306      	adds	r3, #6
 8002b14:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002b16:	400a      	ands	r2, r1
 8002b18:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b1a:	6820      	ldr	r0, [r4, #0]
 8002b1c:	f001 f8ab 	bl	8003c76 <USB_ReadInterrupts>
 8002b20:	0503      	lsls	r3, r0, #20
 8002b22:	d515      	bpl.n	8002b50 <HAL_PCD_IRQHandler+0xdc>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b24:	2208      	movs	r2, #8
 8002b26:	6820      	ldr	r0, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b28:	4d8a      	ldr	r5, [pc, #552]	; (8002d54 <HAL_PCD_IRQHandler+0x2e0>)
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b2a:	1c83      	adds	r3, r0, #2
 8002b2c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	87da      	strh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b32:	1d81      	adds	r1, r0, #6
 8002b34:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8002b36:	402a      	ands	r2, r5
 8002b38:	87ca      	strh	r2, [r1, #62]	; 0x3e
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002b42:	f001 f898 	bl	8003c76 <USB_ReadInterrupts>
 8002b46:	04c3      	lsls	r3, r0, #19
 8002b48:	d402      	bmi.n	8002b50 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_SuspendCallback(hpcd);
 8002b4a:	0020      	movs	r0, r4
 8002b4c:	f002 f864 	bl	8004c18 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002b50:	6820      	ldr	r0, [r4, #0]
 8002b52:	f001 f890 	bl	8003c76 <USB_ReadInterrupts>
 8002b56:	2580      	movs	r5, #128	; 0x80
 8002b58:	4228      	tst	r0, r5
 8002b5a:	d020      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x12a>
    if (hpcd->LPM_State == LPM_L0)
 8002b5c:	2098      	movs	r0, #152	; 0x98
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002b5e:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8002b60:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002b62:	1d99      	adds	r1, r3, #6
 8002b64:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8002b66:	43aa      	bics	r2, r5
 8002b68:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8002b6a:	5c22      	ldrb	r2, [r4, r0]
 8002b6c:	2a00      	cmp	r2, #0
 8002b6e:	d000      	beq.n	8002b72 <HAL_PCD_IRQHandler+0xfe>
 8002b70:	e1bb      	b.n	8002eea <HAL_PCD_IRQHandler+0x476>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002b72:	2104      	movs	r1, #4
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b78:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002b7a:	4329      	orrs	r1, r5
 8002b7c:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b7e:	2108      	movs	r1, #8
 8002b80:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
 8002b82:	4329      	orrs	r1, r5
 8002b84:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8002b86:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b88:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8002b8a:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b8c:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b8e:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2299      	movs	r2, #153	; 0x99
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b9a:	f000 fa45 	bl	8003028 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002b9e:	6820      	ldr	r0, [r4, #0]
 8002ba0:	f001 f869 	bl	8003c76 <USB_ReadInterrupts>
 8002ba4:	0583      	lsls	r3, r0, #22
 8002ba6:	d508      	bpl.n	8002bba <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	496b      	ldr	r1, [pc, #428]	; (8002d58 <HAL_PCD_IRQHandler+0x2e4>)
 8002bac:	3306      	adds	r3, #6
 8002bae:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8002bb0:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8002bb6:	f002 f817 	bl	8004be8 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002bba:	6820      	ldr	r0, [r4, #0]
 8002bbc:	f001 f85b 	bl	8003c76 <USB_ReadInterrupts>
 8002bc0:	05c3      	lsls	r3, r0, #23
 8002bc2:	d505      	bpl.n	8002bd0 <HAL_PCD_IRQHandler+0x15c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	4965      	ldr	r1, [pc, #404]	; (8002d5c <HAL_PCD_IRQHandler+0x2e8>)
 8002bc8:	3306      	adds	r3, #6
 8002bca:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002bcc:	400a      	ands	r2, r1
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8002bd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bd2:	260f      	movs	r6, #15
    wIstr = hpcd->Instance->ISTR;
 8002bd4:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 8002bd6:	b289      	uxth	r1, r1
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bd8:	400e      	ands	r6, r1
    if (epindex == 0U)
 8002bda:	d000      	beq.n	8002bde <HAL_PCD_IRQHandler+0x16a>
 8002bdc:	e0d0      	b.n	8002d80 <HAL_PCD_IRQHandler+0x30c>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bde:	2310      	movs	r3, #16
 8002be0:	4019      	ands	r1, r3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002be2:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002be4:	2900      	cmp	r1, #0
 8002be6:	d12f      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x1d4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002be8:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <HAL_PCD_IRQHandler+0x2ec>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	0212      	lsls	r2, r2, #8
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	3350      	adds	r3, #80	; 0x50
 8002bf8:	881a      	ldrh	r2, [r3, #0]
 8002bfa:	0023      	movs	r3, r4
 8002bfc:	3328      	adds	r3, #40	; 0x28
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	18c0      	adds	r0, r0, r3
 8002c04:	4b57      	ldr	r3, [pc, #348]	; (8002d64 <HAL_PCD_IRQHandler+0x2f0>)
 8002c06:	1880      	adds	r0, r0, r2
 8002c08:	18c0      	adds	r0, r0, r3
 8002c0a:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 8002c0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c0e:	059b      	lsls	r3, r3, #22
 8002c10:	0d9b      	lsrs	r3, r3, #22
 8002c12:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c18:	0020      	movs	r0, r4
 8002c1a:	f001 ffdb 	bl	8004bd4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c1e:	1d63      	adds	r3, r4, #5
 8002c20:	7fda      	ldrb	r2, [r3, #31]
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
 8002c26:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	7fd9      	ldrb	r1, [r3, #31]
 8002c30:	4311      	orrs	r1, r2
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	324c      	adds	r2, #76	; 0x4c
 8002c36:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 8002c38:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c3a:	6820      	ldr	r0, [r4, #0]
 8002c3c:	1d82      	adds	r2, r0, #6
 8002c3e:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	dbc5      	blt.n	8002bd2 <HAL_PCD_IRQHandler+0x15e>
 8002c46:	e71e      	b.n	8002a86 <HAL_PCD_IRQHandler+0x12>
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c48:	2680      	movs	r6, #128	; 0x80
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c4a:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c4c:	0136      	lsls	r6, r6, #4
 8002c4e:	401e      	ands	r6, r3
 8002c50:	d021      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x222>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c52:	0003      	movs	r3, r0
 8002c54:	3350      	adds	r3, #80	; 0x50
 8002c56:	881a      	ldrh	r2, [r3, #0]
 8002c58:	2394      	movs	r3, #148	; 0x94
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	5ce3      	ldrb	r3, [r4, r3]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c5e:	218c      	movs	r1, #140	; 0x8c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	18c3      	adds	r3, r0, r3
 8002c64:	189b      	adds	r3, r3, r2
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <HAL_PCD_IRQHandler+0x2f4>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c68:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	0022      	movs	r2, r4
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	3229      	adds	r2, #41	; 0x29
 8002c72:	059b      	lsls	r3, r3, #22
 8002c74:	0d9b      	lsrs	r3, r3, #22
 8002c76:	32ff      	adds	r2, #255	; 0xff
 8002c78:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c7a:	1861      	adds	r1, r4, r1
 8002c7c:	88d2      	ldrh	r2, [r2, #6]
 8002c7e:	f001 f8fd 	bl	8003e7c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	4939      	ldr	r1, [pc, #228]	; (8002d6c <HAL_PCD_IRQHandler+0x2f8>)
 8002c86:	8813      	ldrh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c88:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	433b      	orrs	r3, r7
 8002c8e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c90:	f001 ff8c 	bl	8004bac <HAL_PCD_SetupStageCallback>
 8002c94:	e7d1      	b.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	dace      	bge.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c9c:	8803      	ldrh	r3, [r0, #0]
 8002c9e:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <HAL_PCD_IRQHandler+0x2f8>)
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ca0:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	433b      	orrs	r3, r7
 8002ca6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ca8:	0003      	movs	r3, r0
 8002caa:	3350      	adds	r3, #80	; 0x50
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	2394      	movs	r3, #148	; 0x94
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	5ce3      	ldrb	r3, [r4, r3]
 8002cb4:	3529      	adds	r5, #41	; 0x29
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	18c3      	adds	r3, r0, r3
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_PCD_IRQHandler+0x2f4>)
 8002cbe:	35ff      	adds	r5, #255	; 0xff
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	059b      	lsls	r3, r3, #22
 8002cc6:	0d9b      	lsrs	r3, r3, #22
 8002cc8:	61eb      	str	r3, [r5, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cca:	d00d      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x274>
 8002ccc:	6969      	ldr	r1, [r5, #20]
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cd2:	88ea      	ldrh	r2, [r5, #6]
 8002cd4:	f001 f8d2 	bl	8003e7c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002cd8:	696b      	ldr	r3, [r5, #20]
 8002cda:	69ea      	ldr	r2, [r5, #28]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cdc:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ce2:	0020      	movs	r0, r4
 8002ce4:	f001 ff6b 	bl	8004bbe <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_PCD_IRQHandler+0x2f4>)
 8002cec:	000b      	movs	r3, r1
 8002cee:	3350      	adds	r3, #80	; 0x50
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	188a      	adds	r2, r1, r2
 8002cf4:	18d2      	adds	r2, r2, r3
 8002cf6:	692b      	ldr	r3, [r5, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10f      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x2a8>
 8002cfc:	8813      	ldrh	r3, [r2, #0]
 8002cfe:	481c      	ldr	r0, [pc, #112]	; (8002d70 <HAL_PCD_IRQHandler+0x2fc>)
 8002d00:	4018      	ands	r0, r3
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_PCD_IRQHandler+0x300>)
 8002d04:	4303      	orrs	r3, r0
 8002d06:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d08:	880b      	ldrh	r3, [r1, #0]
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_PCD_IRQHandler+0x304>)
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	23c0      	movs	r3, #192	; 0xc0
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	4053      	eors	r3, r2
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_PCD_IRQHandler+0x308>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	800b      	strh	r3, [r1, #0]
 8002d1a:	e78e      	b.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d1e:	d806      	bhi.n	8002d2e <HAL_PCD_IRQHandler+0x2ba>
 8002d20:	2501      	movs	r5, #1
 8002d22:	0858      	lsrs	r0, r3, #1
 8002d24:	402b      	ands	r3, r5
 8002d26:	18c0      	adds	r0, r0, r3
 8002d28:	0280      	lsls	r0, r0, #10
 8002d2a:	8010      	strh	r0, [r2, #0]
 8002d2c:	e7ec      	b.n	8002d08 <HAL_PCD_IRQHandler+0x294>
 8002d2e:	251f      	movs	r5, #31
 8002d30:	0958      	lsrs	r0, r3, #5
 8002d32:	402b      	ands	r3, r5
 8002d34:	425d      	negs	r5, r3
 8002d36:	416b      	adcs	r3, r5
 8002d38:	1ac0      	subs	r0, r0, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_PCD_IRQHandler+0x300>)
 8002d3c:	0280      	lsls	r0, r0, #10
 8002d3e:	4318      	orrs	r0, r3
 8002d40:	e7f3      	b.n	8002d2a <HAL_PCD_IRQHandler+0x2b6>
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	fffffbff 	.word	0xfffffbff
 8002d48:	ffffbfff 	.word	0xffffbfff
 8002d4c:	ffffdfff 	.word	0xffffdfff
 8002d50:	ffffefff 	.word	0xffffefff
 8002d54:	fffff7ff 	.word	0xfffff7ff
 8002d58:	fffffdff 	.word	0xfffffdff
 8002d5c:	fffffeff 	.word	0xfffffeff
 8002d60:	ffff8f0f 	.word	0xffff8f0f
 8002d64:	00000402 	.word	0x00000402
 8002d68:	00000406 	.word	0x00000406
 8002d6c:	00000f8f 	.word	0x00000f8f
 8002d70:	ffff83ff 	.word	0xffff83ff
 8002d74:	ffff8000 	.word	0xffff8000
 8002d78:	ffffbf8f 	.word	0xffffbf8f
 8002d7c:	00008080 	.word	0x00008080
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d80:	00b3      	lsls	r3, r6, #2
 8002d82:	18c2      	adds	r2, r0, r3
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	8813      	ldrh	r3, [r2, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	9300      	str	r3, [sp, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d8c:	466b      	mov	r3, sp
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5e5b      	ldrsh	r3, [r3, r1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da3c      	bge.n	8002e10 <HAL_PCD_IRQHandler+0x39c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d96:	8813      	ldrh	r3, [r2, #0]
 8002d98:	4956      	ldr	r1, [pc, #344]	; (8002ef4 <HAL_PCD_IRQHandler+0x480>)
 8002d9a:	0005      	movs	r5, r0
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	433b      	orrs	r3, r7
 8002da0:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 8002da2:	0173      	lsls	r3, r6, #5
 8002da4:	18e3      	adds	r3, r4, r3
 8002da6:	001a      	movs	r2, r3
 8002da8:	3235      	adds	r2, #53	; 0x35
 8002daa:	32ff      	adds	r2, #255	; 0xff
 8002dac:	7811      	ldrb	r1, [r2, #0]
 8002dae:	3550      	adds	r5, #80	; 0x50
 8002db0:	3a0c      	subs	r2, #12
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d156      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x3f0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	8829      	ldrh	r1, [r5, #0]
 8002dba:	00d2      	lsls	r2, r2, #3
 8002dbc:	1852      	adds	r2, r2, r1
 8002dbe:	494e      	ldr	r1, [pc, #312]	; (8002ef8 <HAL_PCD_IRQHandler+0x484>)
 8002dc0:	1812      	adds	r2, r2, r0
 8002dc2:	1852      	adds	r2, r2, r1
 8002dc4:	8815      	ldrh	r5, [r2, #0]
 8002dc6:	05ad      	lsls	r5, r5, #22
 8002dc8:	0dad      	lsrs	r5, r5, #22
          if (count != 0U)
 8002dca:	d008      	beq.n	8002dde <HAL_PCD_IRQHandler+0x36a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dcc:	001a      	movs	r2, r3
 8002dce:	33fc      	adds	r3, #252	; 0xfc
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	32fe      	adds	r2, #254	; 0xfe
 8002dd4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002dd6:	002b      	movs	r3, r5
 8002dd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dda:	f001 f84f 	bl	8003e7c <USB_ReadPMA>
 8002dde:	0171      	lsls	r1, r6, #5
 8002de0:	1863      	adds	r3, r4, r1
        ep->xfer_count += count;
 8002de2:	0018      	movs	r0, r3
 8002de4:	30fc      	adds	r0, #252	; 0xfc
 8002de6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	1952      	adds	r2, r2, r5
 8002dec:	6482      	str	r2, [r0, #72]	; 0x48
        ep->xfer_buff += count;
 8002dee:	6c02      	ldr	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002df0:	6c43      	ldr	r3, [r0, #68]	; 0x44
        ep->xfer_buff += count;
 8002df2:	1952      	adds	r2, r2, r5
 8002df4:	6402      	str	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002df6:	469c      	mov	ip, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_PCD_IRQHandler+0x38e>
 8002dfc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002dfe:	4285      	cmp	r5, r0
 8002e00:	d267      	bcs.n	8002ed2 <HAL_PCD_IRQHandler+0x45e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e02:	1861      	adds	r1, r4, r1
 8002e04:	3129      	adds	r1, #41	; 0x29
 8002e06:	31ff      	adds	r1, #255	; 0xff
 8002e08:	7809      	ldrb	r1, [r1, #0]
 8002e0a:	0020      	movs	r0, r4
 8002e0c:	f001 fed7 	bl	8004bbe <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e10:	9b00      	ldr	r3, [sp, #0]
 8002e12:	423b      	tst	r3, r7
 8002e14:	d100      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x3a4>
 8002e16:	e710      	b.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
 8002e18:	6823      	ldr	r3, [r4, #0]
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e1a:	00b2      	lsls	r2, r6, #2
 8002e1c:	1899      	adds	r1, r3, r2
 8002e1e:	880a      	ldrh	r2, [r1, #0]
 8002e20:	4836      	ldr	r0, [pc, #216]	; (8002efc <HAL_PCD_IRQHandler+0x488>)

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e22:	0176      	lsls	r6, r6, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e24:	4002      	ands	r2, r0
 8002e26:	2080      	movs	r0, #128	; 0x80
 8002e28:	0200      	lsls	r0, r0, #8
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e2a:	19a6      	adds	r6, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e2c:	4302      	orrs	r2, r0
 8002e2e:	800a      	strh	r2, [r1, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e30:	0031      	movs	r1, r6
 8002e32:	001a      	movs	r2, r3
 8002e34:	3128      	adds	r1, #40	; 0x28
 8002e36:	7808      	ldrb	r0, [r1, #0]
 8002e38:	3250      	adds	r2, #80	; 0x50
 8002e3a:	8812      	ldrh	r2, [r2, #0]
 8002e3c:	00c0      	lsls	r0, r0, #3
 8002e3e:	181b      	adds	r3, r3, r0
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	4a2f      	ldr	r2, [pc, #188]	; (8002f00 <HAL_PCD_IRQHandler+0x48c>)
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e44:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	881a      	ldrh	r2, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8002e4a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e4c:	0592      	lsls	r2, r2, #22
 8002e4e:	0d92      	lsrs	r2, r2, #22
 8002e50:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002e52:	189a      	adds	r2, r3, r2
        if (ep->xfer_len == 0U)
 8002e54:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8002e56:	63f2      	str	r2, [r6, #60]	; 0x3c
 8002e58:	7809      	ldrb	r1, [r1, #0]
        if (ep->xfer_len == 0U)
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d142      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x470>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e5e:	f001 feb9 	bl	8004bd4 <HAL_PCD_DataInStageCallback>
 8002e62:	e6ea      	b.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	0091      	lsls	r1, r2, #2
 8002e68:	1841      	adds	r1, r0, r1
 8002e6a:	8809      	ldrh	r1, [r1, #0]
 8002e6c:	468c      	mov	ip, r1
 8002e6e:	00d1      	lsls	r1, r2, #3
 8002e70:	4662      	mov	r2, ip
 8002e72:	0452      	lsls	r2, r2, #17
 8002e74:	d520      	bpl.n	8002eb8 <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e76:	882a      	ldrh	r2, [r5, #0]
 8002e78:	1882      	adds	r2, r0, r2
 8002e7a:	1852      	adds	r2, r2, r1
 8002e7c:	4920      	ldr	r1, [pc, #128]	; (8002f00 <HAL_PCD_IRQHandler+0x48c>)
 8002e7e:	1852      	adds	r2, r2, r1
 8002e80:	8815      	ldrh	r5, [r2, #0]
 8002e82:	05ad      	lsls	r5, r5, #22
 8002e84:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8002e86:	d008      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x426>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e88:	001a      	movs	r2, r3
 8002e8a:	32fe      	adds	r2, #254	; 0xfe
 8002e8c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e8e:	33fc      	adds	r3, #252	; 0xfc
 8002e90:	0019      	movs	r1, r3
 8002e92:	002b      	movs	r3, r5
 8002e94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e96:	f000 fff1 	bl	8003e7c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e9a:	0173      	lsls	r3, r6, #5
 8002e9c:	18e3      	adds	r3, r4, r3
 8002e9e:	3329      	adds	r3, #41	; 0x29
 8002ea0:	33ff      	adds	r3, #255	; 0xff
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	189a      	adds	r2, r3, r2
 8002eaa:	8813      	ldrh	r3, [r2, #0]
 8002eac:	4915      	ldr	r1, [pc, #84]	; (8002f04 <HAL_PCD_IRQHandler+0x490>)
 8002eae:	400b      	ands	r3, r1
 8002eb0:	4915      	ldr	r1, [pc, #84]	; (8002f08 <HAL_PCD_IRQHandler+0x494>)
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	8013      	strh	r3, [r2, #0]
 8002eb6:	e792      	b.n	8002dde <HAL_PCD_IRQHandler+0x36a>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eb8:	882a      	ldrh	r2, [r5, #0]
 8002eba:	1882      	adds	r2, r0, r2
 8002ebc:	1852      	adds	r2, r2, r1
 8002ebe:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <HAL_PCD_IRQHandler+0x484>)
 8002ec0:	1852      	adds	r2, r2, r1
 8002ec2:	8815      	ldrh	r5, [r2, #0]
 8002ec4:	05ad      	lsls	r5, r5, #22
 8002ec6:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8002ec8:	d0e7      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x426>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eca:	001a      	movs	r2, r3
 8002ecc:	32fe      	adds	r2, #254	; 0xfe
 8002ece:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8002ed0:	e7dd      	b.n	8002e8e <HAL_PCD_IRQHandler+0x41a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	0020      	movs	r0, r4
 8002ed6:	3329      	adds	r3, #41	; 0x29
 8002ed8:	33ff      	adds	r3, #255	; 0xff
 8002eda:	7819      	ldrb	r1, [r3, #0]
 8002edc:	4663      	mov	r3, ip
 8002ede:	f7ff fd90 	bl	8002a02 <HAL_PCD_EP_Receive>
 8002ee2:	e795      	b.n	8002e10 <HAL_PCD_IRQHandler+0x39c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ee4:	f7ff fdaf 	bl	8002a46 <HAL_PCD_EP_Transmit>
 8002ee8:	e6a7      	b.n	8002c3a <HAL_PCD_IRQHandler+0x1c6>
      HAL_PCD_SuspendCallback(hpcd);
 8002eea:	0020      	movs	r0, r4
 8002eec:	f001 fe94 	bl	8004c18 <HAL_PCD_SuspendCallback>
 8002ef0:	e655      	b.n	8002b9e <HAL_PCD_IRQHandler+0x12a>
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	00000f8f 	.word	0x00000f8f
 8002ef8:	00000406 	.word	0x00000406
 8002efc:	ffff8f0f 	.word	0xffff8f0f
 8002f00:	00000402 	.word	0x00000402
 8002f04:	ffff8f8f 	.word	0xffff8f8f
 8002f08:	000080c0 	.word	0x000080c0

08002f0c <HAL_PCD_EP_SetStall>:
{
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	0004      	movs	r4, r0
 8002f10:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f12:	6863      	ldr	r3, [r4, #4]
 8002f14:	400d      	ands	r5, r1
    return HAL_ERROR;
 8002f16:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f18:	429d      	cmp	r5, r3
 8002f1a:	d820      	bhi.n	8002f5e <HAL_PCD_EP_SetStall+0x52>
  if ((0x80U & ep_addr) == 0x80U)
 8002f1c:	b24b      	sxtb	r3, r1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da1e      	bge.n	8002f60 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f22:	016b      	lsls	r3, r5, #5
 8002f24:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8002f26:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	3128      	adds	r1, #40	; 0x28
    ep->is_in = 1U;
 8002f2a:	3329      	adds	r3, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8002f2e:	7018      	strb	r0, [r3, #0]
  ep->is_stall = 1U;
 8002f30:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8002f32:	268a      	movs	r6, #138	; 0x8a
  ep->is_stall = 1U;
 8002f34:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f36:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002f38:	00b6      	lsls	r6, r6, #2
 8002f3a:	5da2      	ldrb	r2, [r4, r6]
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d00d      	beq.n	8002f5e <HAL_PCD_EP_SetStall+0x52>
 8002f42:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f44:	6820      	ldr	r0, [r4, #0]
 8002f46:	f000 fe27 	bl	8003b98 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f4e:	238c      	movs	r3, #140	; 0x8c
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	18e1      	adds	r1, r4, r3
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	f000 fe92 	bl	8003c7e <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	55a0      	strb	r0, [r4, r6]
}
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8002f60:	014b      	lsls	r3, r1, #5
 8002f62:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8002f64:	2200      	movs	r2, #0
 8002f66:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8002f68:	3129      	adds	r1, #41	; 0x29
    ep->is_in = 0U;
 8002f6a:	332a      	adds	r3, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr];
 8002f6c:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8002f6e:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8002f70:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e7dc      	b.n	8002f30 <HAL_PCD_EP_SetStall+0x24>

08002f76 <HAL_PCD_EP_ClrStall>:
{
 8002f76:	b570      	push	{r4, r5, r6, lr}
 8002f78:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f7a:	230f      	movs	r3, #15
 8002f7c:	6862      	ldr	r2, [r4, #4]
 8002f7e:	400b      	ands	r3, r1
    return HAL_ERROR;
 8002f80:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d81a      	bhi.n	8002fbc <HAL_PCD_EP_ClrStall+0x46>
 8002f86:	2507      	movs	r5, #7
 8002f88:	400d      	ands	r5, r1
 8002f8a:	016b      	lsls	r3, r5, #5
  if ((0x80U & ep_addr) == 0x80U)
 8002f8c:	b249      	sxtb	r1, r1
 8002f8e:	18e2      	adds	r2, r4, r3
 8002f90:	2900      	cmp	r1, #0
 8002f92:	da14      	bge.n	8002fbe <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f94:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8002f96:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8002f9a:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 0U;
 8002f9e:	2600      	movs	r6, #0
  __HAL_LOCK(hpcd);
 8002fa0:	258a      	movs	r5, #138	; 0x8a
  ep->is_stall = 0U;
 8002fa2:	708e      	strb	r6, [r1, #2]
  __HAL_LOCK(hpcd);
 8002fa4:	00ad      	lsls	r5, r5, #2
 8002fa6:	5d63      	ldrb	r3, [r4, r5]
 8002fa8:	2002      	movs	r0, #2
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d006      	beq.n	8002fbc <HAL_PCD_EP_ClrStall+0x46>
 8002fae:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fb0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002fb2:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fb4:	f000 fe0e 	bl	8003bd4 <USB_EPClearStall>
  return HAL_OK;
 8002fb8:	0030      	movs	r0, r6
  __HAL_UNLOCK(hpcd);
 8002fba:	5566      	strb	r6, [r4, r5]
}
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fbe:	3329      	adds	r3, #41	; 0x29
 8002fc0:	33ff      	adds	r3, #255	; 0xff
 8002fc2:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	322a      	adds	r2, #42	; 0x2a
 8002fc8:	32ff      	adds	r2, #255	; 0xff
 8002fca:	7013      	strb	r3, [r2, #0]
 8002fcc:	e7e6      	b.n	8002f9c <HAL_PCD_EP_ClrStall+0x26>

08002fce <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002fce:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fd0:	060c      	lsls	r4, r1, #24
 8002fd2:	d50b      	bpl.n	8002fec <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	2407      	movs	r4, #7
 8002fd6:	4021      	ands	r1, r4
 8002fd8:	0149      	lsls	r1, r1, #5
 8002fda:	3128      	adds	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fdc:	1841      	adds	r1, r0, r1
 8002fde:	b298      	uxth	r0, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fe0:	2a00      	cmp	r2, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fe4:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fe6:	80c8      	strh	r0, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002fe8:	2000      	movs	r0, #0
 8002fea:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8002fec:	0149      	lsls	r1, r1, #5
 8002fee:	3129      	adds	r1, #41	; 0x29
 8002ff0:	31ff      	adds	r1, #255	; 0xff
 8002ff2:	e7f3      	b.n	8002fdc <HAL_PCDEx_PMAConfig+0xe>
    ep->doublebuffer = 1U;
 8002ff4:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ff6:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8002ff8:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ffa:	8108      	strh	r0, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ffc:	814b      	strh	r3, [r1, #10]
 8002ffe:	e7f3      	b.n	8002fe8 <HAL_PCDEx_PMAConfig+0x1a>

08003000 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8003000:	6803      	ldr	r3, [r0, #0]
{
 8003002:	0001      	movs	r1, r0
  hpcd->lpm_active = 1U;
 8003004:	209a      	movs	r0, #154	; 0x9a
 8003006:	2201      	movs	r2, #1
{
 8003008:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 800300a:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 800300c:	2498      	movs	r4, #152	; 0x98
  hpcd->lpm_active = 1U;
 800300e:	500a      	str	r2, [r1, r0]
  hpcd->LPM_State = LPM_L0;
 8003010:	2000      	movs	r0, #0
 8003012:	00a4      	lsls	r4, r4, #2
 8003014:	5508      	strb	r0, [r1, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003016:	3354      	adds	r3, #84	; 0x54
 8003018:	8819      	ldrh	r1, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	801a      	strh	r2, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800301e:	2202      	movs	r2, #2
 8003020:	8819      	ldrh	r1, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8003026:	bd10      	pop	{r4, pc}

08003028 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003028:	4770      	bx	lr
	...

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302e:	0004      	movs	r4, r0
 8003030:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003032:	2800      	cmp	r0, #0
 8003034:	d102      	bne.n	800303c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8003036:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8003038:	b005      	add	sp, #20
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303c:	6803      	ldr	r3, [r0, #0]
 800303e:	07db      	lsls	r3, r3, #31
 8003040:	d433      	bmi.n	80030aa <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	079b      	lsls	r3, r3, #30
 8003046:	d500      	bpl.n	800304a <HAL_RCC_OscConfig+0x1e>
 8003048:	e087      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	d500      	bpl.n	8003052 <HAL_RCC_OscConfig+0x26>
 8003050:	e0c8      	b.n	80031e4 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	075b      	lsls	r3, r3, #29
 8003056:	d500      	bpl.n	800305a <HAL_RCC_OscConfig+0x2e>
 8003058:	e0eb      	b.n	8003232 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	06db      	lsls	r3, r3, #27
 800305e:	d51a      	bpl.n	8003096 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003060:	6962      	ldr	r2, [r4, #20]
 8003062:	4dbc      	ldr	r5, [pc, #752]	; (8003354 <HAL_RCC_OscConfig+0x328>)
 8003064:	2304      	movs	r3, #4
 8003066:	2a01      	cmp	r2, #1
 8003068:	d000      	beq.n	800306c <HAL_RCC_OscConfig+0x40>
 800306a:	e157      	b.n	800331c <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 800306c:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800306e:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003070:	430b      	orrs	r3, r1
 8003072:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003074:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003076:	431a      	orrs	r2, r3
 8003078:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800307a:	f7fe fc99 	bl	80019b0 <HAL_GetTick>
 800307e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003080:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003082:	4233      	tst	r3, r6
 8003084:	d100      	bne.n	8003088 <HAL_RCC_OscConfig+0x5c>
 8003086:	e142      	b.n	800330e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003088:	21f8      	movs	r1, #248	; 0xf8
 800308a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800308c:	69a3      	ldr	r3, [r4, #24]
 800308e:	438a      	bics	r2, r1
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4313      	orrs	r3, r2
 8003094:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	069b      	lsls	r3, r3, #26
 800309a:	d500      	bpl.n	800309e <HAL_RCC_OscConfig+0x72>
 800309c:	e166      	b.n	800336c <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030a0:	2a00      	cmp	r2, #0
 80030a2:	d000      	beq.n	80030a6 <HAL_RCC_OscConfig+0x7a>
 80030a4:	e1a3      	b.n	80033ee <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80030a6:	2000      	movs	r0, #0
 80030a8:	e7c6      	b.n	8003038 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030aa:	210c      	movs	r1, #12
 80030ac:	4da9      	ldr	r5, [pc, #676]	; (8003354 <HAL_RCC_OscConfig+0x328>)
 80030ae:	686a      	ldr	r2, [r5, #4]
 80030b0:	400a      	ands	r2, r1
 80030b2:	2a04      	cmp	r2, #4
 80030b4:	d00b      	beq.n	80030ce <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030b6:	686b      	ldr	r3, [r5, #4]
 80030b8:	400b      	ands	r3, r1
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d10e      	bne.n	80030dc <HAL_RCC_OscConfig+0xb0>
 80030be:	22c0      	movs	r2, #192	; 0xc0
 80030c0:	686b      	ldr	r3, [r5, #4]
 80030c2:	0252      	lsls	r2, r2, #9
 80030c4:	4013      	ands	r3, r2
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	0252      	lsls	r2, r2, #9
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	039b      	lsls	r3, r3, #14
 80030d2:	d5b6      	bpl.n	8003042 <HAL_RCC_OscConfig+0x16>
 80030d4:	6863      	ldr	r3, [r4, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1b3      	bne.n	8003042 <HAL_RCC_OscConfig+0x16>
 80030da:	e7ac      	b.n	8003036 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	6863      	ldr	r3, [r4, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d113      	bne.n	800310a <HAL_RCC_OscConfig+0xde>
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	682a      	ldr	r2, [r5, #0]
 80030e6:	025b      	lsls	r3, r3, #9
 80030e8:	4313      	orrs	r3, r2
 80030ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030ec:	f7fe fc60 	bl	80019b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80030f2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f4:	02b6      	lsls	r6, r6, #10
 80030f6:	682b      	ldr	r3, [r5, #0]
 80030f8:	4233      	tst	r3, r6
 80030fa:	d1a2      	bne.n	8003042 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fe fc58 	bl	80019b0 <HAL_GetTick>
 8003100:	1bc0      	subs	r0, r0, r7
 8003102:	2864      	cmp	r0, #100	; 0x64
 8003104:	d9f7      	bls.n	80030f6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003106:	2003      	movs	r0, #3
 8003108:	e796      	b.n	8003038 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_OscConfig+0x10e>
 800310e:	682b      	ldr	r3, [r5, #0]
 8003110:	4a91      	ldr	r2, [pc, #580]	; (8003358 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003114:	4013      	ands	r3, r2
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	4a90      	ldr	r2, [pc, #576]	; (800335c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	4013      	ands	r3, r2
 8003120:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003122:	f7fe fc45 	bl	80019b0 <HAL_GetTick>
 8003126:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	4233      	tst	r3, r6
 800312c:	d089      	beq.n	8003042 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312e:	f7fe fc3f 	bl	80019b0 <HAL_GetTick>
 8003132:	1bc0      	subs	r0, r0, r7
 8003134:	2864      	cmp	r0, #100	; 0x64
 8003136:	d9f7      	bls.n	8003128 <HAL_RCC_OscConfig+0xfc>
 8003138:	e7e5      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	2b05      	cmp	r3, #5
 800313c:	d105      	bne.n	800314a <HAL_RCC_OscConfig+0x11e>
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	682a      	ldr	r2, [r5, #0]
 8003142:	02db      	lsls	r3, r3, #11
 8003144:	4313      	orrs	r3, r2
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	e7cb      	b.n	80030e2 <HAL_RCC_OscConfig+0xb6>
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	4a82      	ldr	r2, [pc, #520]	; (8003358 <HAL_RCC_OscConfig+0x32c>)
 800314e:	4013      	ands	r3, r2
 8003150:	602b      	str	r3, [r5, #0]
 8003152:	682b      	ldr	r3, [r5, #0]
 8003154:	4a81      	ldr	r2, [pc, #516]	; (800335c <HAL_RCC_OscConfig+0x330>)
 8003156:	4013      	ands	r3, r2
 8003158:	e7c7      	b.n	80030ea <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800315a:	220c      	movs	r2, #12
 800315c:	4d7d      	ldr	r5, [pc, #500]	; (8003354 <HAL_RCC_OscConfig+0x328>)
 800315e:	686b      	ldr	r3, [r5, #4]
 8003160:	4213      	tst	r3, r2
 8003162:	d00b      	beq.n	800317c <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003164:	686b      	ldr	r3, [r5, #4]
 8003166:	4013      	ands	r3, r2
 8003168:	2b08      	cmp	r3, #8
 800316a:	d116      	bne.n	800319a <HAL_RCC_OscConfig+0x16e>
 800316c:	22c0      	movs	r2, #192	; 0xc0
 800316e:	686b      	ldr	r3, [r5, #4]
 8003170:	0252      	lsls	r2, r2, #9
 8003172:	4013      	ands	r3, r2
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	0212      	lsls	r2, r2, #8
 8003178:	4293      	cmp	r3, r2
 800317a:	d10e      	bne.n	800319a <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	079b      	lsls	r3, r3, #30
 8003180:	d503      	bpl.n	800318a <HAL_RCC_OscConfig+0x15e>
 8003182:	68e3      	ldr	r3, [r4, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d000      	beq.n	800318a <HAL_RCC_OscConfig+0x15e>
 8003188:	e755      	b.n	8003036 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	21f8      	movs	r1, #248	; 0xf8
 800318c:	682a      	ldr	r2, [r5, #0]
 800318e:	6923      	ldr	r3, [r4, #16]
 8003190:	438a      	bics	r2, r1
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4313      	orrs	r3, r2
 8003196:	602b      	str	r3, [r5, #0]
 8003198:	e757      	b.n	800304a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800319a:	68e2      	ldr	r2, [r4, #12]
 800319c:	2301      	movs	r3, #1
 800319e:	2a00      	cmp	r2, #0
 80031a0:	d00f      	beq.n	80031c2 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 80031a2:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80031a6:	4313      	orrs	r3, r2
 80031a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80031aa:	f7fe fc01 	bl	80019b0 <HAL_GetTick>
 80031ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	4233      	tst	r3, r6
 80031b4:	d1e9      	bne.n	800318a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe fbfb 	bl	80019b0 <HAL_GetTick>
 80031ba:	1bc0      	subs	r0, r0, r7
 80031bc:	2802      	cmp	r0, #2
 80031be:	d9f7      	bls.n	80031b0 <HAL_RCC_OscConfig+0x184>
 80031c0:	e7a1      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 80031c2:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c4:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80031c6:	439a      	bics	r2, r3
 80031c8:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80031ca:	f7fe fbf1 	bl	80019b0 <HAL_GetTick>
 80031ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	4233      	tst	r3, r6
 80031d4:	d100      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1ac>
 80031d6:	e738      	b.n	800304a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fe fbea 	bl	80019b0 <HAL_GetTick>
 80031dc:	1bc0      	subs	r0, r0, r7
 80031de:	2802      	cmp	r0, #2
 80031e0:	d9f6      	bls.n	80031d0 <HAL_RCC_OscConfig+0x1a4>
 80031e2:	e790      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e4:	69e2      	ldr	r2, [r4, #28]
 80031e6:	2301      	movs	r3, #1
 80031e8:	4d5a      	ldr	r5, [pc, #360]	; (8003354 <HAL_RCC_OscConfig+0x328>)
 80031ea:	2a00      	cmp	r2, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 80031ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4313      	orrs	r3, r2
 80031f4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80031f6:	f7fe fbdb 	bl	80019b0 <HAL_GetTick>
 80031fa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80031fe:	4233      	tst	r3, r6
 8003200:	d000      	beq.n	8003204 <HAL_RCC_OscConfig+0x1d8>
 8003202:	e726      	b.n	8003052 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003204:	f7fe fbd4 	bl	80019b0 <HAL_GetTick>
 8003208:	1bc0      	subs	r0, r0, r7
 800320a:	2802      	cmp	r0, #2
 800320c:	d9f6      	bls.n	80031fc <HAL_RCC_OscConfig+0x1d0>
 800320e:	e77a      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8003210:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003212:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8003214:	439a      	bics	r2, r3
 8003216:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003218:	f7fe fbca 	bl	80019b0 <HAL_GetTick>
 800321c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003220:	4233      	tst	r3, r6
 8003222:	d100      	bne.n	8003226 <HAL_RCC_OscConfig+0x1fa>
 8003224:	e715      	b.n	8003052 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe fbc3 	bl	80019b0 <HAL_GetTick>
 800322a:	1bc0      	subs	r0, r0, r7
 800322c:	2802      	cmp	r0, #2
 800322e:	d9f6      	bls.n	800321e <HAL_RCC_OscConfig+0x1f2>
 8003230:	e769      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003234:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4d47      	ldr	r5, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x328>)
 8003238:	0552      	lsls	r2, r2, #21
 800323a:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800323c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4213      	tst	r3, r2
 8003240:	d108      	bne.n	8003254 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	69eb      	ldr	r3, [r5, #28]
 8003244:	4313      	orrs	r3, r2
 8003246:	61eb      	str	r3, [r5, #28]
 8003248:	69eb      	ldr	r3, [r5, #28]
 800324a:	4013      	ands	r3, r2
 800324c:	9303      	str	r3, [sp, #12]
 800324e:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003250:	2301      	movs	r3, #1
 8003252:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	2780      	movs	r7, #128	; 0x80
 8003256:	4e42      	ldr	r6, [pc, #264]	; (8003360 <HAL_RCC_OscConfig+0x334>)
 8003258:	007f      	lsls	r7, r7, #1
 800325a:	6833      	ldr	r3, [r6, #0]
 800325c:	423b      	tst	r3, r7
 800325e:	d006      	beq.n	800326e <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	68a3      	ldr	r3, [r4, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d113      	bne.n	800328e <HAL_RCC_OscConfig+0x262>
 8003266:	6a2a      	ldr	r2, [r5, #32]
 8003268:	4313      	orrs	r3, r2
 800326a:	622b      	str	r3, [r5, #32]
 800326c:	e030      	b.n	80032d0 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326e:	6833      	ldr	r3, [r6, #0]
 8003270:	433b      	orrs	r3, r7
 8003272:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003274:	f7fe fb9c 	bl	80019b0 <HAL_GetTick>
 8003278:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	6833      	ldr	r3, [r6, #0]
 800327c:	423b      	tst	r3, r7
 800327e:	d1ef      	bne.n	8003260 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003280:	f7fe fb96 	bl	80019b0 <HAL_GetTick>
 8003284:	9b01      	ldr	r3, [sp, #4]
 8003286:	1ac0      	subs	r0, r0, r3
 8003288:	2864      	cmp	r0, #100	; 0x64
 800328a:	d9f6      	bls.n	800327a <HAL_RCC_OscConfig+0x24e>
 800328c:	e73b      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
 800328e:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	2b00      	cmp	r3, #0
 8003292:	d114      	bne.n	80032be <HAL_RCC_OscConfig+0x292>
 8003294:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003296:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003298:	4393      	bics	r3, r2
 800329a:	622b      	str	r3, [r5, #32]
 800329c:	6a2b      	ldr	r3, [r5, #32]
 800329e:	3203      	adds	r2, #3
 80032a0:	4393      	bics	r3, r2
 80032a2:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80032a4:	f7fe fb84 	bl	80019b0 <HAL_GetTick>
 80032a8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032aa:	6a2b      	ldr	r3, [r5, #32]
 80032ac:	423b      	tst	r3, r7
 80032ae:	d025      	beq.n	80032fc <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe fb7e 	bl	80019b0 <HAL_GetTick>
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_OscConfig+0x338>)
 80032b6:	1b80      	subs	r0, r0, r6
 80032b8:	4298      	cmp	r0, r3
 80032ba:	d9f6      	bls.n	80032aa <HAL_RCC_OscConfig+0x27e>
 80032bc:	e723      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x2ae>
 80032c2:	6a29      	ldr	r1, [r5, #32]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	430b      	orrs	r3, r1
 80032c8:	622b      	str	r3, [r5, #32]
 80032ca:	6a2b      	ldr	r3, [r5, #32]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80032d0:	f7fe fb6e 	bl	80019b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80032d6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00d      	b.n	80032f6 <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032da:	6a2b      	ldr	r3, [r5, #32]
 80032dc:	4393      	bics	r3, r2
 80032de:	2204      	movs	r2, #4
 80032e0:	622b      	str	r3, [r5, #32]
 80032e2:	6a2b      	ldr	r3, [r5, #32]
 80032e4:	4393      	bics	r3, r2
 80032e6:	e7c0      	b.n	800326a <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fb62 	bl	80019b0 <HAL_GetTick>
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_OscConfig+0x338>)
 80032ee:	1b80      	subs	r0, r0, r6
 80032f0:	4298      	cmp	r0, r3
 80032f2:	d900      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2ca>
 80032f4:	e707      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	6a2b      	ldr	r3, [r5, #32]
 80032f8:	423b      	tst	r3, r7
 80032fa:	d0f5      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 80032fc:	9b00      	ldr	r3, [sp, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d000      	beq.n	8003304 <HAL_RCC_OscConfig+0x2d8>
 8003302:	e6aa      	b.n	800305a <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003304:	69eb      	ldr	r3, [r5, #28]
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCC_OscConfig+0x33c>)
 8003308:	4013      	ands	r3, r2
 800330a:	61eb      	str	r3, [r5, #28]
 800330c:	e6a5      	b.n	800305a <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800330e:	f7fe fb4f 	bl	80019b0 <HAL_GetTick>
 8003312:	1bc0      	subs	r0, r0, r7
 8003314:	2802      	cmp	r0, #2
 8003316:	d800      	bhi.n	800331a <HAL_RCC_OscConfig+0x2ee>
 8003318:	e6b2      	b.n	8003080 <HAL_RCC_OscConfig+0x54>
 800331a:	e6f4      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800331c:	3205      	adds	r2, #5
 800331e:	d103      	bne.n	8003328 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003320:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003322:	439a      	bics	r2, r3
 8003324:	636a      	str	r2, [r5, #52]	; 0x34
 8003326:	e6af      	b.n	8003088 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003328:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800332a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800332c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800332e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003330:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003332:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003334:	4393      	bics	r3, r2
 8003336:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003338:	f7fe fb3a 	bl	80019b0 <HAL_GetTick>
 800333c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800333e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003340:	4233      	tst	r3, r6
 8003342:	d100      	bne.n	8003346 <HAL_RCC_OscConfig+0x31a>
 8003344:	e6a7      	b.n	8003096 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003346:	f7fe fb33 	bl	80019b0 <HAL_GetTick>
 800334a:	1bc0      	subs	r0, r0, r7
 800334c:	2802      	cmp	r0, #2
 800334e:	d9f6      	bls.n	800333e <HAL_RCC_OscConfig+0x312>
 8003350:	e6d9      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	40021000 	.word	0x40021000
 8003358:	fffeffff 	.word	0xfffeffff
 800335c:	fffbffff 	.word	0xfffbffff
 8003360:	40007000 	.word	0x40007000
 8003364:	00001388 	.word	0x00001388
 8003368:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800336c:	210c      	movs	r1, #12
 800336e:	4d53      	ldr	r5, [pc, #332]	; (80034bc <HAL_RCC_OscConfig+0x490>)
 8003370:	686a      	ldr	r2, [r5, #4]
 8003372:	400a      	ands	r2, r1
 8003374:	428a      	cmp	r2, r1
 8003376:	d009      	beq.n	800338c <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003378:	686b      	ldr	r3, [r5, #4]
 800337a:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800337c:	2b08      	cmp	r3, #8
 800337e:	d10e      	bne.n	800339e <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003380:	22c0      	movs	r2, #192	; 0xc0
 8003382:	686b      	ldr	r3, [r5, #4]
 8003384:	0252      	lsls	r2, r2, #9
 8003386:	4013      	ands	r3, r2
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800338c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800338e:	03db      	lsls	r3, r3, #15
 8003390:	d400      	bmi.n	8003394 <HAL_RCC_OscConfig+0x368>
 8003392:	e684      	b.n	800309e <HAL_RCC_OscConfig+0x72>
 8003394:	6a23      	ldr	r3, [r4, #32]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d000      	beq.n	800339c <HAL_RCC_OscConfig+0x370>
 800339a:	e64c      	b.n	8003036 <HAL_RCC_OscConfig+0xa>
 800339c:	e67f      	b.n	800309e <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800339e:	6a23      	ldr	r3, [r4, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 80033a4:	2680      	movs	r6, #128	; 0x80
 80033a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033a8:	0276      	lsls	r6, r6, #9
 80033aa:	4333      	orrs	r3, r6
 80033ac:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80033ae:	f7fe faff 	bl	80019b0 <HAL_GetTick>
 80033b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033b6:	4233      	tst	r3, r6
 80033b8:	d000      	beq.n	80033bc <HAL_RCC_OscConfig+0x390>
 80033ba:	e670      	b.n	800309e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033bc:	f7fe faf8 	bl	80019b0 <HAL_GetTick>
 80033c0:	1bc0      	subs	r0, r0, r7
 80033c2:	2802      	cmp	r0, #2
 80033c4:	d9f6      	bls.n	80033b4 <HAL_RCC_OscConfig+0x388>
 80033c6:	e69e      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 80033c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033ca:	4a3d      	ldr	r2, [pc, #244]	; (80034c0 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033cc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80033ce:	4013      	ands	r3, r2
 80033d0:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80033d2:	f7fe faed 	bl	80019b0 <HAL_GetTick>
 80033d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033d8:	0276      	lsls	r6, r6, #9
 80033da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033dc:	4233      	tst	r3, r6
 80033de:	d100      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3b6>
 80033e0:	e65d      	b.n	800309e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e2:	f7fe fae5 	bl	80019b0 <HAL_GetTick>
 80033e6:	1bc0      	subs	r0, r0, r7
 80033e8:	2802      	cmp	r0, #2
 80033ea:	d9f6      	bls.n	80033da <HAL_RCC_OscConfig+0x3ae>
 80033ec:	e68b      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ee:	200c      	movs	r0, #12
 80033f0:	4b32      	ldr	r3, [pc, #200]	; (80034bc <HAL_RCC_OscConfig+0x490>)
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	001d      	movs	r5, r3
 80033f6:	4001      	ands	r1, r0
 80033f8:	2908      	cmp	r1, #8
 80033fa:	d044      	beq.n	8003486 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4931      	ldr	r1, [pc, #196]	; (80034c4 <HAL_RCC_OscConfig+0x498>)
 8003400:	400b      	ands	r3, r1
 8003402:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003404:	2a02      	cmp	r2, #2
 8003406:	d12f      	bne.n	8003468 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8003408:	f7fe fad2 	bl	80019b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800340e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003410:	04b6      	lsls	r6, r6, #18
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	4233      	tst	r3, r6
 8003416:	d121      	bne.n	800345c <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003418:	220f      	movs	r2, #15
 800341a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800341c:	4393      	bics	r3, r2
 800341e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003420:	4313      	orrs	r3, r2
 8003422:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003424:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003426:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003428:	686a      	ldr	r2, [r5, #4]
 800342a:	430b      	orrs	r3, r1
 800342c:	4926      	ldr	r1, [pc, #152]	; (80034c8 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003430:	400a      	ands	r2, r1
 8003432:	4313      	orrs	r3, r2
 8003434:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	682a      	ldr	r2, [r5, #0]
 800343a:	045b      	lsls	r3, r3, #17
 800343c:	4313      	orrs	r3, r2
 800343e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003440:	f7fe fab6 	bl	80019b0 <HAL_GetTick>
 8003444:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003446:	04a4      	lsls	r4, r4, #18
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	4223      	tst	r3, r4
 800344c:	d000      	beq.n	8003450 <HAL_RCC_OscConfig+0x424>
 800344e:	e62a      	b.n	80030a6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe faae 	bl	80019b0 <HAL_GetTick>
 8003454:	1b80      	subs	r0, r0, r6
 8003456:	2802      	cmp	r0, #2
 8003458:	d9f6      	bls.n	8003448 <HAL_RCC_OscConfig+0x41c>
 800345a:	e654      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe faa8 	bl	80019b0 <HAL_GetTick>
 8003460:	1bc0      	subs	r0, r0, r7
 8003462:	2802      	cmp	r0, #2
 8003464:	d9d5      	bls.n	8003412 <HAL_RCC_OscConfig+0x3e6>
 8003466:	e64e      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8003468:	f7fe faa2 	bl	80019b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346c:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 800346e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003470:	04a4      	lsls	r4, r4, #18
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	4223      	tst	r3, r4
 8003476:	d100      	bne.n	800347a <HAL_RCC_OscConfig+0x44e>
 8003478:	e615      	b.n	80030a6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fa99 	bl	80019b0 <HAL_GetTick>
 800347e:	1b80      	subs	r0, r0, r6
 8003480:	2802      	cmp	r0, #2
 8003482:	d9f6      	bls.n	8003472 <HAL_RCC_OscConfig+0x446>
 8003484:	e63f      	b.n	8003106 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003486:	2a01      	cmp	r2, #1
 8003488:	d100      	bne.n	800348c <HAL_RCC_OscConfig+0x460>
 800348a:	e5d4      	b.n	8003036 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800348c:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 800348e:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003492:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	4002      	ands	r2, r0
 8003498:	428a      	cmp	r2, r1
 800349a:	d000      	beq.n	800349e <HAL_RCC_OscConfig+0x472>
 800349c:	e5cb      	b.n	8003036 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800349e:	220f      	movs	r2, #15
 80034a0:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d000      	beq.n	80034aa <HAL_RCC_OscConfig+0x47e>
 80034a8:	e5c5      	b.n	8003036 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80034aa:	23f0      	movs	r3, #240	; 0xf0
 80034ac:	039b      	lsls	r3, r3, #14
 80034ae:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034b2:	1ac0      	subs	r0, r0, r3
 80034b4:	1e43      	subs	r3, r0, #1
 80034b6:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80034b8:	b2c0      	uxtb	r0, r0
 80034ba:	e5bd      	b.n	8003038 <HAL_RCC_OscConfig+0xc>
 80034bc:	40021000 	.word	0x40021000
 80034c0:	fffeffff 	.word	0xfffeffff
 80034c4:	feffffff 	.word	0xfeffffff
 80034c8:	ffc27fff 	.word	0xffc27fff

080034cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80034ce:	4c1b      	ldr	r4, [pc, #108]	; (800353c <HAL_RCC_GetSysClockFreq+0x70>)
{
 80034d0:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80034d2:	2210      	movs	r2, #16
 80034d4:	0021      	movs	r1, r4
 80034d6:	4668      	mov	r0, sp
 80034d8:	f001 fcd0 	bl	8004e7c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80034dc:	0021      	movs	r1, r4
 80034de:	ad04      	add	r5, sp, #16
 80034e0:	2210      	movs	r2, #16
 80034e2:	3110      	adds	r1, #16
 80034e4:	0028      	movs	r0, r5
 80034e6:	f001 fcc9 	bl	8004e7c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034ea:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <HAL_RCC_GetSysClockFreq+0x74>)
 80034ee:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	4018      	ands	r0, r3
 80034f2:	2808      	cmp	r0, #8
 80034f4:	d009      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f6:	380c      	subs	r0, #12
 80034f8:	4243      	negs	r3, r0
 80034fa:	4158      	adcs	r0, r3
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_GetSysClockFreq+0x78>)
 80034fe:	4240      	negs	r0, r0
 8003500:	4018      	ands	r0, r3
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003504:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003506:	b009      	add	sp, #36	; 0x24
 8003508:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800350a:	200f      	movs	r0, #15
 800350c:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800350e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003510:	0c99      	lsrs	r1, r3, #18
 8003512:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003514:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003516:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003518:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800351a:	22c0      	movs	r2, #192	; 0xc0
 800351c:	2080      	movs	r0, #128	; 0x80
 800351e:	0252      	lsls	r2, r2, #9
 8003520:	4013      	ands	r3, r2
 8003522:	0240      	lsls	r0, r0, #9
 8003524:	4283      	cmp	r3, r0
 8003526:	d101      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003528:	4807      	ldr	r0, [pc, #28]	; (8003548 <HAL_RCC_GetSysClockFreq+0x7c>)
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800352c:	4293      	cmp	r3, r2
 800352e:	d1fb      	bne.n	8003528 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003530:	4806      	ldr	r0, [pc, #24]	; (800354c <HAL_RCC_GetSysClockFreq+0x80>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003532:	f7fc fdfd 	bl	8000130 <__udivsi3>
 8003536:	4360      	muls	r0, r4
 8003538:	e7e5      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x3a>
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	080056c4 	.word	0x080056c4
 8003540:	40021000 	.word	0x40021000
 8003544:	02625a00 	.word	0x02625a00
 8003548:	007a1200 	.word	0x007a1200
 800354c:	02dc6c00 	.word	0x02dc6c00

08003550 <HAL_RCC_ClockConfig>:
{
 8003550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003552:	0005      	movs	r5, r0
 8003554:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8003556:	2800      	cmp	r0, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
}
 800355c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355e:	2201      	movs	r2, #1
 8003560:	4c3b      	ldr	r4, [pc, #236]	; (8003650 <HAL_RCC_ClockConfig+0x100>)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	4013      	ands	r3, r2
 8003566:	428b      	cmp	r3, r1
 8003568:	d31c      	bcc.n	80035a4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356a:	6829      	ldr	r1, [r5, #0]
 800356c:	078b      	lsls	r3, r1, #30
 800356e:	d422      	bmi.n	80035b6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003570:	07cb      	lsls	r3, r1, #31
 8003572:	d42f      	bmi.n	80035d4 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	2301      	movs	r3, #1
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	401a      	ands	r2, r3
 800357a:	42ba      	cmp	r2, r7
 800357c:	d859      	bhi.n	8003632 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	4c34      	ldr	r4, [pc, #208]	; (8003654 <HAL_RCC_ClockConfig+0x104>)
 8003582:	075b      	lsls	r3, r3, #29
 8003584:	d45c      	bmi.n	8003640 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003586:	f7ff ffa1 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 800358a:	6863      	ldr	r3, [r4, #4]
 800358c:	4a32      	ldr	r2, [pc, #200]	; (8003658 <HAL_RCC_ClockConfig+0x108>)
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	0f1b      	lsrs	r3, r3, #28
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	40d8      	lsrs	r0, r3
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_ClockConfig+0x10c>)
 8003598:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fe f9c8 	bl	8001930 <HAL_InitTick>
  return HAL_OK;
 80035a0:	2000      	movs	r0, #0
 80035a2:	e7db      	b.n	800355c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	4393      	bics	r3, r2
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	4013      	ands	r3, r2
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d1d2      	bne.n	800355a <HAL_RCC_ClockConfig+0xa>
 80035b4:	e7d9      	b.n	800356a <HAL_RCC_ClockConfig+0x1a>
 80035b6:	4a27      	ldr	r2, [pc, #156]	; (8003654 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	074b      	lsls	r3, r1, #29
 80035ba:	d504      	bpl.n	80035c6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035bc:	23e0      	movs	r3, #224	; 0xe0
 80035be:	6850      	ldr	r0, [r2, #4]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4303      	orrs	r3, r0
 80035c4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c6:	20f0      	movs	r0, #240	; 0xf0
 80035c8:	6853      	ldr	r3, [r2, #4]
 80035ca:	4383      	bics	r3, r0
 80035cc:	68a8      	ldr	r0, [r5, #8]
 80035ce:	4303      	orrs	r3, r0
 80035d0:	6053      	str	r3, [r2, #4]
 80035d2:	e7cd      	b.n	8003570 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	686a      	ldr	r2, [r5, #4]
 80035d6:	4e1f      	ldr	r6, [pc, #124]	; (8003654 <HAL_RCC_ClockConfig+0x104>)
 80035d8:	2a01      	cmp	r2, #1
 80035da:	d11a      	bne.n	8003612 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	039b      	lsls	r3, r3, #14
 80035e0:	d5bb      	bpl.n	800355a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e2:	2103      	movs	r1, #3
 80035e4:	6873      	ldr	r3, [r6, #4]
 80035e6:	438b      	bics	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80035ec:	f7fe f9e0 	bl	80019b0 <HAL_GetTick>
 80035f0:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	230c      	movs	r3, #12
 80035f4:	6872      	ldr	r2, [r6, #4]
 80035f6:	401a      	ands	r2, r3
 80035f8:	686b      	ldr	r3, [r5, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d0b9      	beq.n	8003574 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe f9d6 	bl	80019b0 <HAL_GetTick>
 8003604:	9b01      	ldr	r3, [sp, #4]
 8003606:	1ac0      	subs	r0, r0, r3
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_RCC_ClockConfig+0x110>)
 800360a:	4298      	cmp	r0, r3
 800360c:	d9f1      	bls.n	80035f2 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800360e:	2003      	movs	r0, #3
 8003610:	e7a4      	b.n	800355c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003612:	2a02      	cmp	r2, #2
 8003614:	d103      	bne.n	800361e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	6833      	ldr	r3, [r6, #0]
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	d4e2      	bmi.n	80035e2 <HAL_RCC_ClockConfig+0x92>
 800361c:	e79d      	b.n	800355a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800361e:	2a03      	cmp	r2, #3
 8003620:	d103      	bne.n	800362a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003622:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003624:	03db      	lsls	r3, r3, #15
 8003626:	d4dc      	bmi.n	80035e2 <HAL_RCC_ClockConfig+0x92>
 8003628:	e797      	b.n	800355a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	6833      	ldr	r3, [r6, #0]
 800362c:	079b      	lsls	r3, r3, #30
 800362e:	d4d8      	bmi.n	80035e2 <HAL_RCC_ClockConfig+0x92>
 8003630:	e793      	b.n	800355a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	439a      	bics	r2, r3
 8003636:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	421a      	tst	r2, r3
 800363c:	d09f      	beq.n	800357e <HAL_RCC_ClockConfig+0x2e>
 800363e:	e78c      	b.n	800355a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	6863      	ldr	r3, [r4, #4]
 8003642:	4a08      	ldr	r2, [pc, #32]	; (8003664 <HAL_RCC_ClockConfig+0x114>)
 8003644:	4013      	ands	r3, r2
 8003646:	68ea      	ldr	r2, [r5, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	6063      	str	r3, [r4, #4]
 800364c:	e79b      	b.n	8003586 <HAL_RCC_ClockConfig+0x36>
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	40022000 	.word	0x40022000
 8003654:	40021000 	.word	0x40021000
 8003658:	08005750 	.word	0x08005750
 800365c:	20000000 	.word	0x20000000
 8003660:	00001388 	.word	0x00001388
 8003664:	fffff8ff 	.word	0xfffff8ff

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800366a:	6803      	ldr	r3, [r0, #0]
{
 800366c:	b085      	sub	sp, #20
 800366e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003670:	03db      	lsls	r3, r3, #15
 8003672:	d528      	bpl.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003674:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003678:	4c40      	ldr	r4, [pc, #256]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800367a:	0552      	lsls	r2, r2, #21
 800367c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800367e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003680:	4213      	tst	r3, r2
 8003682:	d108      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003684:	69e3      	ldr	r3, [r4, #28]
 8003686:	4313      	orrs	r3, r2
 8003688:	61e3      	str	r3, [r4, #28]
 800368a:	69e3      	ldr	r3, [r4, #28]
 800368c:	4013      	ands	r3, r2
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	2780      	movs	r7, #128	; 0x80
 8003698:	4e39      	ldr	r6, [pc, #228]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800369a:	007f      	lsls	r7, r7, #1
 800369c:	6833      	ldr	r3, [r6, #0]
 800369e:	423b      	tst	r3, r7
 80036a0:	d038      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a2:	22c0      	movs	r2, #192	; 0xc0
 80036a4:	6a23      	ldr	r3, [r4, #32]
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	4e36      	ldr	r6, [pc, #216]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ac:	d144      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ae:	6a23      	ldr	r3, [r4, #32]
 80036b0:	401e      	ands	r6, r3
 80036b2:	686b      	ldr	r3, [r5, #4]
 80036b4:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036b6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b8:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d103      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036be:	69e3      	ldr	r3, [r4, #28]
 80036c0:	4a31      	ldr	r2, [pc, #196]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c6:	682a      	ldr	r2, [r5, #0]
 80036c8:	07d3      	lsls	r3, r2, #31
 80036ca:	d506      	bpl.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036cc:	2003      	movs	r0, #3
 80036ce:	492b      	ldr	r1, [pc, #172]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80036d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80036d2:	4383      	bics	r3, r0
 80036d4:	68a8      	ldr	r0, [r5, #8]
 80036d6:	4303      	orrs	r3, r0
 80036d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036da:	0693      	lsls	r3, r2, #26
 80036dc:	d506      	bpl.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036de:	2010      	movs	r0, #16
 80036e0:	4926      	ldr	r1, [pc, #152]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80036e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80036e4:	4383      	bics	r3, r0
 80036e6:	68e8      	ldr	r0, [r5, #12]
 80036e8:	4303      	orrs	r3, r0
 80036ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ec:	0393      	lsls	r3, r2, #14
 80036ee:	d506      	bpl.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f0:	2080      	movs	r0, #128	; 0x80
 80036f2:	4922      	ldr	r1, [pc, #136]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80036f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80036f6:	4383      	bics	r3, r0
 80036f8:	6968      	ldr	r0, [r5, #20]
 80036fa:	4303      	orrs	r3, r0
 80036fc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80036fe:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003700:	0553      	lsls	r3, r2, #21
 8003702:	d517      	bpl.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003704:	2140      	movs	r1, #64	; 0x40
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003708:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800370a:	438b      	bics	r3, r1
 800370c:	6929      	ldr	r1, [r5, #16]
 800370e:	430b      	orrs	r3, r1
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	e00f      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003714:	6833      	ldr	r3, [r6, #0]
 8003716:	433b      	orrs	r3, r7
 8003718:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800371a:	f7fe f949 	bl	80019b0 <HAL_GetTick>
 800371e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	423b      	tst	r3, r7
 8003724:	d1bd      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7fe f943 	bl	80019b0 <HAL_GetTick>
 800372a:	9b01      	ldr	r3, [sp, #4]
 800372c:	1ac0      	subs	r0, r0, r3
 800372e:	2864      	cmp	r0, #100	; 0x64
 8003730:	d9f6      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8003732:	2003      	movs	r0, #3
}
 8003734:	b005      	add	sp, #20
 8003736:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003738:	6869      	ldr	r1, [r5, #4]
 800373a:	400a      	ands	r2, r1
 800373c:	429a      	cmp	r2, r3
 800373e:	d0b6      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003740:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003742:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003744:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003746:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003748:	025b      	lsls	r3, r3, #9
 800374a:	4303      	orrs	r3, r0
 800374c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800374e:	6a23      	ldr	r3, [r4, #32]
 8003750:	480e      	ldr	r0, [pc, #56]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003752:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003754:	4003      	ands	r3, r0
 8003756:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003758:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800375a:	07d3      	lsls	r3, r2, #31
 800375c:	d5a7      	bpl.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800375e:	f7fe f927 	bl	80019b0 <HAL_GetTick>
 8003762:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	2202      	movs	r2, #2
 8003766:	6a23      	ldr	r3, [r4, #32]
 8003768:	4213      	tst	r3, r2
 800376a:	d1a0      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fe f920 	bl	80019b0 <HAL_GetTick>
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003772:	1bc0      	subs	r0, r0, r7
 8003774:	4298      	cmp	r0, r3
 8003776:	d9f5      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003778:	e7db      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	40021000 	.word	0x40021000
 8003780:	40007000 	.word	0x40007000
 8003784:	fffffcff 	.word	0xfffffcff
 8003788:	efffffff 	.word	0xefffffff
 800378c:	fffeffff 	.word	0xfffeffff
 8003790:	00001388 	.word	0x00001388

08003794 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003794:	3002      	adds	r0, #2
 8003796:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003798:	4a02      	ldr	r2, [pc, #8]	; (80037a4 <USB_EnableGlobalInt+0x10>)
 800379a:	4313      	orrs	r3, r2
 800379c:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 800379e:	2000      	movs	r0, #0
 80037a0:	4770      	bx	lr
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	0000bf80 	.word	0x0000bf80

080037a8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80037a8:	3002      	adds	r0, #2
 80037aa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80037ac:	4a02      	ldr	r2, [pc, #8]	; (80037b8 <USB_DisableGlobalInt+0x10>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 80037b2:	2000      	movs	r0, #0
 80037b4:	4770      	bx	lr
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	0000407f 	.word	0x0000407f

080037bc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037bc:	b084      	sub	sp, #16
 80037be:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80037c0:	2301      	movs	r3, #1
{
 80037c2:	9202      	str	r2, [sp, #8]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80037c4:	2200      	movs	r2, #0
{
 80037c6:	9101      	str	r1, [sp, #4]
  USBx->CNTR = USB_CNTR_FRES;
 80037c8:	1c81      	adds	r1, r0, #2
 80037ca:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80037cc:	1d83      	adds	r3, r0, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80037ce:	3050      	adds	r0, #80	; 0x50
  USBx->CNTR = 0;
 80037d0:	87ca      	strh	r2, [r1, #62]	; 0x3e
  USBx->ISTR = 0;
 80037d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 80037d4:	8002      	strh	r2, [r0, #0]
  USBx->CNTR |= winterruptmask;
 80037d6:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <USB_DevInit+0x28>)
 80037da:	4303      	orrs	r3, r0
 80037dc:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80037de:	0010      	movs	r0, r2
 80037e0:	b004      	add	sp, #16
 80037e2:	4770      	bx	lr
 80037e4:	0000bf80 	.word	0x0000bf80

080037e8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80037ea:	780d      	ldrb	r5, [r1, #0]
 80037ec:	4a91      	ldr	r2, [pc, #580]	; (8003a34 <USB_ActivateEndpoint+0x24c>)
 80037ee:	00ad      	lsls	r5, r5, #2
 80037f0:	1945      	adds	r5, r0, r5
 80037f2:	882c      	ldrh	r4, [r5, #0]
{
 80037f4:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80037f6:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80037f8:	2201      	movs	r2, #1
  switch (ep->type)
 80037fa:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 80037fc:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 80037fe:	2803      	cmp	r0, #3
 8003800:	d808      	bhi.n	8003814 <USB_ActivateEndpoint+0x2c>
 8003802:	f7fc fc81 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003806:	4b02      	.short	0x4b02
 8003808:	4805      	.short	0x4805
      wEpRegVal |= USB_EP_CONTROL;
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	0092      	lsls	r2, r2, #2
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800380e:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8003810:	2200      	movs	r2, #0
 8003812:	9200      	str	r2, [sp, #0]
 8003814:	001e      	movs	r6, r3
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003816:	4a88      	ldr	r2, [pc, #544]	; (8003a38 <USB_ActivateEndpoint+0x250>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003818:	4f88      	ldr	r7, [pc, #544]	; (8003a3c <USB_ActivateEndpoint+0x254>)
  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800381a:	4314      	orrs	r4, r2
 800381c:	b2a4      	uxth	r4, r4
 800381e:	802c      	strh	r4, [r5, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003820:	780d      	ldrb	r5, [r1, #0]
 8003822:	3650      	adds	r6, #80	; 0x50
 8003824:	00ac      	lsls	r4, r5, #2
 8003826:	191c      	adds	r4, r3, r4
 8003828:	8820      	ldrh	r0, [r4, #0]
 800382a:	4038      	ands	r0, r7
 800382c:	4328      	orrs	r0, r5
 800382e:	4310      	orrs	r0, r2
 8003830:	b280      	uxth	r0, r0
 8003832:	8020      	strh	r0, [r4, #0]

  if (ep->doublebuffer == 0U)
 8003834:	7b0d      	ldrb	r5, [r1, #12]
 8003836:	7808      	ldrb	r0, [r1, #0]
 8003838:	003c      	movs	r4, r7
 800383a:	2d00      	cmp	r5, #0
 800383c:	d000      	beq.n	8003840 <USB_ActivateEndpoint+0x58>
 800383e:	e06f      	b.n	8003920 <USB_ActivateEndpoint+0x138>
 8003840:	00c0      	lsls	r0, r0, #3
 8003842:	18c0      	adds	r0, r0, r3
 8003844:	88cd      	ldrh	r5, [r1, #6]
 8003846:	9001      	str	r0, [sp, #4]
  {
    if (ep->is_in != 0U)
 8003848:	7848      	ldrb	r0, [r1, #1]
 800384a:	086d      	lsrs	r5, r5, #1
 800384c:	006d      	lsls	r5, r5, #1
 800384e:	2800      	cmp	r0, #0
 8003850:	d029      	beq.n	80038a6 <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003852:	8834      	ldrh	r4, [r6, #0]
 8003854:	9801      	ldr	r0, [sp, #4]
 8003856:	1820      	adds	r0, r4, r0
 8003858:	2480      	movs	r4, #128	; 0x80
 800385a:	00e4      	lsls	r4, r4, #3
 800385c:	1900      	adds	r0, r0, r4
 800385e:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003860:	7808      	ldrb	r0, [r1, #0]
 8003862:	0080      	lsls	r0, r0, #2
 8003864:	1818      	adds	r0, r3, r0
 8003866:	8804      	ldrh	r4, [r0, #0]
 8003868:	0664      	lsls	r4, r4, #25
 800386a:	d504      	bpl.n	8003876 <USB_ActivateEndpoint+0x8e>
 800386c:	8804      	ldrh	r4, [r0, #0]
 800386e:	4027      	ands	r7, r4
 8003870:	4c73      	ldr	r4, [pc, #460]	; (8003a40 <USB_ActivateEndpoint+0x258>)
 8003872:	4327      	orrs	r7, r4
 8003874:	8007      	strh	r7, [r0, #0]
 8003876:	7808      	ldrb	r0, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003878:	78c9      	ldrb	r1, [r1, #3]
 800387a:	0080      	lsls	r0, r0, #2
 800387c:	181b      	adds	r3, r3, r0
 800387e:	4871      	ldr	r0, [pc, #452]	; (8003a44 <USB_ActivateEndpoint+0x25c>)
 8003880:	2901      	cmp	r1, #1
 8003882:	d00d      	beq.n	80038a0 <USB_ActivateEndpoint+0xb8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003884:	8819      	ldrh	r1, [r3, #0]
 8003886:	4008      	ands	r0, r1
 8003888:	2120      	movs	r1, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800388a:	4041      	eors	r1, r0
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800388c:	430a      	orrs	r2, r1
 800388e:	b292      	uxth	r2, r2
    }
  }

  return ret;
}
 8003890:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003892:	801a      	strh	r2, [r3, #0]
}
 8003894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8003896:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003898:	00d2      	lsls	r2, r2, #3
 800389a:	e7b8      	b.n	800380e <USB_ActivateEndpoint+0x26>
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	e7fb      	b.n	8003898 <USB_ActivateEndpoint+0xb0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038a0:	8819      	ldrh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038a2:	4001      	ands	r1, r0
 80038a4:	e7f2      	b.n	800388c <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038a6:	8837      	ldrh	r7, [r6, #0]
 80038a8:	9801      	ldr	r0, [sp, #4]
 80038aa:	1838      	adds	r0, r7, r0
 80038ac:	4f66      	ldr	r7, [pc, #408]	; (8003a48 <USB_ActivateEndpoint+0x260>)
 80038ae:	19c0      	adds	r0, r0, r7
 80038b0:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038b2:	7808      	ldrb	r0, [r1, #0]
 80038b4:	8835      	ldrh	r5, [r6, #0]
 80038b6:	00c0      	lsls	r0, r0, #3
 80038b8:	4e64      	ldr	r6, [pc, #400]	; (8003a4c <USB_ActivateEndpoint+0x264>)
 80038ba:	18c0      	adds	r0, r0, r3
 80038bc:	1980      	adds	r0, r0, r6
 80038be:	1940      	adds	r0, r0, r5
 80038c0:	690d      	ldr	r5, [r1, #16]
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	d119      	bne.n	80038fa <USB_ActivateEndpoint+0x112>
 80038c6:	8805      	ldrh	r5, [r0, #0]
 80038c8:	4e61      	ldr	r6, [pc, #388]	; (8003a50 <USB_ActivateEndpoint+0x268>)
 80038ca:	402e      	ands	r6, r5
 80038cc:	4d61      	ldr	r5, [pc, #388]	; (8003a54 <USB_ActivateEndpoint+0x26c>)
 80038ce:	4335      	orrs	r5, r6
 80038d0:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038d2:	7808      	ldrb	r0, [r1, #0]
 80038d4:	0080      	lsls	r0, r0, #2
 80038d6:	1818      	adds	r0, r3, r0
 80038d8:	8805      	ldrh	r5, [r0, #0]
 80038da:	046d      	lsls	r5, r5, #17
 80038dc:	d504      	bpl.n	80038e8 <USB_ActivateEndpoint+0x100>
 80038de:	8805      	ldrh	r5, [r0, #0]
 80038e0:	402c      	ands	r4, r5
 80038e2:	4d5d      	ldr	r5, [pc, #372]	; (8003a58 <USB_ActivateEndpoint+0x270>)
 80038e4:	432c      	orrs	r4, r5
 80038e6:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038e8:	7809      	ldrb	r1, [r1, #0]
 80038ea:	485c      	ldr	r0, [pc, #368]	; (8003a5c <USB_ActivateEndpoint+0x274>)
 80038ec:	0089      	lsls	r1, r1, #2
 80038ee:	185b      	adds	r3, r3, r1
 80038f0:	8819      	ldrh	r1, [r3, #0]
 80038f2:	4008      	ands	r0, r1
 80038f4:	21c0      	movs	r1, #192	; 0xc0
 80038f6:	0189      	lsls	r1, r1, #6
 80038f8:	e7c7      	b.n	800388a <USB_ActivateEndpoint+0xa2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038fa:	2d3e      	cmp	r5, #62	; 0x3e
 80038fc:	d806      	bhi.n	800390c <USB_ActivateEndpoint+0x124>
 80038fe:	2701      	movs	r7, #1
 8003900:	086e      	lsrs	r6, r5, #1
 8003902:	403d      	ands	r5, r7
 8003904:	1976      	adds	r6, r6, r5
 8003906:	02b6      	lsls	r6, r6, #10
 8003908:	8006      	strh	r6, [r0, #0]
 800390a:	e7e2      	b.n	80038d2 <USB_ActivateEndpoint+0xea>
 800390c:	271f      	movs	r7, #31
 800390e:	096e      	lsrs	r6, r5, #5
 8003910:	403d      	ands	r5, r7
 8003912:	426f      	negs	r7, r5
 8003914:	417d      	adcs	r5, r7
 8003916:	1b76      	subs	r6, r6, r5
 8003918:	4d4e      	ldr	r5, [pc, #312]	; (8003a54 <USB_ActivateEndpoint+0x26c>)
 800391a:	02b6      	lsls	r6, r6, #10
 800391c:	432e      	orrs	r6, r5
 800391e:	e7f3      	b.n	8003908 <USB_ActivateEndpoint+0x120>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003920:	0080      	lsls	r0, r0, #2
 8003922:	1818      	adds	r0, r3, r0
 8003924:	8805      	ldrh	r5, [r0, #0]
 8003926:	403d      	ands	r5, r7
 8003928:	4f4d      	ldr	r7, [pc, #308]	; (8003a60 <USB_ActivateEndpoint+0x278>)
 800392a:	433d      	orrs	r5, r7
 800392c:	8005      	strh	r5, [r0, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800392e:	7808      	ldrb	r0, [r1, #0]
 8003930:	8835      	ldrh	r5, [r6, #0]
 8003932:	00c0      	lsls	r0, r0, #3
 8003934:	1940      	adds	r0, r0, r5
 8003936:	2580      	movs	r5, #128	; 0x80
 8003938:	18c0      	adds	r0, r0, r3
 800393a:	00ed      	lsls	r5, r5, #3
 800393c:	1940      	adds	r0, r0, r5
 800393e:	890d      	ldrh	r5, [r1, #8]
 8003940:	086d      	lsrs	r5, r5, #1
 8003942:	006d      	lsls	r5, r5, #1
 8003944:	8005      	strh	r5, [r0, #0]
 8003946:	8835      	ldrh	r5, [r6, #0]
 8003948:	4e3e      	ldr	r6, [pc, #248]	; (8003a44 <USB_ActivateEndpoint+0x25c>)
 800394a:	7808      	ldrb	r0, [r1, #0]
 800394c:	46b4      	mov	ip, r6
 800394e:	2680      	movs	r6, #128	; 0x80
 8003950:	00c0      	lsls	r0, r0, #3
 8003952:	1940      	adds	r0, r0, r5
 8003954:	4d3c      	ldr	r5, [pc, #240]	; (8003a48 <USB_ActivateEndpoint+0x260>)
 8003956:	18c0      	adds	r0, r0, r3
 8003958:	1940      	adds	r0, r0, r5
 800395a:	894d      	ldrh	r5, [r1, #10]
 800395c:	01f6      	lsls	r6, r6, #7
 800395e:	086d      	lsrs	r5, r5, #1
 8003960:	006d      	lsls	r5, r5, #1
 8003962:	8005      	strh	r5, [r0, #0]
 8003964:	7808      	ldrb	r0, [r1, #0]
    if (ep->is_in == 0U)
 8003966:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003968:	0080      	lsls	r0, r0, #2
 800396a:	1818      	adds	r0, r3, r0
    if (ep->is_in == 0U)
 800396c:	2d00      	cmp	r5, #0
 800396e:	d12d      	bne.n	80039cc <USB_ActivateEndpoint+0x1e4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003970:	8805      	ldrh	r5, [r0, #0]
 8003972:	4235      	tst	r5, r6
 8003974:	d004      	beq.n	8003980 <USB_ActivateEndpoint+0x198>
 8003976:	8805      	ldrh	r5, [r0, #0]
 8003978:	4e37      	ldr	r6, [pc, #220]	; (8003a58 <USB_ActivateEndpoint+0x270>)
 800397a:	4025      	ands	r5, r4
 800397c:	4335      	orrs	r5, r6
 800397e:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003980:	7808      	ldrb	r0, [r1, #0]
 8003982:	4e38      	ldr	r6, [pc, #224]	; (8003a64 <USB_ActivateEndpoint+0x27c>)
 8003984:	0080      	lsls	r0, r0, #2
 8003986:	1818      	adds	r0, r3, r0
 8003988:	8805      	ldrh	r5, [r0, #0]
 800398a:	066d      	lsls	r5, r5, #25
 800398c:	d504      	bpl.n	8003998 <USB_ActivateEndpoint+0x1b0>
 800398e:	8805      	ldrh	r5, [r0, #0]
 8003990:	4025      	ands	r5, r4
 8003992:	4335      	orrs	r5, r6
 8003994:	b2ad      	uxth	r5, r5
 8003996:	8005      	strh	r5, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8003998:	7808      	ldrb	r0, [r1, #0]
 800399a:	0080      	lsls	r0, r0, #2
 800399c:	1818      	adds	r0, r3, r0
 800399e:	8805      	ldrh	r5, [r0, #0]
 80039a0:	402c      	ands	r4, r5
 80039a2:	4326      	orrs	r6, r4
 80039a4:	b2b6      	uxth	r6, r6
 80039a6:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039a8:	780c      	ldrb	r4, [r1, #0]
 80039aa:	482c      	ldr	r0, [pc, #176]	; (8003a5c <USB_ActivateEndpoint+0x274>)
 80039ac:	00a4      	lsls	r4, r4, #2
 80039ae:	191c      	adds	r4, r3, r4
 80039b0:	8825      	ldrh	r5, [r4, #0]
 80039b2:	4005      	ands	r5, r0
 80039b4:	20c0      	movs	r0, #192	; 0xc0
 80039b6:	0180      	lsls	r0, r0, #6
 80039b8:	4068      	eors	r0, r5
 80039ba:	4310      	orrs	r0, r2
 80039bc:	b280      	uxth	r0, r0
 80039be:	8020      	strh	r0, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039c0:	7809      	ldrb	r1, [r1, #0]
 80039c2:	4660      	mov	r0, ip
 80039c4:	0089      	lsls	r1, r1, #2
 80039c6:	185b      	adds	r3, r3, r1
 80039c8:	8819      	ldrh	r1, [r3, #0]
 80039ca:	e76a      	b.n	80038a2 <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039cc:	8807      	ldrh	r7, [r0, #0]
 80039ce:	4d26      	ldr	r5, [pc, #152]	; (8003a68 <USB_ActivateEndpoint+0x280>)
 80039d0:	4237      	tst	r7, r6
 80039d2:	d004      	beq.n	80039de <USB_ActivateEndpoint+0x1f6>
 80039d4:	8806      	ldrh	r6, [r0, #0]
 80039d6:	4026      	ands	r6, r4
 80039d8:	432e      	orrs	r6, r5
 80039da:	b2b6      	uxth	r6, r6
 80039dc:	8006      	strh	r6, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039de:	7808      	ldrb	r0, [r1, #0]
 80039e0:	0080      	lsls	r0, r0, #2
 80039e2:	1818      	adds	r0, r3, r0
 80039e4:	8806      	ldrh	r6, [r0, #0]
 80039e6:	0676      	lsls	r6, r6, #25
 80039e8:	d504      	bpl.n	80039f4 <USB_ActivateEndpoint+0x20c>
 80039ea:	8806      	ldrh	r6, [r0, #0]
 80039ec:	4f14      	ldr	r7, [pc, #80]	; (8003a40 <USB_ActivateEndpoint+0x258>)
 80039ee:	4026      	ands	r6, r4
 80039f0:	433e      	orrs	r6, r7
 80039f2:	8006      	strh	r6, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80039f4:	7808      	ldrb	r0, [r1, #0]
 80039f6:	0080      	lsls	r0, r0, #2
 80039f8:	1818      	adds	r0, r3, r0
 80039fa:	8806      	ldrh	r6, [r0, #0]
 80039fc:	4034      	ands	r4, r6
 80039fe:	4325      	orrs	r5, r4
 8003a00:	b2ad      	uxth	r5, r5
 8003a02:	8005      	strh	r5, [r0, #0]
 8003a04:	7808      	ldrb	r0, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8003a06:	78cc      	ldrb	r4, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a08:	0080      	lsls	r0, r0, #2
 8003a0a:	1818      	adds	r0, r3, r0
      if (ep->type != EP_TYPE_ISOC)
 8003a0c:	2c01      	cmp	r4, #1
 8003a0e:	d00d      	beq.n	8003a2c <USB_ActivateEndpoint+0x244>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a10:	4664      	mov	r4, ip
 8003a12:	8805      	ldrh	r5, [r0, #0]
 8003a14:	4025      	ands	r5, r4
 8003a16:	2420      	movs	r4, #32
 8003a18:	406c      	eors	r4, r5
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a1a:	4314      	orrs	r4, r2
 8003a1c:	b2a4      	uxth	r4, r4
 8003a1e:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a20:	7809      	ldrb	r1, [r1, #0]
 8003a22:	480e      	ldr	r0, [pc, #56]	; (8003a5c <USB_ActivateEndpoint+0x274>)
 8003a24:	0089      	lsls	r1, r1, #2
 8003a26:	185b      	adds	r3, r3, r1
 8003a28:	8819      	ldrh	r1, [r3, #0]
 8003a2a:	e73a      	b.n	80038a2 <USB_ActivateEndpoint+0xba>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a2c:	4665      	mov	r5, ip
 8003a2e:	8804      	ldrh	r4, [r0, #0]
 8003a30:	402c      	ands	r4, r5
 8003a32:	e7f2      	b.n	8003a1a <USB_ActivateEndpoint+0x232>
 8003a34:	ffff898f 	.word	0xffff898f
 8003a38:	ffff8080 	.word	0xffff8080
 8003a3c:	ffff8f8f 	.word	0xffff8f8f
 8003a40:	000080c0 	.word	0x000080c0
 8003a44:	ffff8fbf 	.word	0xffff8fbf
 8003a48:	00000404 	.word	0x00000404
 8003a4c:	00000406 	.word	0x00000406
 8003a50:	ffff83ff 	.word	0xffff83ff
 8003a54:	ffff8000 	.word	0xffff8000
 8003a58:	0000c080 	.word	0x0000c080
 8003a5c:	ffffbf8f 	.word	0xffffbf8f
 8003a60:	00008180 	.word	0x00008180
 8003a64:	ffff80c0 	.word	0xffff80c0
 8003a68:	ffffc080 	.word	0xffffc080

08003a6c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003a70:	7b0d      	ldrb	r5, [r1, #12]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	784c      	ldrb	r4, [r1, #1]
 8003a76:	18c3      	adds	r3, r0, r3
 8003a78:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <USB_DeactivateEndpoint+0x10c>)
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	d121      	bne.n	8003ac2 <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
 8003a7e:	2c00      	cmp	r4, #0
 8003a80:	d010      	beq.n	8003aa4 <USB_DeactivateEndpoint+0x38>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a82:	881c      	ldrh	r4, [r3, #0]
 8003a84:	0664      	lsls	r4, r4, #25
 8003a86:	d505      	bpl.n	8003a94 <USB_DeactivateEndpoint+0x28>
 8003a88:	881c      	ldrh	r4, [r3, #0]
 8003a8a:	4d3c      	ldr	r5, [pc, #240]	; (8003b7c <USB_DeactivateEndpoint+0x110>)
 8003a8c:	402c      	ands	r4, r5
 8003a8e:	4d3c      	ldr	r5, [pc, #240]	; (8003b80 <USB_DeactivateEndpoint+0x114>)
 8003a90:	432c      	orrs	r4, r5
 8003a92:	801c      	strh	r4, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a94:	780b      	ldrb	r3, [r1, #0]
 8003a96:	493b      	ldr	r1, [pc, #236]	; (8003b84 <USB_DeactivateEndpoint+0x118>)
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	18c0      	adds	r0, r0, r3
 8003a9c:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	e03f      	b.n	8003b24 <USB_DeactivateEndpoint+0xb8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aa4:	881c      	ldrh	r4, [r3, #0]
 8003aa6:	0464      	lsls	r4, r4, #17
 8003aa8:	d505      	bpl.n	8003ab6 <USB_DeactivateEndpoint+0x4a>
 8003aaa:	881c      	ldrh	r4, [r3, #0]
 8003aac:	4d33      	ldr	r5, [pc, #204]	; (8003b7c <USB_DeactivateEndpoint+0x110>)
 8003aae:	402c      	ands	r4, r5
 8003ab0:	4d35      	ldr	r5, [pc, #212]	; (8003b88 <USB_DeactivateEndpoint+0x11c>)
 8003ab2:	432c      	orrs	r4, r5
 8003ab4:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ab6:	780b      	ldrb	r3, [r1, #0]
 8003ab8:	4934      	ldr	r1, [pc, #208]	; (8003b8c <USB_DeactivateEndpoint+0x120>)
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	18c0      	adds	r0, r0, r3
 8003abe:	8803      	ldrh	r3, [r0, #0]
 8003ac0:	e7ed      	b.n	8003a9e <USB_DeactivateEndpoint+0x32>
 8003ac2:	2680      	movs	r6, #128	; 0x80
 8003ac4:	4d2d      	ldr	r5, [pc, #180]	; (8003b7c <USB_DeactivateEndpoint+0x110>)
 8003ac6:	4f2f      	ldr	r7, [pc, #188]	; (8003b84 <USB_DeactivateEndpoint+0x118>)
 8003ac8:	01f6      	lsls	r6, r6, #7
    if (ep->is_in == 0U)
 8003aca:	2c00      	cmp	r4, #0
 8003acc:	d12e      	bne.n	8003b2c <USB_DeactivateEndpoint+0xc0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ace:	881c      	ldrh	r4, [r3, #0]
 8003ad0:	4234      	tst	r4, r6
 8003ad2:	d004      	beq.n	8003ade <USB_DeactivateEndpoint+0x72>
 8003ad4:	881c      	ldrh	r4, [r3, #0]
 8003ad6:	4e2c      	ldr	r6, [pc, #176]	; (8003b88 <USB_DeactivateEndpoint+0x11c>)
 8003ad8:	402c      	ands	r4, r5
 8003ada:	4334      	orrs	r4, r6
 8003adc:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ade:	780b      	ldrb	r3, [r1, #0]
 8003ae0:	4c2b      	ldr	r4, [pc, #172]	; (8003b90 <USB_DeactivateEndpoint+0x124>)
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	18c3      	adds	r3, r0, r3
 8003ae6:	881e      	ldrh	r6, [r3, #0]
 8003ae8:	0676      	lsls	r6, r6, #25
 8003aea:	d504      	bpl.n	8003af6 <USB_DeactivateEndpoint+0x8a>
 8003aec:	881e      	ldrh	r6, [r3, #0]
 8003aee:	402e      	ands	r6, r5
 8003af0:	4326      	orrs	r6, r4
 8003af2:	b2b6      	uxth	r6, r6
 8003af4:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8003af6:	780b      	ldrb	r3, [r1, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	18c3      	adds	r3, r0, r3
 8003afc:	881e      	ldrh	r6, [r3, #0]
 8003afe:	4035      	ands	r5, r6
 8003b00:	432c      	orrs	r4, r5
 8003b02:	b2a4      	uxth	r4, r4
 8003b04:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b06:	780c      	ldrb	r4, [r1, #0]
 8003b08:	4d20      	ldr	r5, [pc, #128]	; (8003b8c <USB_DeactivateEndpoint+0x120>)
 8003b0a:	00a4      	lsls	r4, r4, #2
 8003b0c:	1904      	adds	r4, r0, r4
 8003b0e:	8823      	ldrh	r3, [r4, #0]
 8003b10:	402b      	ands	r3, r5
 8003b12:	4313      	orrs	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b18:	780b      	ldrb	r3, [r1, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	18c0      	adds	r0, r0, r3
 8003b1e:	8803      	ldrh	r3, [r0, #0]
 8003b20:	401f      	ands	r7, r3
 8003b22:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b24:	b292      	uxth	r2, r2
 8003b26:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 8003b28:	2000      	movs	r0, #0
 8003b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b2c:	881c      	ldrh	r4, [r3, #0]
 8003b2e:	4234      	tst	r4, r6
 8003b30:	d005      	beq.n	8003b3e <USB_DeactivateEndpoint+0xd2>
 8003b32:	881e      	ldrh	r6, [r3, #0]
 8003b34:	4c17      	ldr	r4, [pc, #92]	; (8003b94 <USB_DeactivateEndpoint+0x128>)
 8003b36:	402e      	ands	r6, r5
 8003b38:	4326      	orrs	r6, r4
 8003b3a:	b2b6      	uxth	r6, r6
 8003b3c:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b3e:	780b      	ldrb	r3, [r1, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	18c3      	adds	r3, r0, r3
 8003b44:	881e      	ldrh	r6, [r3, #0]
 8003b46:	0674      	lsls	r4, r6, #25
 8003b48:	d504      	bpl.n	8003b54 <USB_DeactivateEndpoint+0xe8>
 8003b4a:	881e      	ldrh	r6, [r3, #0]
 8003b4c:	4c0c      	ldr	r4, [pc, #48]	; (8003b80 <USB_DeactivateEndpoint+0x114>)
 8003b4e:	402e      	ands	r6, r5
 8003b50:	4326      	orrs	r6, r4
 8003b52:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003b54:	780b      	ldrb	r3, [r1, #0]
 8003b56:	4c0f      	ldr	r4, [pc, #60]	; (8003b94 <USB_DeactivateEndpoint+0x128>)
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	18c3      	adds	r3, r0, r3
 8003b5c:	881e      	ldrh	r6, [r3, #0]
 8003b5e:	4035      	ands	r5, r6
 8003b60:	432c      	orrs	r4, r5
 8003b62:	b2a4      	uxth	r4, r4
 8003b64:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b66:	780b      	ldrb	r3, [r1, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	18c3      	adds	r3, r0, r3
 8003b6c:	881c      	ldrh	r4, [r3, #0]
 8003b6e:	4027      	ands	r7, r4
 8003b70:	4317      	orrs	r7, r2
 8003b72:	b2bf      	uxth	r7, r7
 8003b74:	801f      	strh	r7, [r3, #0]
 8003b76:	e79e      	b.n	8003ab6 <USB_DeactivateEndpoint+0x4a>
 8003b78:	ffff8080 	.word	0xffff8080
 8003b7c:	ffff8f8f 	.word	0xffff8f8f
 8003b80:	000080c0 	.word	0x000080c0
 8003b84:	ffff8fbf 	.word	0xffff8fbf
 8003b88:	0000c080 	.word	0x0000c080
 8003b8c:	ffffbf8f 	.word	0xffffbf8f
 8003b90:	ffff80c0 	.word	0xffff80c0
 8003b94:	ffffc080 	.word	0xffffc080

08003b98 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b98:	780b      	ldrb	r3, [r1, #0]
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <USB_EPSetStall+0x30>)
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8003ba0:	784b      	ldrb	r3, [r1, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ba6:	8803      	ldrh	r3, [r0, #0]
 8003ba8:	4908      	ldr	r1, [pc, #32]	; (8003bcc <USB_EPSetStall+0x34>)
 8003baa:	4019      	ands	r1, r3
 8003bac:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003bae:	404b      	eors	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003bba:	8803      	ldrh	r3, [r0, #0]
 8003bbc:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <USB_EPSetStall+0x38>)
 8003bbe:	4019      	ands	r1, r3
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	015b      	lsls	r3, r3, #5
 8003bc4:	e7f3      	b.n	8003bae <USB_EPSetStall+0x16>
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	ffff8080 	.word	0xffff8080
 8003bcc:	ffff8fbf 	.word	0xffff8fbf
 8003bd0:	ffffbf8f 	.word	0xffffbf8f

08003bd4 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003bd4:	7b0b      	ldrb	r3, [r1, #12]
{
 8003bd6:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11c      	bne.n	8003c16 <USB_EPClearStall+0x42>
 8003bdc:	780b      	ldrb	r3, [r1, #0]
  {
    if (ep->is_in != 0U)
 8003bde:	784a      	ldrb	r2, [r1, #1]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	18c3      	adds	r3, r0, r3
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	d018      	beq.n	8003c1a <USB_EPClearStall+0x46>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	0652      	lsls	r2, r2, #25
 8003bec:	d505      	bpl.n	8003bfa <USB_EPClearStall+0x26>
 8003bee:	881a      	ldrh	r2, [r3, #0]
 8003bf0:	4c13      	ldr	r4, [pc, #76]	; (8003c40 <USB_EPClearStall+0x6c>)
 8003bf2:	4022      	ands	r2, r4
 8003bf4:	4c13      	ldr	r4, [pc, #76]	; (8003c44 <USB_EPClearStall+0x70>)
 8003bf6:	4322      	orrs	r2, r4
 8003bf8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bfa:	78cb      	ldrb	r3, [r1, #3]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d00a      	beq.n	8003c16 <USB_EPClearStall+0x42>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c00:	780b      	ldrb	r3, [r1, #0]
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <USB_EPClearStall+0x74>)
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	18c0      	adds	r0, r0, r3
 8003c08:	8803      	ldrh	r3, [r0, #0]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c0e:	4053      	eors	r3, r2
 8003c10:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <USB_EPClearStall+0x78>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8003c16:	2000      	movs	r0, #0
 8003c18:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	0452      	lsls	r2, r2, #17
 8003c1e:	d505      	bpl.n	8003c2c <USB_EPClearStall+0x58>
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	4c07      	ldr	r4, [pc, #28]	; (8003c40 <USB_EPClearStall+0x6c>)
 8003c24:	4022      	ands	r2, r4
 8003c26:	4c0a      	ldr	r4, [pc, #40]	; (8003c50 <USB_EPClearStall+0x7c>)
 8003c28:	4322      	orrs	r2, r4
 8003c2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c2c:	780b      	ldrb	r3, [r1, #0]
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <USB_EPClearStall+0x80>)
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	18c0      	adds	r0, r0, r3
 8003c34:	8803      	ldrh	r3, [r0, #0]
 8003c36:	401a      	ands	r2, r3
 8003c38:	23c0      	movs	r3, #192	; 0xc0
 8003c3a:	019b      	lsls	r3, r3, #6
 8003c3c:	e7e7      	b.n	8003c0e <USB_EPClearStall+0x3a>
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	ffff8f8f 	.word	0xffff8f8f
 8003c44:	000080c0 	.word	0x000080c0
 8003c48:	ffff8fbf 	.word	0xffff8fbf
 8003c4c:	00008080 	.word	0x00008080
 8003c50:	0000c080 	.word	0x0000c080
 8003c54:	ffffbf8f 	.word	0xffffbf8f

08003c58 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	d102      	bne.n	8003c62 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	304c      	adds	r0, #76	; 0x4c
 8003c60:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8003c62:	2000      	movs	r0, #0
 8003c64:	4770      	bx	lr

08003c66 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	3058      	adds	r0, #88	; 0x58
 8003c6a:	8803      	ldrh	r3, [r0, #0]
 8003c6c:	0212      	lsls	r2, r2, #8
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8003c72:	2000      	movs	r0, #0
 8003c74:	4770      	bx	lr

08003c76 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003c76:	3006      	adds	r0, #6
 8003c78:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8003c7a:	b280      	uxth	r0, r0
  return tmpreg;
}
 8003c7c:	4770      	bx	lr

08003c7e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003c7e:	2000      	movs	r0, #0
 8003c80:	4770      	bx	lr

08003c82 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003c82:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c84:	2480      	movs	r4, #128	; 0x80
 8003c86:	00e4      	lsls	r4, r4, #3
 8003c88:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c8a:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c8c:	1880      	adds	r0, r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	1a40      	subs	r0, r0, r1
 8003c92:	1844      	adds	r4, r0, r1

  for (i = n; i != 0U; i--)
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d100      	bne.n	8003c9a <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003c98:	bd30      	pop	{r4, r5, pc}
 8003c9a:	784a      	ldrb	r2, [r1, #1]
 8003c9c:	780d      	ldrb	r5, [r1, #0]
 8003c9e:	0212      	lsls	r2, r2, #8
 8003ca0:	432a      	orrs	r2, r5
    *pdwVal = (uint16_t)temp2;
 8003ca2:	8022      	strh	r2, [r4, #0]
  for (i = n; i != 0U; i--)
 8003ca4:	3b01      	subs	r3, #1
    pBuf++;
 8003ca6:	3102      	adds	r1, #2
 8003ca8:	e7f3      	b.n	8003c92 <USB_WritePMA+0x10>
	...

08003cac <USB_EPStartXfer>:
{
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003cae:	784c      	ldrb	r4, [r1, #1]
{
 8003cb0:	0005      	movs	r5, r0
 8003cb2:	000e      	movs	r6, r1
 8003cb4:	698a      	ldr	r2, [r1, #24]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	7b08      	ldrb	r0, [r1, #12]
  if (ep->is_in == 1U)
 8003cba:	2c01      	cmp	r4, #1
 8003cbc:	d158      	bne.n	8003d70 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d922      	bls.n	8003d08 <USB_EPStartXfer+0x5c>
      ep->xfer_len -= len;
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	618a      	str	r2, [r1, #24]
 8003cc6:	002f      	movs	r7, r5
 8003cc8:	6971      	ldr	r1, [r6, #20]
 8003cca:	b29c      	uxth	r4, r3
 8003ccc:	3750      	adds	r7, #80	; 0x50
    if (ep->doublebuffer == 0U)
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d11e      	bne.n	8003d10 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003cd2:	88f2      	ldrh	r2, [r6, #6]
 8003cd4:	0023      	movs	r3, r4
 8003cd6:	0028      	movs	r0, r5
 8003cd8:	f7ff ffd3 	bl	8003c82 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cdc:	7833      	ldrb	r3, [r6, #0]
 8003cde:	883a      	ldrh	r2, [r7, #0]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	4a5b      	ldr	r2, [pc, #364]	; (8003e54 <USB_EPStartXfer+0x1a8>)
 8003ce6:	18eb      	adds	r3, r5, r3
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003cec:	7833      	ldrb	r3, [r6, #0]
 8003cee:	4a5a      	ldr	r2, [pc, #360]	; (8003e58 <USB_EPStartXfer+0x1ac>)
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	18ed      	adds	r5, r5, r3
 8003cf4:	882b      	ldrh	r3, [r5, #0]
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	2330      	movs	r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cfa:	4053      	eors	r3, r2
 8003cfc:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <USB_EPStartXfer+0x1b0>)
}
 8003cfe:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	802b      	strh	r3, [r5, #0]
}
 8003d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ep->xfer_len = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	618b      	str	r3, [r1, #24]
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	e7da      	b.n	8003cc6 <USB_EPStartXfer+0x1a>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d10:	7833      	ldrb	r3, [r6, #0]
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	18aa      	adds	r2, r5, r2
 8003d16:	8810      	ldrh	r0, [r2, #0]
 8003d18:	00da      	lsls	r2, r3, #3
 8003d1a:	0643      	lsls	r3, r0, #25
 8003d1c:	d517      	bpl.n	8003d4e <USB_EPStartXfer+0xa2>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d1e:	883b      	ldrh	r3, [r7, #0]
 8003d20:	189b      	adds	r3, r3, r2
 8003d22:	4a4f      	ldr	r2, [pc, #316]	; (8003e60 <USB_EPStartXfer+0x1b4>)
 8003d24:	195b      	adds	r3, r3, r5
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003d2a:	8972      	ldrh	r2, [r6, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d2c:	0023      	movs	r3, r4
 8003d2e:	0028      	movs	r0, r5
 8003d30:	f7ff ffa7 	bl	8003c82 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003d34:	7872      	ldrb	r2, [r6, #1]
 8003d36:	7833      	ldrb	r3, [r6, #0]
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	d110      	bne.n	8003d5e <USB_EPStartXfer+0xb2>
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	18eb      	adds	r3, r5, r3
 8003d40:	4948      	ldr	r1, [pc, #288]	; (8003e64 <USB_EPStartXfer+0x1b8>)
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	400a      	ands	r2, r1
 8003d46:	4948      	ldr	r1, [pc, #288]	; (8003e68 <USB_EPStartXfer+0x1bc>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	e7ce      	b.n	8003cec <USB_EPStartXfer+0x40>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d4e:	883b      	ldrh	r3, [r7, #0]
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	4a40      	ldr	r2, [pc, #256]	; (8003e54 <USB_EPStartXfer+0x1a8>)
 8003d54:	195b      	adds	r3, r3, r5
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8003d5a:	8932      	ldrh	r2, [r6, #8]
 8003d5c:	e7e6      	b.n	8003d2c <USB_EPStartXfer+0x80>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003d5e:	2a01      	cmp	r2, #1
 8003d60:	d1c4      	bne.n	8003cec <USB_EPStartXfer+0x40>
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	18eb      	adds	r3, r5, r3
 8003d66:	493f      	ldr	r1, [pc, #252]	; (8003e64 <USB_EPStartXfer+0x1b8>)
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	493f      	ldr	r1, [pc, #252]	; (8003e6c <USB_EPStartXfer+0x1c0>)
 8003d6e:	e7eb      	b.n	8003d48 <USB_EPStartXfer+0x9c>
    if (ep->xfer_len > ep->maxpacket)
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d915      	bls.n	8003da0 <USB_EPStartXfer+0xf4>
      ep->xfer_len -= len;
 8003d74:	1ad2      	subs	r2, r2, r3
 8003d76:	618a      	str	r2, [r1, #24]
 8003d78:	7831      	ldrb	r1, [r6, #0]
    if (ep->doublebuffer == 0U)
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d114      	bne.n	8003da8 <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d7e:	002a      	movs	r2, r5
 8003d80:	3250      	adds	r2, #80	; 0x50
 8003d82:	8810      	ldrh	r0, [r2, #0]
 8003d84:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <USB_EPStartXfer+0x1b4>)
 8003d86:	00c9      	lsls	r1, r1, #3
 8003d88:	18aa      	adds	r2, r5, r2
 8003d8a:	1812      	adds	r2, r2, r0
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d8c:	188a      	adds	r2, r1, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d139      	bne.n	8003e06 <USB_EPStartXfer+0x15a>
 8003d92:	8813      	ldrh	r3, [r2, #0]
 8003d94:	4936      	ldr	r1, [pc, #216]	; (8003e70 <USB_EPStartXfer+0x1c4>)
 8003d96:	4019      	ands	r1, r3
 8003d98:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <USB_EPStartXfer+0x1c8>)
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	8013      	strh	r3, [r2, #0]
 8003d9e:	e03a      	b.n	8003e16 <USB_EPStartXfer+0x16a>
      ep->xfer_len = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	618b      	str	r3, [r1, #24]
 8003da4:	0013      	movs	r3, r2
 8003da6:	e7e7      	b.n	8003d78 <USB_EPStartXfer+0xcc>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003da8:	2c00      	cmp	r4, #0
 8003daa:	d117      	bne.n	8003ddc <USB_EPStartXfer+0x130>
 8003dac:	002a      	movs	r2, r5
 8003dae:	3250      	adds	r2, #80	; 0x50
 8003db0:	8810      	ldrh	r0, [r2, #0]
 8003db2:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <USB_EPStartXfer+0x1a8>)
 8003db4:	00c9      	lsls	r1, r1, #3
 8003db6:	18aa      	adds	r2, r5, r2
 8003db8:	1812      	adds	r2, r2, r0
 8003dba:	1852      	adds	r2, r2, r1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <USB_EPStartXfer+0x120>
 8003dc0:	8811      	ldrh	r1, [r2, #0]
 8003dc2:	482b      	ldr	r0, [pc, #172]	; (8003e70 <USB_EPStartXfer+0x1c4>)
 8003dc4:	4008      	ands	r0, r1
 8003dc6:	492b      	ldr	r1, [pc, #172]	; (8003e74 <USB_EPStartXfer+0x1c8>)
 8003dc8:	4301      	orrs	r1, r0
 8003dca:	e006      	b.n	8003dda <USB_EPStartXfer+0x12e>
 8003dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8003dce:	d811      	bhi.n	8003df4 <USB_EPStartXfer+0x148>
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	0859      	lsrs	r1, r3, #1
 8003dd4:	4018      	ands	r0, r3
 8003dd6:	1809      	adds	r1, r1, r0
 8003dd8:	0289      	lsls	r1, r1, #10
 8003dda:	8011      	strh	r1, [r2, #0]
 8003ddc:	7871      	ldrb	r1, [r6, #1]
 8003dde:	7832      	ldrb	r2, [r6, #0]
 8003de0:	2900      	cmp	r1, #0
 8003de2:	d12b      	bne.n	8003e3c <USB_EPStartXfer+0x190>
 8003de4:	0029      	movs	r1, r5
 8003de6:	3150      	adds	r1, #80	; 0x50
 8003de8:	8808      	ldrh	r0, [r1, #0]
 8003dea:	491d      	ldr	r1, [pc, #116]	; (8003e60 <USB_EPStartXfer+0x1b4>)
 8003dec:	00d2      	lsls	r2, r2, #3
 8003dee:	1869      	adds	r1, r5, r1
 8003df0:	1809      	adds	r1, r1, r0
 8003df2:	e7cb      	b.n	8003d8c <USB_EPStartXfer+0xe0>
 8003df4:	201f      	movs	r0, #31
 8003df6:	4018      	ands	r0, r3
 8003df8:	4244      	negs	r4, r0
 8003dfa:	4160      	adcs	r0, r4
 8003dfc:	0959      	lsrs	r1, r3, #5
 8003dfe:	1a09      	subs	r1, r1, r0
 8003e00:	0289      	lsls	r1, r1, #10
 8003e02:	481c      	ldr	r0, [pc, #112]	; (8003e74 <USB_EPStartXfer+0x1c8>)
 8003e04:	e7e0      	b.n	8003dc8 <USB_EPStartXfer+0x11c>
 8003e06:	2b3e      	cmp	r3, #62	; 0x3e
 8003e08:	d80e      	bhi.n	8003e28 <USB_EPStartXfer+0x17c>
 8003e0a:	2401      	movs	r4, #1
 8003e0c:	0859      	lsrs	r1, r3, #1
 8003e0e:	401c      	ands	r4, r3
 8003e10:	1909      	adds	r1, r1, r4
 8003e12:	0289      	lsls	r1, r1, #10
 8003e14:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e16:	7833      	ldrb	r3, [r6, #0]
 8003e18:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <USB_EPStartXfer+0x1cc>)
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	18ed      	adds	r5, r5, r3
 8003e1e:	882b      	ldrh	r3, [r5, #0]
 8003e20:	401a      	ands	r2, r3
 8003e22:	23c0      	movs	r3, #192	; 0xc0
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	e768      	b.n	8003cfa <USB_EPStartXfer+0x4e>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003e28:	241f      	movs	r4, #31
 8003e2a:	401c      	ands	r4, r3
 8003e2c:	0959      	lsrs	r1, r3, #5
 8003e2e:	4263      	negs	r3, r4
 8003e30:	415c      	adcs	r4, r3
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <USB_EPStartXfer+0x1c8>)
 8003e34:	1b09      	subs	r1, r1, r4
 8003e36:	0289      	lsls	r1, r1, #10
 8003e38:	4319      	orrs	r1, r3
 8003e3a:	e7eb      	b.n	8003e14 <USB_EPStartXfer+0x168>
 8003e3c:	2901      	cmp	r1, #1
 8003e3e:	d1ea      	bne.n	8003e16 <USB_EPStartXfer+0x16a>
 8003e40:	0029      	movs	r1, r5
 8003e42:	3150      	adds	r1, #80	; 0x50
 8003e44:	8809      	ldrh	r1, [r1, #0]
 8003e46:	00d2      	lsls	r2, r2, #3
 8003e48:	1852      	adds	r2, r2, r1
 8003e4a:	4905      	ldr	r1, [pc, #20]	; (8003e60 <USB_EPStartXfer+0x1b4>)
 8003e4c:	18aa      	adds	r2, r5, r2
 8003e4e:	1852      	adds	r2, r2, r1
 8003e50:	e7a4      	b.n	8003d9c <USB_EPStartXfer+0xf0>
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	00000402 	.word	0x00000402
 8003e58:	ffff8fbf 	.word	0xffff8fbf
 8003e5c:	ffff8080 	.word	0xffff8080
 8003e60:	00000406 	.word	0x00000406
 8003e64:	ffff8f8f 	.word	0xffff8f8f
 8003e68:	000080c0 	.word	0x000080c0
 8003e6c:	0000c080 	.word	0x0000c080
 8003e70:	ffff83ff 	.word	0xffff83ff
 8003e74:	ffff8000 	.word	0xffff8000
 8003e78:	ffffbf8f 	.word	0xffffbf8f

08003e7c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e7e:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003e80:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e82:	00ed      	lsls	r5, r5, #3
 8003e84:	1952      	adds	r2, r2, r5

  for (i = n; i != 0U; i--)
 8003e86:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8003e88:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e8a:	1880      	adds	r0, r0, r2
 8003e8c:	1a47      	subs	r7, r0, r1
 8003e8e:	197a      	adds	r2, r7, r5
  for (i = n; i != 0U; i--)
 8003e90:	2e00      	cmp	r6, #0
 8003e92:	d107      	bne.n	8003ea4 <USB_ReadPMA+0x28>
 8003e94:	0064      	lsls	r4, r4, #1
 8003e96:	1900      	adds	r0, r0, r4
 8003e98:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003e9a:	07db      	lsls	r3, r3, #31
 8003e9c:	d501      	bpl.n	8003ea2 <USB_ReadPMA+0x26>
  {
    temp = *pdwVal;
 8003e9e:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003ea0:	700b      	strb	r3, [r1, #0]
  }
}
 8003ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003ea4:	8812      	ldrh	r2, [r2, #0]
  for (i = n; i != 0U; i--)
 8003ea6:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003ea8:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003eaa:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003eac:	0a12      	lsrs	r2, r2, #8
 8003eae:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8003eb0:	3502      	adds	r5, #2
 8003eb2:	e7ec      	b.n	8003e8e <USB_ReadPMA+0x12>

08003eb4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003eb4:	23af      	movs	r3, #175	; 0xaf
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	58c3      	ldr	r3, [r0, r3]
{
 8003eba:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ec0:	22ae      	movs	r2, #174	; 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003ec2:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003ec8:	00ad      	lsls	r5, r5, #2
 8003eca:	5d60      	ldrb	r0, [r4, r5]
 8003ecc:	28ff      	cmp	r0, #255	; 0xff
 8003ece:	d006      	beq.n	8003ede <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <USBD_CDC_EP0_RxReady+0x30>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	5ca2      	ldrb	r2, [r4, r2]
 8003ed6:	0021      	movs	r1, r4
 8003ed8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003eda:	23ff      	movs	r3, #255	; 0xff
 8003edc:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8003ede:	2000      	movs	r0, #0
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	00000201 	.word	0x00000201

08003ee8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003ee8:	2343      	movs	r3, #67	; 0x43
 8003eea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003eec:	4800      	ldr	r0, [pc, #0]	; (8003ef0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003eee:	4770      	bx	lr
 8003ef0:	20000054 	.word	0x20000054

08003ef4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003ef4:	2343      	movs	r3, #67	; 0x43
 8003ef6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003ef8:	4800      	ldr	r0, [pc, #0]	; (8003efc <USBD_CDC_GetHSCfgDesc+0x8>)
 8003efa:	4770      	bx	lr
 8003efc:	20000098 	.word	0x20000098

08003f00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003f00:	2343      	movs	r3, #67	; 0x43
 8003f02:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003f04:	4800      	ldr	r0, [pc, #0]	; (8003f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003f06:	4770      	bx	lr
 8003f08:	200000e8 	.word	0x200000e8

08003f0c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003f0c:	230a      	movs	r3, #10
 8003f0e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003f10:	4800      	ldr	r0, [pc, #0]	; (8003f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003f12:	4770      	bx	lr
 8003f14:	200000dc 	.word	0x200000dc

08003f18 <USBD_CDC_DataOut>:
{
 8003f18:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f1a:	26ae      	movs	r6, #174	; 0xae
 8003f1c:	00b6      	lsls	r6, r6, #2
{
 8003f1e:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f20:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003f22:	f000 ff73 	bl	8004e0c <USBD_LL_GetRxDataSize>
 8003f26:	2383      	movs	r3, #131	; 0x83
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8003f2c:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 8003f2e:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003f34:	2383      	movs	r3, #131	; 0x83
 8003f36:	2281      	movs	r2, #129	; 0x81
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	18e9      	adds	r1, r5, r3
 8003f3c:	33b0      	adds	r3, #176	; 0xb0
 8003f3e:	58e3      	ldr	r3, [r4, r3]
 8003f40:	0092      	lsls	r2, r2, #2
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	58a8      	ldr	r0, [r5, r2]
 8003f46:	4798      	blx	r3
    return USBD_OK;
 8003f48:	2000      	movs	r0, #0
}
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}

08003f4c <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003f4c:	23ae      	movs	r3, #174	; 0xae
{
 8003f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	58c3      	ldr	r3, [r0, r3]
{
 8003f54:	0006      	movs	r6, r0
 8003f56:	000f      	movs	r7, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003f58:	9301      	str	r3, [sp, #4]
    return USBD_FAIL;
 8003f5a:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <USBD_CDC_DataIn+0x44>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f60:	2514      	movs	r5, #20
 8003f62:	434d      	muls	r5, r1
 8003f64:	1975      	adds	r5, r6, r5
 8003f66:	69e8      	ldr	r0, [r5, #28]
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d012      	beq.n	8003f92 <USBD_CDC_DataIn+0x46>
 8003f6c:	23b0      	movs	r3, #176	; 0xb0
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	58f3      	ldr	r3, [r6, r3]
 8003f72:	014a      	lsls	r2, r1, #5
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f78:	f7fc f960 	bl	800023c <__aeabi_uidivmod>
 8003f7c:	1e0c      	subs	r4, r1, #0
 8003f7e:	d108      	bne.n	8003f92 <USBD_CDC_DataIn+0x46>
      pdev->ep_in[epnum].total_length = 0U;
 8003f80:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f82:	000b      	movs	r3, r1
 8003f84:	000a      	movs	r2, r1
 8003f86:	0030      	movs	r0, r6
 8003f88:	0039      	movs	r1, r7
 8003f8a:	f000 ff1f 	bl	8004dcc <USBD_LL_Transmit>
    return USBD_OK;
 8003f8e:	0020      	movs	r0, r4
}
 8003f90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003f92:	2385      	movs	r3, #133	; 0x85
 8003f94:	2000      	movs	r0, #0
 8003f96:	9a01      	ldr	r2, [sp, #4]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	50d0      	str	r0, [r2, r3]
 8003f9c:	e7f8      	b.n	8003f90 <USBD_CDC_DataIn+0x44>
	...

08003fa0 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fa0:	23ae      	movs	r3, #174	; 0xae
{
 8003fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 8003fa8:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 8003faa:	466a      	mov	r2, sp
{
 8003fac:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 8003fae:	1d59      	adds	r1, r3, #5
 8003fb0:	2300      	movs	r3, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fb2:	2460      	movs	r4, #96	; 0x60
{
 8003fb4:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 8003fb6:	1d90      	adds	r0, r2, #6
  uint8_t ifalt = 0U;
 8003fb8:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8003fba:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fbc:	7833      	ldrb	r3, [r6, #0]
 8003fbe:	401c      	ands	r4, r3
 8003fc0:	d029      	beq.n	8004016 <USBD_CDC_Setup+0x76>
 8003fc2:	2c20      	cmp	r4, #32
 8003fc4:	d142      	bne.n	800404c <USBD_CDC_Setup+0xac>
      if (req->wLength)
 8003fc6:	88f4      	ldrh	r4, [r6, #6]
 8003fc8:	7870      	ldrb	r0, [r6, #1]
 8003fca:	2c00      	cmp	r4, #0
 8003fcc:	d01b      	beq.n	8004006 <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	da0c      	bge.n	8003fee <USBD_CDC_Setup+0x4e>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003fd4:	23af      	movs	r3, #175	; 0xaf
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	58eb      	ldr	r3, [r5, r3]
 8003fda:	0022      	movs	r2, r4
 8003fdc:	0039      	movs	r1, r7
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003fe2:	0039      	movs	r1, r7
 8003fe4:	88f2      	ldrh	r2, [r6, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003fe6:	0028      	movs	r0, r5
 8003fe8:	f000 fc9a 	bl	8004920 <USBD_CtlSendData>
 8003fec:	e009      	b.n	8004002 <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	54f8      	strb	r0, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003ff6:	0022      	movs	r2, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003ff8:	54fc      	strb	r4, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003ffa:	0039      	movs	r1, r7
 8003ffc:	0028      	movs	r0, r5
 8003ffe:	f000 fca5 	bl	800494c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004002:	2000      	movs	r0, #0
}
 8004004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004006:	23af      	movs	r3, #175	; 0xaf
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	58eb      	ldr	r3, [r5, r3]
 800400c:	0022      	movs	r2, r4
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	0031      	movs	r1, r6
 8004012:	4798      	blx	r3
 8004014:	e7f5      	b.n	8004002 <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 8004016:	7877      	ldrb	r7, [r6, #1]
 8004018:	2f0a      	cmp	r7, #10
 800401a:	d00b      	beq.n	8004034 <USBD_CDC_Setup+0x94>
 800401c:	2f0b      	cmp	r7, #11
 800401e:	d010      	beq.n	8004042 <USBD_CDC_Setup+0xa2>
 8004020:	2f00      	cmp	r7, #0
 8004022:	d113      	bne.n	800404c <USBD_CDC_Setup+0xac>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004024:	23a7      	movs	r3, #167	; 0xa7
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	5ceb      	ldrb	r3, [r5, r3]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d10e      	bne.n	800404c <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800402e:	2202      	movs	r2, #2
 8004030:	0001      	movs	r1, r0
 8004032:	e7d8      	b.n	8003fe6 <USBD_CDC_Setup+0x46>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004034:	23a7      	movs	r3, #167	; 0xa7
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	5ceb      	ldrb	r3, [r5, r3]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d106      	bne.n	800404c <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800403e:	2201      	movs	r2, #1
 8004040:	e7d1      	b.n	8003fe6 <USBD_CDC_Setup+0x46>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004042:	23a7      	movs	r3, #167	; 0xa7
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	5ceb      	ldrb	r3, [r5, r3]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d0da      	beq.n	8004002 <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 800404c:	0028      	movs	r0, r5
 800404e:	0031      	movs	r1, r6
 8004050:	f000 fc3f 	bl	80048d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004054:	2002      	movs	r0, #2
          break;
 8004056:	e7d5      	b.n	8004004 <USBD_CDC_Setup+0x64>
 8004058:	00000201 	.word	0x00000201

0800405c <USBD_CDC_DeInit>:
{
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004060:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004062:	2181      	movs	r1, #129	; 0x81
 8004064:	f000 fe60 	bl	8004d28 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004068:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800406a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800406c:	0020      	movs	r0, r4
 800406e:	f000 fe5b 	bl	8004d28 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004072:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 8004074:	26ae      	movs	r6, #174	; 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004076:	33fc      	adds	r3, #252	; 0xfc
 8004078:	671d      	str	r5, [r3, #112]	; 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800407a:	2182      	movs	r1, #130	; 0x82
 800407c:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 800407e:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004080:	f000 fe52 	bl	8004d28 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004084:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004086:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004088:	42ab      	cmp	r3, r5
 800408a:	d008      	beq.n	800409e <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800408c:	23af      	movs	r3, #175	; 0xaf
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	58e3      	ldr	r3, [r4, r3]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004096:	59a0      	ldr	r0, [r4, r6]
 8004098:	f000 fec4 	bl	8004e24 <USBD_static_free>
    pdev->pClassData = NULL;
 800409c:	51a5      	str	r5, [r4, r6]
}
 800409e:	2000      	movs	r0, #0
 80040a0:	bd70      	pop	{r4, r5, r6, pc}

080040a2 <USBD_CDC_Init>:
{
 80040a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a4:	0006      	movs	r6, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040a6:	7c03      	ldrb	r3, [r0, #16]
{
 80040a8:	0004      	movs	r4, r0
 80040aa:	36fc      	adds	r6, #252	; 0xfc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d13b      	bne.n	8004128 <USBD_CDC_Init+0x86>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	2202      	movs	r2, #2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	2181      	movs	r1, #129	; 0x81
 80040b8:	f000 fe24 	bl	8004d04 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040bc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040be:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040c0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040c2:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040c4:	0029      	movs	r1, r5
 80040c6:	2202      	movs	r2, #2
 80040c8:	0020      	movs	r0, r4
 80040ca:	f000 fe1b 	bl	8004d04 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040ce:	6735      	str	r5, [r6, #112]	; 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80040d0:	2308      	movs	r3, #8
 80040d2:	2203      	movs	r2, #3
 80040d4:	2182      	movs	r1, #130	; 0x82
 80040d6:	0020      	movs	r0, r4
 80040d8:	f000 fe14 	bl	8004d04 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80040dc:	2601      	movs	r6, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040de:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80040e0:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040e2:	0080      	lsls	r0, r0, #2
 80040e4:	f000 fe9a 	bl	8004e1c <USBD_static_malloc>
 80040e8:	23ae      	movs	r3, #174	; 0xae
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	0005      	movs	r5, r0
 80040ee:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 80040f0:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	d017      	beq.n	8004126 <USBD_CDC_Init+0x84>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80040f6:	3304      	adds	r3, #4
 80040f8:	58e3      	ldr	r3, [r4, r3]
    hcdc->TxState = 0U;
 80040fa:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4798      	blx	r3
    hcdc->TxState = 0U;
 8004100:	2385      	movs	r3, #133	; 0x85
 8004102:	2281      	movs	r2, #129	; 0x81
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	50ef      	str	r7, [r5, r3]
    hcdc->RxState = 0U;
 8004108:	3304      	adds	r3, #4
 800410a:	50ef      	str	r7, [r5, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800410c:	7c23      	ldrb	r3, [r4, #16]
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	42bb      	cmp	r3, r7
 8004114:	d111      	bne.n	800413a <USBD_CDC_Init+0x98>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	58aa      	ldr	r2, [r5, r2]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	0031      	movs	r1, r6
 800411e:	0020      	movs	r0, r4
 8004120:	f000 fe64 	bl	8004dec <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004124:	9801      	ldr	r0, [sp, #4]
}
 8004126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004128:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800412a:	2340      	movs	r3, #64	; 0x40
 800412c:	2202      	movs	r2, #2
 800412e:	2181      	movs	r1, #129	; 0x81
 8004130:	f000 fde8 	bl	8004d04 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004134:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	e7c4      	b.n	80040c4 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800413a:	2340      	movs	r3, #64	; 0x40
 800413c:	58aa      	ldr	r2, [r5, r2]
 800413e:	0031      	movs	r1, r6
 8004140:	0020      	movs	r0, r4
 8004142:	f000 fe53 	bl	8004dec <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004146:	0038      	movs	r0, r7
 8004148:	e7ed      	b.n	8004126 <USBD_CDC_Init+0x84>

0800414a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 800414a:	2302      	movs	r3, #2

  if (fops != NULL)
 800414c:	2900      	cmp	r1, #0
 800414e:	d003      	beq.n	8004158 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8004150:	23af      	movs	r3, #175	; 0xaf
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 8004156:	2300      	movs	r3, #0
  }

  return ret;
}
 8004158:	0018      	movs	r0, r3
 800415a:	4770      	bx	lr

0800415c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800415c:	23ae      	movs	r3, #174	; 0xae
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8004162:	2082      	movs	r0, #130	; 0x82
 8004164:	0080      	lsls	r0, r0, #2
 8004166:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8004168:	2184      	movs	r1, #132	; 0x84
 800416a:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 800416c:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 800416e:	505a      	str	r2, [r3, r1]
}
 8004170:	4770      	bx	lr

08004172 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004172:	23ae      	movs	r3, #174	; 0xae
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	58c2      	ldr	r2, [r0, r3]
 8004178:	3bb4      	subs	r3, #180	; 0xb4

  return USBD_OK;
}
 800417a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800417c:	50d1      	str	r1, [r2, r3]
}
 800417e:	4770      	bx	lr

08004180 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004180:	23ae      	movs	r3, #174	; 0xae
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	58c2      	ldr	r2, [r0, r3]
{
 8004186:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004188:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 800418a:	2a00      	cmp	r2, #0
 800418c:	d012      	beq.n	80041b4 <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 800418e:	2185      	movs	r1, #133	; 0x85
 8004190:	0089      	lsls	r1, r1, #2
 8004192:	5854      	ldr	r4, [r2, r1]
 8004194:	3b01      	subs	r3, #1
 8004196:	2c00      	cmp	r4, #0
 8004198:	d10c      	bne.n	80041b4 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 800419a:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800419c:	2384      	movs	r3, #132	; 0x84
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041a2:	390c      	subs	r1, #12
 80041a4:	5852      	ldr	r2, [r2, r1]
 80041a6:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80041a8:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041aa:	39ff      	subs	r1, #255	; 0xff
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f000 fe0d 	bl	8004dcc <USBD_LL_Transmit>
      return USBD_OK;
 80041b2:	0023      	movs	r3, r4
  }
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	bd10      	pop	{r4, pc}

080041b8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80041b8:	23ae      	movs	r3, #174	; 0xae
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	58c2      	ldr	r2, [r0, r3]
{
 80041be:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 80041c0:	2402      	movs	r4, #2
  if (pdev->pClassData != NULL)
 80041c2:	2a00      	cmp	r2, #0
 80041c4:	d008      	beq.n	80041d8 <USBD_CDC_ReceivePacket+0x20>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041c6:	7c04      	ldrb	r4, [r0, #16]
 80041c8:	3bb4      	subs	r3, #180	; 0xb4
 80041ca:	58d2      	ldr	r2, [r2, r3]
 80041cc:	2c00      	cmp	r4, #0
 80041ce:	d105      	bne.n	80041dc <USBD_CDC_ReceivePacket+0x24>
      USBD_LL_PrepareReceive(pdev,
 80041d0:	3b04      	subs	r3, #4
 80041d2:	2101      	movs	r1, #1
 80041d4:	f000 fe0a 	bl	8004dec <USBD_LL_PrepareReceive>
  }
}
 80041d8:	0020      	movs	r0, r4
 80041da:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	2101      	movs	r1, #1
 80041e0:	f000 fe04 	bl	8004dec <USBD_LL_PrepareReceive>
    return USBD_OK;
 80041e4:	2400      	movs	r4, #0
 80041e6:	e7f7      	b.n	80041d8 <USBD_CDC_ReceivePacket+0x20>

080041e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80041e8:	b510      	push	{r4, lr}
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80041ea:	2302      	movs	r3, #2
  if (pdev == NULL)
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d013      	beq.n	8004218 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80041f0:	23ad      	movs	r3, #173	; 0xad
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	58c4      	ldr	r4, [r0, r3]
 80041f6:	2c00      	cmp	r4, #0
 80041f8:	d001      	beq.n	80041fe <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 80041fa:	2400      	movs	r4, #0
 80041fc:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80041fe:	2900      	cmp	r1, #0
 8004200:	d002      	beq.n	8004208 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8004202:	23ac      	movs	r3, #172	; 0xac
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004208:	23a7      	movs	r3, #167	; 0xa7
 800420a:	2101      	movs	r1, #1
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8004210:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004212:	f000 fd27 	bl	8004c64 <USBD_LL_Init>

  return USBD_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	0018      	movs	r0, r3
 800421a:	bd10      	pop	{r4, pc}

0800421c <USBD_RegisterClass>:
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800421c:	2302      	movs	r3, #2
  if (pclass != NULL)
 800421e:	2900      	cmp	r1, #0
 8004220:	d003      	beq.n	800422a <USBD_RegisterClass+0xe>
    pdev->pClass = pclass;
 8004222:	23ad      	movs	r3, #173	; 0xad
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8004228:	2300      	movs	r3, #0
  }

  return status;
}
 800422a:	0018      	movs	r0, r3
 800422c:	4770      	bx	lr

0800422e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800422e:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004230:	f000 fd58 	bl	8004ce4 <USBD_LL_Start>

  return USBD_OK;
}
 8004234:	2000      	movs	r0, #0
 8004236:	bd10      	pop	{r4, pc}

08004238 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004238:	23ad      	movs	r3, #173	; 0xad
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	58c3      	ldr	r3, [r0, r3]
{
 800423e:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004244:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004246:	bd10      	pop	{r4, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4798      	blx	r3
 800424c:	2800      	cmp	r0, #0
 800424e:	d0fa      	beq.n	8004246 <USBD_SetClassConfig+0xe>
 8004250:	e7f8      	b.n	8004244 <USBD_SetClassConfig+0xc>

08004252 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004252:	23ad      	movs	r3, #173	; 0xad
{
 8004254:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	58c3      	ldr	r3, [r0, r3]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4798      	blx	r3

  return USBD_OK;
}
 800425e:	2000      	movs	r0, #0
 8004260:	bd10      	pop	{r4, pc}
	...

08004264 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004264:	23aa      	movs	r3, #170	; 0xaa
 8004266:	009b      	lsls	r3, r3, #2
{
 8004268:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800426a:	18c5      	adds	r5, r0, r3
{
 800426c:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800426e:	0028      	movs	r0, r5
 8004270:	f000 fb1b 	bl	80048aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004274:	23a5      	movs	r3, #165	; 0xa5
 8004276:	2201      	movs	r2, #1
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <USBD_LL_SetupStage+0x60>)
 800427e:	5ae2      	ldrh	r2, [r4, r3]
 8004280:	3b16      	subs	r3, #22
 8004282:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8004284:	3310      	adds	r3, #16
 8004286:	5ce1      	ldrb	r1, [r4, r3]
 8004288:	231f      	movs	r3, #31
 800428a:	400b      	ands	r3, r1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d00f      	beq.n	80042b0 <USBD_LL_SetupStage+0x4c>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <USBD_LL_SetupStage+0x40>
 8004294:	2b02      	cmp	r3, #2
 8004296:	d010      	beq.n	80042ba <USBD_LL_SetupStage+0x56>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004298:	237f      	movs	r3, #127	; 0x7f
 800429a:	0020      	movs	r0, r4
 800429c:	4399      	bics	r1, r3
 800429e:	f000 fd53 	bl	8004d48 <USBD_LL_StallEP>
      break;
 80042a2:	e003      	b.n	80042ac <USBD_LL_SetupStage+0x48>
      USBD_StdDevReq(pdev, &pdev->request);
 80042a4:	0029      	movs	r1, r5
 80042a6:	0020      	movs	r0, r4
 80042a8:	f000 f914 	bl	80044d4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80042ac:	2000      	movs	r0, #0
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80042b0:	0029      	movs	r1, r5
 80042b2:	0020      	movs	r0, r4
 80042b4:	f000 fa3c 	bl	8004730 <USBD_StdItfReq>
      break;
 80042b8:	e7f8      	b.n	80042ac <USBD_LL_SetupStage+0x48>
      USBD_StdEPReq(pdev, &pdev->request);
 80042ba:	0029      	movs	r1, r5
 80042bc:	0020      	movs	r0, r4
 80042be:	f000 fa61 	bl	8004784 <USBD_StdEPReq>
      break;
 80042c2:	e7f3      	b.n	80042ac <USBD_LL_SetupStage+0x48>
 80042c4:	000002ae 	.word	0x000002ae

080042c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	0004      	movs	r4, r0
 80042cc:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80042ce:	2900      	cmp	r1, #0
 80042d0:	d130      	bne.n	8004334 <USBD_LL_DataOutStage+0x6c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80042d2:	23a5      	movs	r3, #165	; 0xa5
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	58c2      	ldr	r2, [r0, r3]
 80042d8:	2a03      	cmp	r2, #3
 80042da:	d123      	bne.n	8004324 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 80042dc:	0002      	movs	r2, r0
 80042de:	3255      	adds	r2, #85	; 0x55
 80042e0:	32ff      	adds	r2, #255	; 0xff
 80042e2:	68d3      	ldr	r3, [r2, #12]
 80042e4:	6910      	ldr	r0, [r2, #16]
 80042e6:	4283      	cmp	r3, r0
 80042e8:	d90b      	bls.n	8004302 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 80042ea:	1a1b      	subs	r3, r3, r0
 80042ec:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 80042ee:	b282      	uxth	r2, r0
 80042f0:	4298      	cmp	r0, r3
 80042f2:	d900      	bls.n	80042f6 <USBD_LL_DataOutStage+0x2e>
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	0029      	movs	r1, r5
 80042f8:	0020      	movs	r0, r4
 80042fa:	f000 fb37 	bl	800496c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80042fe:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8004300:	e016      	b.n	8004330 <USBD_LL_DataOutStage+0x68>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004302:	23ad      	movs	r3, #173	; 0xad
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	58e3      	ldr	r3, [r4, r3]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800430e:	22a7      	movs	r2, #167	; 0xa7
 8004310:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004312:	5ca2      	ldrb	r2, [r4, r2]
 8004314:	2a03      	cmp	r2, #3
 8004316:	d101      	bne.n	800431c <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8004318:	0020      	movs	r0, r4
 800431a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800431c:	0020      	movs	r0, r4
 800431e:	f000 fb2d 	bl	800497c <USBD_CtlSendStatus>
 8004322:	e7ec      	b.n	80042fe <USBD_LL_DataOutStage+0x36>
  return USBD_OK;
 8004324:	000d      	movs	r5, r1
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004326:	2a05      	cmp	r2, #5
 8004328:	d102      	bne.n	8004330 <USBD_LL_DataOutStage+0x68>
        pdev->ep0_state = USBD_EP0_IDLE;
 800432a:	50e1      	str	r1, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 800432c:	f000 fd0c 	bl	8004d48 <USBD_LL_StallEP>
}
 8004330:	0028      	movs	r0, r5
 8004332:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8004334:	23ad      	movs	r3, #173	; 0xad
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800433a:	2502      	movs	r5, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f6      	beq.n	8004330 <USBD_LL_DataOutStage+0x68>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004342:	22a7      	movs	r2, #167	; 0xa7
 8004344:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8004346:	5c82      	ldrb	r2, [r0, r2]
 8004348:	2a03      	cmp	r2, #3
 800434a:	d1f1      	bne.n	8004330 <USBD_LL_DataOutStage+0x68>
    pdev->pClass->DataOut(pdev, epnum);
 800434c:	4798      	blx	r3
 800434e:	e7d6      	b.n	80042fe <USBD_LL_DataOutStage+0x36>

08004350 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	000d      	movs	r5, r1
 8004354:	0004      	movs	r4, r0
 8004356:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004358:	2d00      	cmp	r5, #0
 800435a:	d14b      	bne.n	80043f4 <USBD_LL_DataInStage+0xa4>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800435c:	23a5      	movs	r3, #165	; 0xa5
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	58c3      	ldr	r3, [r0, r3]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d13f      	bne.n	80043e6 <USBD_LL_DataInStage+0x96>
    {
      if (pep->rem_length > pep->maxpacket)
 8004366:	6a02      	ldr	r2, [r0, #32]
 8004368:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800436a:	42b2      	cmp	r2, r6
 800436c:	d912      	bls.n	8004394 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800436e:	1b92      	subs	r2, r2, r6
 8004370:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004372:	b292      	uxth	r2, r2
 8004374:	f000 fae2 	bl	800493c <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004378:	002b      	movs	r3, r5
 800437a:	002a      	movs	r2, r5
 800437c:	0029      	movs	r1, r5
 800437e:	0020      	movs	r0, r4
 8004380:	f000 fd34 	bl	8004dec <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004384:	23a8      	movs	r3, #168	; 0xa8
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	5ce2      	ldrb	r2, [r4, r3]
 800438a:	2000      	movs	r0, #0
 800438c:	2a01      	cmp	r2, #1
 800438e:	d100      	bne.n	8004392 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004390:	54e0      	strb	r0, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004394:	69c7      	ldr	r7, [r0, #28]
 8004396:	0031      	movs	r1, r6
 8004398:	0038      	movs	r0, r7
 800439a:	f7fb ff4f 	bl	800023c <__aeabi_uidivmod>
 800439e:	1e0d      	subs	r5, r1, #0
 80043a0:	d10c      	bne.n	80043bc <USBD_LL_DataInStage+0x6c>
 80043a2:	42be      	cmp	r6, r7
 80043a4:	d80a      	bhi.n	80043bc <USBD_LL_DataInStage+0x6c>
            (pep->total_length < pdev->ep0_data_len))
 80043a6:	26a6      	movs	r6, #166	; 0xa6
 80043a8:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 80043aa:	59a3      	ldr	r3, [r4, r6]
 80043ac:	429f      	cmp	r7, r3
 80043ae:	d205      	bcs.n	80043bc <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80043b0:	000a      	movs	r2, r1
 80043b2:	0020      	movs	r0, r4
 80043b4:	f000 fac2 	bl	800493c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80043b8:	51a5      	str	r5, [r4, r6]
 80043ba:	e7dd      	b.n	8004378 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80043bc:	23ad      	movs	r3, #173	; 0xad
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	58e3      	ldr	r3, [r4, r3]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d006      	beq.n	80043d6 <USBD_LL_DataInStage+0x86>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043c8:	22a7      	movs	r2, #167	; 0xa7
 80043ca:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80043cc:	5ca2      	ldrb	r2, [r4, r2]
 80043ce:	2a03      	cmp	r2, #3
 80043d0:	d101      	bne.n	80043d6 <USBD_LL_DataInStage+0x86>
            pdev->pClass->EP0_TxSent(pdev);
 80043d2:	0020      	movs	r0, r4
 80043d4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	0020      	movs	r0, r4
 80043da:	f000 fcb5 	bl	8004d48 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80043de:	0020      	movs	r0, r4
 80043e0:	f000 fad8 	bl	8004994 <USBD_CtlReceiveStatus>
 80043e4:	e7ce      	b.n	8004384 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80043e6:	2204      	movs	r2, #4
 80043e8:	4393      	bics	r3, r2
 80043ea:	d1cb      	bne.n	8004384 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	f000 fcab 	bl	8004d48 <USBD_LL_StallEP>
 80043f2:	e7c7      	b.n	8004384 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80043f4:	23ad      	movs	r3, #173	; 0xad
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80043fa:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0c7      	beq.n	8004392 <USBD_LL_DataInStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004402:	22a7      	movs	r2, #167	; 0xa7
 8004404:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8004406:	5ca2      	ldrb	r2, [r4, r2]
 8004408:	2a03      	cmp	r2, #3
 800440a:	d1c2      	bne.n	8004392 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 800440c:	0029      	movs	r1, r5
 800440e:	0020      	movs	r0, r4
 8004410:	4798      	blx	r3
  return USBD_OK;
 8004412:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004414:	e7bd      	b.n	8004392 <USBD_LL_DataInStage+0x42>

08004416 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004416:	2200      	movs	r2, #0
{
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800441c:	0011      	movs	r1, r2
 800441e:	2340      	movs	r3, #64	; 0x40
 8004420:	f000 fc70 	bl	8004d04 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004424:	0023      	movs	r3, r4
 8004426:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004428:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800442a:	33fc      	adds	r3, #252	; 0xfc
 800442c:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800442e:	669e      	str	r6, [r3, #104]	; 0x68

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	0033      	movs	r3, r6
 8004434:	2200      	movs	r2, #0
 8004436:	0020      	movs	r0, r4
 8004438:	f000 fc64 	bl	8004d04 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800443c:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 800443e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004440:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004442:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004444:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004446:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004448:	3b08      	subs	r3, #8
 800444a:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 800444c:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 800444e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004450:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8004452:	3314      	adds	r3, #20
 8004454:	58e3      	ldr	r3, [r4, r3]
 8004456:	428b      	cmp	r3, r1
 8004458:	d005      	beq.n	8004466 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800445a:	23ad      	movs	r3, #173	; 0xad
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	58e3      	ldr	r3, [r4, r3]
 8004460:	0020      	movs	r0, r4
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004466:	2000      	movs	r0, #0
 8004468:	bd70      	pop	{r4, r5, r6, pc}

0800446a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800446a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800446c:	2000      	movs	r0, #0
 800446e:	4770      	bx	lr

08004470 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004470:	23a7      	movs	r3, #167	; 0xa7
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	5cc1      	ldrb	r1, [r0, r3]
 8004476:	4a03      	ldr	r2, [pc, #12]	; (8004484 <USBD_LL_Suspend+0x14>)
 8004478:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800447a:	2204      	movs	r2, #4
 800447c:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800447e:	2000      	movs	r0, #0
 8004480:	4770      	bx	lr
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	0000029d 	.word	0x0000029d

08004488 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004488:	23a7      	movs	r3, #167	; 0xa7
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	5cc2      	ldrb	r2, [r0, r3]
 800448e:	2a04      	cmp	r2, #4
 8004490:	d102      	bne.n	8004498 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004492:	4a02      	ldr	r2, [pc, #8]	; (800449c <USBD_LL_Resume+0x14>)
 8004494:	5c82      	ldrb	r2, [r0, r2]
 8004496:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8004498:	2000      	movs	r0, #0
 800449a:	4770      	bx	lr
 800449c:	0000029d 	.word	0x0000029d

080044a0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044a0:	23a7      	movs	r3, #167	; 0xa7
{
 80044a2:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	5cc3      	ldrb	r3, [r0, r3]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d106      	bne.n	80044ba <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 80044ac:	23ad      	movs	r3, #173	; 0xad
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	58c3      	ldr	r3, [r0, r3]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d000      	beq.n	80044ba <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 80044b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80044ba:	2000      	movs	r0, #0
 80044bc:	bd10      	pop	{r4, pc}

080044be <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80044be:	b510      	push	{r4, lr}
 80044c0:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	f000 fc40 	bl	8004d48 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80044c8:	2100      	movs	r1, #0
 80044ca:	0020      	movs	r0, r4
 80044cc:	f000 fc3c 	bl	8004d48 <USBD_LL_StallEP>
}
 80044d0:	bd10      	pop	{r4, pc}
	...

080044d4 <USBD_StdDevReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044d4:	2260      	movs	r2, #96	; 0x60
 80044d6:	780b      	ldrb	r3, [r1, #0]
{
 80044d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044da:	4013      	ands	r3, r2
{
 80044dc:	0004      	movs	r4, r0
 80044de:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d014      	beq.n	800450e <USBD_StdDevReq+0x3a>
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d012      	beq.n	800450e <USBD_StdDevReq+0x3a>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d000      	beq.n	80044ee <USBD_StdDevReq+0x1a>
 80044ec:	e090      	b.n	8004610 <USBD_StdDevReq+0x13c>
      switch (req->bRequest)
 80044ee:	7848      	ldrb	r0, [r1, #1]
 80044f0:	2809      	cmp	r0, #9
 80044f2:	d900      	bls.n	80044f6 <USBD_StdDevReq+0x22>
 80044f4:	e08c      	b.n	8004610 <USBD_StdDevReq+0x13c>
 80044f6:	f7fb fe11 	bl	800011c <__gnu_thumb1_case_uhi>
 80044fa:	00e9      	.short	0x00e9
 80044fc:	008b0107 	.word	0x008b0107
 8004500:	008b00ff 	.word	0x008b00ff
 8004504:	0013007d 	.word	0x0013007d
 8004508:	00d3008b 	.word	0x00d3008b
 800450c:	009e      	.short	0x009e
      pdev->pClass->Setup(pdev, req);
 800450e:	23ad      	movs	r3, #173	; 0xad
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	58e3      	ldr	r3, [r4, r3]
 8004514:	0029      	movs	r1, r5
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	0020      	movs	r0, r4
 800451a:	4798      	blx	r3
}
 800451c:	2000      	movs	r0, #0
 800451e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 8004520:	466b      	mov	r3, sp
 8004522:	1d9e      	adds	r6, r3, #6
 8004524:	2300      	movs	r3, #0
 8004526:	8033      	strh	r3, [r6, #0]
  switch (req->wValue >> 8)
 8004528:	884b      	ldrh	r3, [r1, #2]
 800452a:	0a18      	lsrs	r0, r3, #8
 800452c:	3801      	subs	r0, #1
 800452e:	2806      	cmp	r0, #6
 8004530:	d86e      	bhi.n	8004610 <USBD_StdDevReq+0x13c>
 8004532:	f7fb fde9 	bl	8000108 <__gnu_thumb1_case_uqi>
 8004536:	2204      	.short	0x2204
 8004538:	4a6d6d30 	.word	0x4a6d6d30
 800453c:	54          	.byte	0x54
 800453d:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800453e:	23ac      	movs	r3, #172	; 0xac
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	58e3      	ldr	r3, [r4, r3]
 8004544:	7c20      	ldrb	r0, [r4, #16]
 8004546:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004548:	0031      	movs	r1, r6
 800454a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800454c:	8831      	ldrh	r1, [r6, #0]
 800454e:	2900      	cmp	r1, #0
 8004550:	d00c      	beq.n	800456c <USBD_StdDevReq+0x98>
 8004552:	88ea      	ldrh	r2, [r5, #6]
 8004554:	2a00      	cmp	r2, #0
 8004556:	d009      	beq.n	800456c <USBD_StdDevReq+0x98>
      len = MIN(len, req->wLength);
 8004558:	1c0b      	adds	r3, r1, #0
 800455a:	4291      	cmp	r1, r2
 800455c:	d900      	bls.n	8004560 <USBD_StdDevReq+0x8c>
 800455e:	1c13      	adds	r3, r2, #0
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004560:	0001      	movs	r1, r0
      len = MIN(len, req->wLength);
 8004562:	b29a      	uxth	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004564:	0020      	movs	r0, r4
      len = MIN(len, req->wLength);
 8004566:	8033      	strh	r3, [r6, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004568:	f000 f9da 	bl	8004920 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800456c:	88eb      	ldrh	r3, [r5, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1d4      	bne.n	800451c <USBD_StdDevReq+0x48>
        USBD_CtlSendStatus(pdev);
 8004572:	0020      	movs	r0, r4
 8004574:	f000 fa02 	bl	800497c <USBD_CtlSendStatus>
 8004578:	e7d0      	b.n	800451c <USBD_StdDevReq+0x48>
 800457a:	23ad      	movs	r3, #173	; 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800457c:	7c22      	ldrb	r2, [r4, #16]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	58e3      	ldr	r3, [r4, r3]
 8004582:	2a00      	cmp	r2, #0
 8004584:	d105      	bne.n	8004592 <USBD_StdDevReq+0xbe>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004588:	0030      	movs	r0, r6
 800458a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800458c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800458e:	7043      	strb	r3, [r0, #1]
 8004590:	e7dc      	b.n	800454c <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	e7f8      	b.n	8004588 <USBD_StdDevReq+0xb4>
      switch ((uint8_t)(req->wValue))
 8004596:	b2d8      	uxtb	r0, r3
 8004598:	2805      	cmp	r0, #5
 800459a:	d839      	bhi.n	8004610 <USBD_StdDevReq+0x13c>
 800459c:	23ac      	movs	r3, #172	; 0xac
 800459e:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80045a0:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 80045a2:	f7fb fdb1 	bl	8000108 <__gnu_thumb1_case_uqi>
 80045a6:	0803      	.short	0x0803
 80045a8:	100e0c0a 	.word	0x100e0c0a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d02e      	beq.n	8004610 <USBD_StdDevReq+0x13c>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80045b2:	7c20      	ldrb	r0, [r4, #16]
 80045b4:	e7c8      	b.n	8004548 <USBD_StdDevReq+0x74>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	e7f9      	b.n	80045ae <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	e7f7      	b.n	80045ae <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	e7f5      	b.n	80045ae <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	e7f3      	b.n	80045ae <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	e7f1      	b.n	80045ae <USBD_StdDevReq+0xda>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045ca:	7c23      	ldrb	r3, [r4, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11f      	bne.n	8004610 <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80045d0:	23ad      	movs	r3, #173	; 0xad
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	58e3      	ldr	r3, [r4, r3]
 80045d6:	0030      	movs	r0, r6
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	4798      	blx	r3
 80045dc:	e7b6      	b.n	800454c <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045de:	7c23      	ldrb	r3, [r4, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d115      	bne.n	8004610 <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80045e4:	23ad      	movs	r3, #173	; 0xad
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	58e3      	ldr	r3, [r4, r3]
 80045ea:	0030      	movs	r0, r6
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80045f0:	2307      	movs	r3, #7
 80045f2:	e7cc      	b.n	800458e <USBD_StdDevReq+0xba>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80045f4:	888b      	ldrh	r3, [r1, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <USBD_StdDevReq+0x13c>
 80045fa:	88cb      	ldrh	r3, [r1, #6]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <USBD_StdDevReq+0x13c>
 8004600:	884e      	ldrh	r6, [r1, #2]
 8004602:	2e7f      	cmp	r6, #127	; 0x7f
 8004604:	d804      	bhi.n	8004610 <USBD_StdDevReq+0x13c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004606:	25a7      	movs	r5, #167	; 0xa7
 8004608:	00ad      	lsls	r5, r5, #2
 800460a:	5d63      	ldrb	r3, [r4, r5]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d103      	bne.n	8004618 <USBD_StdDevReq+0x144>
        USBD_CtlError(pdev, req);
 8004610:	0020      	movs	r0, r4
 8004612:	f7ff ff54 	bl	80044be <USBD_CtlError.constprop.1>
 8004616:	e781      	b.n	800451c <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8004618:	4b43      	ldr	r3, [pc, #268]	; (8004728 <USBD_StdDevReq+0x254>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800461a:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800461c:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800461e:	0020      	movs	r0, r4
 8004620:	f000 fbc4 	bl	8004dac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004624:	0020      	movs	r0, r4
 8004626:	f000 f9a9 	bl	800497c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800462a:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 800462c:	2e00      	cmp	r6, #0
 800462e:	d100      	bne.n	8004632 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004630:	2301      	movs	r3, #1
 8004632:	5563      	strb	r3, [r4, r5]
 8004634:	e772      	b.n	800451c <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8004636:	7889      	ldrb	r1, [r1, #2]
 8004638:	4d3c      	ldr	r5, [pc, #240]	; (800472c <USBD_StdDevReq+0x258>)
 800463a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800463c:	2901      	cmp	r1, #1
 800463e:	d8e7      	bhi.n	8004610 <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 8004640:	23a7      	movs	r3, #167	; 0xa7
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	5ce2      	ldrb	r2, [r4, r3]
 8004646:	2a02      	cmp	r2, #2
 8004648:	d009      	beq.n	800465e <USBD_StdDevReq+0x18a>
 800464a:	2a03      	cmp	r2, #3
 800464c:	d014      	beq.n	8004678 <USBD_StdDevReq+0x1a4>
        USBD_CtlError(pdev, req);
 800464e:	0020      	movs	r0, r4
 8004650:	f7ff ff35 	bl	80044be <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004654:	7829      	ldrb	r1, [r5, #0]
 8004656:	0020      	movs	r0, r4
 8004658:	f7ff fdfb 	bl	8004252 <USBD_ClrClassConfig>
 800465c:	e75e      	b.n	800451c <USBD_StdDevReq+0x48>
        if (cfgidx)
 800465e:	2900      	cmp	r1, #0
 8004660:	d087      	beq.n	8004572 <USBD_StdDevReq+0x9e>
          pdev->dev_config = cfgidx;
 8004662:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004664:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8004666:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004668:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800466a:	0020      	movs	r0, r4
 800466c:	f7ff fde4 	bl	8004238 <USBD_SetClassConfig>
 8004670:	2802      	cmp	r0, #2
 8004672:	d000      	beq.n	8004676 <USBD_StdDevReq+0x1a2>
 8004674:	e77d      	b.n	8004572 <USBD_StdDevReq+0x9e>
 8004676:	e7cb      	b.n	8004610 <USBD_StdDevReq+0x13c>
        if (cfgidx == 0U)
 8004678:	2900      	cmp	r1, #0
 800467a:	d106      	bne.n	800468a <USBD_StdDevReq+0x1b6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800467c:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 800467e:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004680:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8004682:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004684:	f7ff fde5 	bl	8004252 <USBD_ClrClassConfig>
 8004688:	e773      	b.n	8004572 <USBD_StdDevReq+0x9e>
        else if (cfgidx != pdev->dev_config)
 800468a:	6861      	ldr	r1, [r4, #4]
 800468c:	2901      	cmp	r1, #1
 800468e:	d100      	bne.n	8004692 <USBD_StdDevReq+0x1be>
 8004690:	e76f      	b.n	8004572 <USBD_StdDevReq+0x9e>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004692:	b2c9      	uxtb	r1, r1
 8004694:	0020      	movs	r0, r4
 8004696:	f7ff fddc 	bl	8004252 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800469a:	7829      	ldrb	r1, [r5, #0]
 800469c:	6061      	str	r1, [r4, #4]
 800469e:	e7e4      	b.n	800466a <USBD_StdDevReq+0x196>
  if (req->wLength != 1U)
 80046a0:	88ca      	ldrh	r2, [r1, #6]
 80046a2:	2a01      	cmp	r2, #1
 80046a4:	d1b4      	bne.n	8004610 <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 80046a6:	23a7      	movs	r3, #167	; 0xa7
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	5ce3      	ldrb	r3, [r4, r3]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0af      	beq.n	8004610 <USBD_StdDevReq+0x13c>
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d906      	bls.n	80046c2 <USBD_StdDevReq+0x1ee>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80046b4:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d1aa      	bne.n	8004610 <USBD_StdDevReq+0x13c>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80046ba:	0020      	movs	r0, r4
 80046bc:	f000 f930 	bl	8004920 <USBD_CtlSendData>
 80046c0:	e72c      	b.n	800451c <USBD_StdDevReq+0x48>
        pdev->dev_default_config = 0U;
 80046c2:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80046c4:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 80046c6:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80046c8:	3108      	adds	r1, #8
 80046ca:	e7f6      	b.n	80046ba <USBD_StdDevReq+0x1e6>
  switch (pdev->dev_state)
 80046cc:	23a7      	movs	r3, #167	; 0xa7
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	5ce3      	ldrb	r3, [r4, r3]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d89b      	bhi.n	8004610 <USBD_StdDevReq+0x13c>
      if (req->wLength != 0x2U)
 80046d8:	88cb      	ldrh	r3, [r1, #6]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d198      	bne.n	8004610 <USBD_StdDevReq+0x13c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80046de:	3b01      	subs	r3, #1
 80046e0:	60e3      	str	r3, [r4, #12]
      if (pdev->dev_remote_wakeup)
 80046e2:	23a9      	movs	r3, #169	; 0xa9
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	58e3      	ldr	r3, [r4, r3]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <USBD_StdDevReq+0x21c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80046ec:	2303      	movs	r3, #3
 80046ee:	60e3      	str	r3, [r4, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80046f0:	0021      	movs	r1, r4
 80046f2:	2202      	movs	r2, #2
 80046f4:	310c      	adds	r1, #12
 80046f6:	e7e0      	b.n	80046ba <USBD_StdDevReq+0x1e6>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80046f8:	884b      	ldrh	r3, [r1, #2]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d000      	beq.n	8004700 <USBD_StdDevReq+0x22c>
 80046fe:	e70d      	b.n	800451c <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8004700:	22a9      	movs	r2, #169	; 0xa9
 8004702:	0092      	lsls	r2, r2, #2
 8004704:	50a3      	str	r3, [r4, r2]
 8004706:	e734      	b.n	8004572 <USBD_StdDevReq+0x9e>
  switch (pdev->dev_state)
 8004708:	23a7      	movs	r3, #167	; 0xa7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	5ce3      	ldrb	r3, [r4, r3]
 800470e:	3b01      	subs	r3, #1
 8004710:	2b02      	cmp	r3, #2
 8004712:	d900      	bls.n	8004716 <USBD_StdDevReq+0x242>
 8004714:	e77c      	b.n	8004610 <USBD_StdDevReq+0x13c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004716:	884b      	ldrh	r3, [r1, #2]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d000      	beq.n	800471e <USBD_StdDevReq+0x24a>
 800471c:	e6fe      	b.n	800451c <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 800471e:	23a9      	movs	r3, #169	; 0xa9
 8004720:	2200      	movs	r2, #0
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	50e2      	str	r2, [r4, r3]
 8004726:	e724      	b.n	8004572 <USBD_StdDevReq+0x9e>
 8004728:	0000029e 	.word	0x0000029e
 800472c:	2000069a 	.word	0x2000069a

08004730 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004730:	2260      	movs	r2, #96	; 0x60
 8004732:	780b      	ldrb	r3, [r1, #0]
{
 8004734:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004736:	4013      	ands	r3, r2
{
 8004738:	0004      	movs	r4, r0
 800473a:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800473c:	2b20      	cmp	r3, #32
 800473e:	d003      	beq.n	8004748 <USBD_StdItfReq+0x18>
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d001      	beq.n	8004748 <USBD_StdItfReq+0x18>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d119      	bne.n	800477c <USBD_StdItfReq+0x4c>
      switch (pdev->dev_state)
 8004748:	23a7      	movs	r3, #167	; 0xa7
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	5ce3      	ldrb	r3, [r4, r3]
 800474e:	3b01      	subs	r3, #1
 8004750:	2b02      	cmp	r3, #2
 8004752:	d813      	bhi.n	800477c <USBD_StdItfReq+0x4c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004754:	792b      	ldrb	r3, [r5, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d810      	bhi.n	800477c <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800475a:	23ad      	movs	r3, #173	; 0xad
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	58e3      	ldr	r3, [r4, r3]
 8004760:	0029      	movs	r1, r5
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	0020      	movs	r0, r4
 8004766:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004768:	88eb      	ldrh	r3, [r5, #6]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <USBD_StdItfReq+0x48>
 800476e:	2800      	cmp	r0, #0
 8004770:	d102      	bne.n	8004778 <USBD_StdItfReq+0x48>
              USBD_CtlSendStatus(pdev);
 8004772:	0020      	movs	r0, r4
 8004774:	f000 f902 	bl	800497c <USBD_CtlSendStatus>
}
 8004778:	2000      	movs	r0, #0
 800477a:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 800477c:	0020      	movs	r0, r4
 800477e:	f7ff fe9e 	bl	80044be <USBD_CtlError.constprop.1>
          break;
 8004782:	e7f9      	b.n	8004778 <USBD_StdItfReq+0x48>

08004784 <USBD_StdEPReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004784:	780a      	ldrb	r2, [r1, #0]
{
 8004786:	000b      	movs	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004788:	2160      	movs	r1, #96	; 0x60
{
 800478a:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800478c:	400a      	ands	r2, r1
{
 800478e:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004790:	2a20      	cmp	r2, #32
 8004792:	d017      	beq.n	80047c4 <USBD_StdEPReq+0x40>
 8004794:	2a40      	cmp	r2, #64	; 0x40
 8004796:	d015      	beq.n	80047c4 <USBD_StdEPReq+0x40>
 8004798:	2a00      	cmp	r2, #0
 800479a:	d10f      	bne.n	80047bc <USBD_StdEPReq+0x38>
  ep_addr  = LOBYTE(req->wIndex);
 800479c:	8898      	ldrh	r0, [r3, #4]
      switch (req->bRequest)
 800479e:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80047a0:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 80047a2:	2a01      	cmp	r2, #1
 80047a4:	d026      	beq.n	80047f4 <USBD_StdEPReq+0x70>
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	d03e      	beq.n	8004828 <USBD_StdEPReq+0xa4>
 80047aa:	2a03      	cmp	r2, #3
 80047ac:	d106      	bne.n	80047bc <USBD_StdEPReq+0x38>
          switch (pdev->dev_state)
 80047ae:	22a7      	movs	r2, #167	; 0xa7
 80047b0:	0092      	lsls	r2, r2, #2
 80047b2:	5ca2      	ldrb	r2, [r4, r2]
 80047b4:	2a02      	cmp	r2, #2
 80047b6:	d02d      	beq.n	8004814 <USBD_StdEPReq+0x90>
 80047b8:	2a03      	cmp	r2, #3
 80047ba:	d00c      	beq.n	80047d6 <USBD_StdEPReq+0x52>
              USBD_CtlError(pdev, req);
 80047bc:	0020      	movs	r0, r4
 80047be:	f7ff fe7e 	bl	80044be <USBD_CtlError.constprop.1>
              break;
 80047c2:	e006      	b.n	80047d2 <USBD_StdEPReq+0x4e>
      pdev->pClass->Setup(pdev, req);
 80047c4:	22ad      	movs	r2, #173	; 0xad
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	58a2      	ldr	r2, [r4, r2]
 80047ca:	0019      	movs	r1, r3
 80047cc:	6892      	ldr	r2, [r2, #8]
 80047ce:	0020      	movs	r0, r4
 80047d0:	4790      	blx	r2
}
 80047d2:	2000      	movs	r0, #0
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80047d6:	885a      	ldrh	r2, [r3, #2]
 80047d8:	2a00      	cmp	r2, #0
 80047da:	d107      	bne.n	80047ec <USBD_StdEPReq+0x68>
                if ((ep_addr != 0x00U) &&
 80047dc:	064a      	lsls	r2, r1, #25
 80047de:	d005      	beq.n	80047ec <USBD_StdEPReq+0x68>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80047e0:	88db      	ldrh	r3, [r3, #6]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <USBD_StdEPReq+0x68>
                  USBD_LL_StallEP(pdev, ep_addr);
 80047e6:	0020      	movs	r0, r4
 80047e8:	f000 faae 	bl	8004d48 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80047ec:	0020      	movs	r0, r4
 80047ee:	f000 f8c5 	bl	800497c <USBD_CtlSendStatus>
              break;
 80047f2:	e7ee      	b.n	80047d2 <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 80047f4:	22a7      	movs	r2, #167	; 0xa7
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	5ca2      	ldrb	r2, [r4, r2]
 80047fa:	2a02      	cmp	r2, #2
 80047fc:	d00a      	beq.n	8004814 <USBD_StdEPReq+0x90>
 80047fe:	2a03      	cmp	r2, #3
 8004800:	d1dc      	bne.n	80047bc <USBD_StdEPReq+0x38>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004802:	885b      	ldrh	r3, [r3, #2]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e4      	bne.n	80047d2 <USBD_StdEPReq+0x4e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004808:	064b      	lsls	r3, r1, #25
 800480a:	d0ef      	beq.n	80047ec <USBD_StdEPReq+0x68>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800480c:	0020      	movs	r0, r4
 800480e:	f000 faab 	bl	8004d68 <USBD_LL_ClearStallEP>
 8004812:	e7eb      	b.n	80047ec <USBD_StdEPReq+0x68>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004814:	064b      	lsls	r3, r1, #25
 8004816:	d0d1      	beq.n	80047bc <USBD_StdEPReq+0x38>
                USBD_LL_StallEP(pdev, ep_addr);
 8004818:	0020      	movs	r0, r4
 800481a:	f000 fa95 	bl	8004d48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	0020      	movs	r0, r4
 8004822:	f000 fa91 	bl	8004d48 <USBD_LL_StallEP>
 8004826:	e7d4      	b.n	80047d2 <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 8004828:	23a7      	movs	r3, #167	; 0xa7
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	5ce3      	ldrb	r3, [r4, r3]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d017      	beq.n	8004862 <USBD_StdEPReq+0xde>
 8004832:	2b03      	cmp	r3, #3
 8004834:	d1c2      	bne.n	80047bc <USBD_StdEPReq+0x38>
 8004836:	220f      	movs	r2, #15
 8004838:	2314      	movs	r3, #20
 800483a:	400a      	ands	r2, r1
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800483c:	435a      	muls	r2, r3
 800483e:	18a2      	adds	r2, r4, r2
              if ((ep_addr & 0x80U) == 0x80U)
 8004840:	0600      	lsls	r0, r0, #24
 8004842:	d51e      	bpl.n	8004882 <USBD_StdEPReq+0xfe>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004844:	6992      	ldr	r2, [r2, #24]
 8004846:	2a00      	cmp	r2, #0
 8004848:	d0b8      	beq.n	80047bc <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800484a:	257f      	movs	r5, #127	; 0x7f
 800484c:	400d      	ands	r5, r1
 800484e:	3501      	adds	r5, #1
 8004850:	435d      	muls	r5, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004852:	237f      	movs	r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004854:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004856:	400b      	ands	r3, r1
 8004858:	d11e      	bne.n	8004898 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 800485a:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800485c:	2202      	movs	r2, #2
 800485e:	0029      	movs	r1, r5
 8004860:	e00b      	b.n	800487a <USBD_StdEPReq+0xf6>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004862:	064b      	lsls	r3, r1, #25
 8004864:	d1aa      	bne.n	80047bc <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004866:	0021      	movs	r1, r4
 8004868:	3155      	adds	r1, #85	; 0x55
 800486a:	31ff      	adds	r1, #255	; 0xff
 800486c:	0603      	lsls	r3, r0, #24
 800486e:	d501      	bpl.n	8004874 <USBD_StdEPReq+0xf0>
 8004870:	3941      	subs	r1, #65	; 0x41
 8004872:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8004874:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004876:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8004878:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800487a:	0020      	movs	r0, r4
 800487c:	f000 f850 	bl	8004920 <USBD_CtlSendData>
              break;
 8004880:	e7a7      	b.n	80047d2 <USBD_StdEPReq+0x4e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004882:	32fc      	adds	r2, #252	; 0xfc
 8004884:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004886:	2a00      	cmp	r2, #0
 8004888:	d100      	bne.n	800488c <USBD_StdEPReq+0x108>
 800488a:	e797      	b.n	80047bc <USBD_StdEPReq+0x38>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800488c:	257f      	movs	r5, #127	; 0x7f
 800488e:	400d      	ands	r5, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004890:	435d      	muls	r5, r3
 8004892:	3555      	adds	r5, #85	; 0x55
 8004894:	35ff      	adds	r5, #255	; 0xff
 8004896:	e7dc      	b.n	8004852 <USBD_StdEPReq+0xce>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004898:	0020      	movs	r0, r4
 800489a:	f000 fa75 	bl	8004d88 <USBD_LL_IsStallEP>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d001      	beq.n	80048a6 <USBD_StdEPReq+0x122>
                pep->status = 0x0001U;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e7d9      	b.n	800485a <USBD_StdEPReq+0xd6>
                pep->status = 0x0000U;
 80048a6:	6028      	str	r0, [r5, #0]
 80048a8:	e7d8      	b.n	800485c <USBD_StdEPReq+0xd8>

080048aa <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80048aa:	780b      	ldrb	r3, [r1, #0]
 80048ac:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80048ae:	784b      	ldrb	r3, [r1, #1]
 80048b0:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80048b2:	78ca      	ldrb	r2, [r1, #3]
 80048b4:	788b      	ldrb	r3, [r1, #2]
 80048b6:	0212      	lsls	r2, r2, #8
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80048bc:	794a      	ldrb	r2, [r1, #5]
 80048be:	790b      	ldrb	r3, [r1, #4]
 80048c0:	0212      	lsls	r2, r2, #8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80048c6:	79ca      	ldrb	r2, [r1, #7]
 80048c8:	798b      	ldrb	r3, [r1, #6]
 80048ca:	0212      	lsls	r2, r2, #8
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	80c3      	strh	r3, [r0, #6]
}
 80048d0:	4770      	bx	lr

080048d2 <USBD_CtlError>:
{
 80048d2:	b510      	push	{r4, lr}
 80048d4:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	f000 fa36 	bl	8004d48 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80048dc:	2100      	movs	r1, #0
 80048de:	0020      	movs	r0, r4
 80048e0:	f000 fa32 	bl	8004d48 <USBD_LL_StallEP>
}
 80048e4:	bd10      	pop	{r4, pc}

080048e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80048e6:	2300      	movs	r3, #0
 80048e8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80048ea:	4298      	cmp	r0, r3
 80048ec:	d101      	bne.n	80048f2 <USBD_GetString+0xc>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
    }
  }
}
 80048ee:	bd30      	pop	{r4, r5, pc}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80048f0:	002b      	movs	r3, r5
 80048f2:	5cc4      	ldrb	r4, [r0, r3]
 80048f4:	1c5d      	adds	r5, r3, #1
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	d1fa      	bne.n	80048f0 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004902:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004904:	2303      	movs	r3, #3
 8004906:	704b      	strb	r3, [r1, #1]
 8004908:	3b01      	subs	r3, #1
    while (*desc != '\0')
 800490a:	7805      	ldrb	r5, [r0, #0]
 800490c:	2d00      	cmp	r5, #0
 800490e:	d0ee      	beq.n	80048ee <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	54cd      	strb	r5, [r1, r3]
 8004914:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8004916:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8004918:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 800491a:	b2db      	uxtb	r3, r3
 800491c:	548c      	strb	r4, [r1, r2]
 800491e:	e7f4      	b.n	800490a <USBD_GetString+0x24>

08004920 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004920:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004922:	22a5      	movs	r2, #165	; 0xa5
{
 8004924:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004926:	2402      	movs	r4, #2
 8004928:	0092      	lsls	r2, r2, #2
 800492a:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800492c:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 800492e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8004930:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004932:	2100      	movs	r1, #0
 8004934:	f000 fa4a 	bl	8004dcc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004938:	2000      	movs	r0, #0
 800493a:	bd10      	pop	{r4, pc}

0800493c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800493c:	b510      	push	{r4, lr}
 800493e:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004940:	000a      	movs	r2, r1
 8004942:	2100      	movs	r1, #0
 8004944:	f000 fa42 	bl	8004dcc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004948:	2000      	movs	r0, #0
 800494a:	bd10      	pop	{r4, pc}

0800494c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800494c:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800494e:	22a5      	movs	r2, #165	; 0xa5
{
 8004950:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004952:	2403      	movs	r4, #3
 8004954:	0092      	lsls	r2, r2, #2
 8004956:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8004958:	0002      	movs	r2, r0
 800495a:	32fc      	adds	r2, #252	; 0xfc
 800495c:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 800495e:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004960:	000a      	movs	r2, r1
 8004962:	2100      	movs	r1, #0
 8004964:	f000 fa42 	bl	8004dec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004968:	2000      	movs	r0, #0
 800496a:	bd10      	pop	{r4, pc}

0800496c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800496c:	b510      	push	{r4, lr}
 800496e:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004970:	000a      	movs	r2, r1
 8004972:	2100      	movs	r1, #0
 8004974:	f000 fa3a 	bl	8004dec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004978:	2000      	movs	r0, #0
 800497a:	bd10      	pop	{r4, pc}

0800497c <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800497c:	23a5      	movs	r3, #165	; 0xa5
 800497e:	2204      	movs	r2, #4
 8004980:	009b      	lsls	r3, r3, #2
{
 8004982:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004984:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004986:	2300      	movs	r3, #0
 8004988:	001a      	movs	r2, r3
 800498a:	0019      	movs	r1, r3
 800498c:	f000 fa1e 	bl	8004dcc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004990:	2000      	movs	r0, #0
 8004992:	bd10      	pop	{r4, pc}

08004994 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004994:	23a5      	movs	r3, #165	; 0xa5
 8004996:	2205      	movs	r2, #5
 8004998:	009b      	lsls	r3, r3, #2
{
 800499a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800499c:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800499e:	2300      	movs	r3, #0
 80049a0:	001a      	movs	r2, r3
 80049a2:	0019      	movs	r1, r3
 80049a4:	f000 fa22 	bl	8004dec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80049a8:	2000      	movs	r0, #0
 80049aa:	bd10      	pop	{r4, pc}

080049ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80049ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80049ae:	4c11      	ldr	r4, [pc, #68]	; (80049f4 <MX_USB_DEVICE_Init+0x48>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	4911      	ldr	r1, [pc, #68]	; (80049f8 <MX_USB_DEVICE_Init+0x4c>)
 80049b4:	0020      	movs	r0, r4
 80049b6:	f7ff fc17 	bl	80041e8 <USBD_Init>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d001      	beq.n	80049c2 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 80049be:	f7fc fd55 	bl	800146c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80049c2:	490e      	ldr	r1, [pc, #56]	; (80049fc <MX_USB_DEVICE_Init+0x50>)
 80049c4:	0020      	movs	r0, r4
 80049c6:	f7ff fc29 	bl	800421c <USBD_RegisterClass>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d001      	beq.n	80049d2 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 80049ce:	f7fc fd4d 	bl	800146c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80049d2:	490b      	ldr	r1, [pc, #44]	; (8004a00 <MX_USB_DEVICE_Init+0x54>)
 80049d4:	0020      	movs	r0, r4
 80049d6:	f7ff fbb8 	bl	800414a <USBD_CDC_RegisterInterface>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d001      	beq.n	80049e2 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 80049de:	f7fc fd45 	bl	800146c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80049e2:	0020      	movs	r0, r4
 80049e4:	f7ff fc23 	bl	800422e <USBD_Start>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d001      	beq.n	80049f0 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 80049ec:	f7fc fd3e 	bl	800146c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80049f0:	bd10      	pop	{r4, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	200009b0 	.word	0x200009b0
 80049f8:	2000013c 	.word	0x2000013c
 80049fc:	2000001c 	.word	0x2000001c
 8004a00:	2000012c 	.word	0x2000012c

08004a04 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004a04:	2000      	movs	r0, #0
 8004a06:	4770      	bx	lr

08004a08 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004a08:	2000      	movs	r0, #0
 8004a0a:	4770      	bx	lr

08004a0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004a0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004a0e:	4c05      	ldr	r4, [pc, #20]	; (8004a24 <CDC_Receive_FS+0x18>)
{
 8004a10:	0001      	movs	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004a12:	0020      	movs	r0, r4
 8004a14:	f7ff fbad 	bl	8004172 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004a18:	0020      	movs	r0, r4
 8004a1a:	f7ff fbcd 	bl	80041b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004a1e:	2000      	movs	r0, #0
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	200009b0 	.word	0x200009b0

08004a28 <CDC_Init_FS>:
{
 8004a28:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004a2a:	4c06      	ldr	r4, [pc, #24]	; (8004a44 <CDC_Init_FS+0x1c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4906      	ldr	r1, [pc, #24]	; (8004a48 <CDC_Init_FS+0x20>)
 8004a30:	0020      	movs	r0, r4
 8004a32:	f7ff fb93 	bl	800415c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004a36:	4905      	ldr	r1, [pc, #20]	; (8004a4c <CDC_Init_FS+0x24>)
 8004a38:	0020      	movs	r0, r4
 8004a3a:	f7ff fb9a 	bl	8004172 <USBD_CDC_SetRxBuffer>
}
 8004a3e:	2000      	movs	r0, #0
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	200009b0 	.word	0x200009b0
 8004a48:	20000cd8 	.word	0x20000cd8
 8004a4c:	20000c74 	.word	0x20000c74

08004a50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004a50:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004a52:	21ae      	movs	r1, #174	; 0xae
{
 8004a54:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004a56:	4c08      	ldr	r4, [pc, #32]	; (8004a78 <CDC_Transmit_FS+0x28>)
 8004a58:	0089      	lsls	r1, r1, #2
{
 8004a5a:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004a5c:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 8004a5e:	39a4      	subs	r1, #164	; 0xa4
 8004a60:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 8004a62:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d106      	bne.n	8004a76 <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004a68:	0019      	movs	r1, r3
 8004a6a:	0020      	movs	r0, r4
 8004a6c:	f7ff fb76 	bl	800415c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004a70:	0020      	movs	r0, r4
 8004a72:	f7ff fb85 	bl	8004180 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8004a76:	bd10      	pop	{r4, pc}
 8004a78:	200009b0 	.word	0x200009b0

08004a7c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a7c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004a7e:	4801      	ldr	r0, [pc, #4]	; (8004a84 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a80:	800b      	strh	r3, [r1, #0]
}
 8004a82:	4770      	bx	lr
 8004a84:	20000158 	.word	0x20000158

08004a88 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004a88:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004a8a:	4801      	ldr	r0, [pc, #4]	; (8004a90 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004a8c:	800b      	strh	r3, [r1, #0]
}
 8004a8e:	4770      	bx	lr
 8004a90:	2000016c 	.word	0x2000016c

08004a94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004a94:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004a96:	2500      	movs	r5, #0
 8004a98:	3a01      	subs	r2, #1
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	0052      	lsls	r2, r2, #1
 8004a9e:	1c8b      	adds	r3, r1, #2
 8004aa0:	18d2      	adds	r2, r2, r3
    if (((value >> 28)) < 0xA)
 8004aa2:	0f04      	lsrs	r4, r0, #28
 8004aa4:	b2e3      	uxtb	r3, r4
 8004aa6:	2c09      	cmp	r4, #9
 8004aa8:	d807      	bhi.n	8004aba <IntToUnicode+0x26>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004aaa:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004aac:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8004aae:	704d      	strb	r5, [r1, #1]
 8004ab0:	3102      	adds	r1, #2
    value = value << 4;
 8004ab2:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8004ab4:	428a      	cmp	r2, r1
 8004ab6:	d1f4      	bne.n	8004aa2 <IntToUnicode+0xe>
  }
}
 8004ab8:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004aba:	3337      	adds	r3, #55	; 0x37
 8004abc:	e7f6      	b.n	8004aac <IntToUnicode+0x18>
	...

08004ac0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004ac0:	231a      	movs	r3, #26
{
 8004ac2:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004ac4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <USBD_FS_SerialStrDescriptor+0x34>)
 8004ac8:	4c0b      	ldr	r4, [pc, #44]	; (8004af8 <USBD_FS_SerialStrDescriptor+0x38>)
 8004aca:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d00b      	beq.n	8004aee <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004ad8:	1ca1      	adds	r1, r4, #2
 8004ada:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004adc:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004ade:	f7ff ffd9 	bl	8004a94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004ae2:	0021      	movs	r1, r4
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	3112      	adds	r1, #18
 8004ae8:	0028      	movs	r0, r5
 8004aea:	f7ff ffd3 	bl	8004a94 <IntToUnicode>
}
 8004aee:	0020      	movs	r0, r4
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	1ffff7ac 	.word	0x1ffff7ac
 8004af8:	20000170 	.word	0x20000170
 8004afc:	1ffff7b4 	.word	0x1ffff7b4
 8004b00:	1ffff7b0 	.word	0x1ffff7b0

08004b04 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004b04:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b06:	4c04      	ldr	r4, [pc, #16]	; (8004b18 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8004b08:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b0a:	4804      	ldr	r0, [pc, #16]	; (8004b1c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004b0c:	0021      	movs	r1, r4
 8004b0e:	f7ff feea 	bl	80048e6 <USBD_GetString>
}
 8004b12:	0020      	movs	r0, r4
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	20000d3c 	.word	0x20000d3c
 8004b1c:	08006c41 	.word	0x08006c41

08004b20 <USBD_FS_ProductStrDescriptor>:
{
 8004b20:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004b22:	4c04      	ldr	r4, [pc, #16]	; (8004b34 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8004b24:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004b26:	4804      	ldr	r0, [pc, #16]	; (8004b38 <USBD_FS_ProductStrDescriptor+0x18>)
 8004b28:	0021      	movs	r1, r4
 8004b2a:	f7ff fedc 	bl	80048e6 <USBD_GetString>
}
 8004b2e:	0020      	movs	r0, r4
 8004b30:	bd10      	pop	{r4, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	20000d3c 	.word	0x20000d3c
 8004b38:	08006c56 	.word	0x08006c56

08004b3c <USBD_FS_ConfigStrDescriptor>:
{
 8004b3c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b3e:	4c04      	ldr	r4, [pc, #16]	; (8004b50 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8004b40:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b42:	4804      	ldr	r0, [pc, #16]	; (8004b54 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004b44:	0021      	movs	r1, r4
 8004b46:	f7ff fece 	bl	80048e6 <USBD_GetString>
}
 8004b4a:	0020      	movs	r0, r4
 8004b4c:	bd10      	pop	{r4, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	20000d3c 	.word	0x20000d3c
 8004b54:	08006c28 	.word	0x08006c28

08004b58 <USBD_FS_InterfaceStrDescriptor>:
{
 8004b58:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b5a:	4c04      	ldr	r4, [pc, #16]	; (8004b6c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8004b5c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b5e:	4804      	ldr	r0, [pc, #16]	; (8004b70 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004b60:	0021      	movs	r1, r4
 8004b62:	f7ff fec0 	bl	80048e6 <USBD_GetString>
}
 8004b66:	0020      	movs	r0, r4
 8004b68:	bd10      	pop	{r4, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	20000d3c 	.word	0x20000d3c
 8004b70:	08006c33 	.word	0x08006c33

08004b74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004b74:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_PCD_MspInit+0x30>)
 8004b78:	6802      	ldr	r2, [r0, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d111      	bne.n	8004ba2 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004b7e:	2080      	movs	r0, #128	; 0x80
 8004b80:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <HAL_PCD_MspInit+0x34>)
 8004b82:	0400      	lsls	r0, r0, #16
 8004b84:	69d1      	ldr	r1, [r2, #28]
 8004b86:	4301      	orrs	r1, r0
 8004b88:	61d1      	str	r1, [r2, #28]
 8004b8a:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004b8c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004b8e:	4003      	ands	r3, r0
 8004b90:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004b92:	201f      	movs	r0, #31
 8004b94:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004b96:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004b98:	f7fd fa1a 	bl	8001fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004b9c:	201f      	movs	r0, #31
 8004b9e:	f7fd fa41 	bl	8002024 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004ba2:	bd07      	pop	{r0, r1, r2, pc}
 8004ba4:	40005c00 	.word	0x40005c00
 8004ba8:	40021000 	.word	0x40021000

08004bac <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004bac:	238c      	movs	r3, #140	; 0x8c
{
 8004bae:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	18c1      	adds	r1, r0, r3
 8004bb4:	3340      	adds	r3, #64	; 0x40
 8004bb6:	58c0      	ldr	r0, [r0, r3]
 8004bb8:	f7ff fb54 	bl	8004264 <USBD_LL_SetupStage>
}
 8004bbc:	bd10      	pop	{r4, pc}

08004bbe <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004bbe:	014b      	lsls	r3, r1, #5
 8004bc0:	18c3      	adds	r3, r0, r3
 8004bc2:	33fc      	adds	r3, #252	; 0xfc
 8004bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc6:	239c      	movs	r3, #156	; 0x9c
{
 8004bc8:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	58c0      	ldr	r0, [r0, r3]
 8004bce:	f7ff fb7b 	bl	80042c8 <USBD_LL_DataOutStage>
}
 8004bd2:	bd10      	pop	{r4, pc}

08004bd4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004bd4:	014b      	lsls	r3, r1, #5
 8004bd6:	18c3      	adds	r3, r0, r3
 8004bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bda:	239c      	movs	r3, #156	; 0x9c
{
 8004bdc:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	58c0      	ldr	r0, [r0, r3]
 8004be2:	f7ff fbb5 	bl	8004350 <USBD_LL_DataInStage>
}
 8004be6:	bd10      	pop	{r4, pc}

08004be8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004be8:	239c      	movs	r3, #156	; 0x9c
{
 8004bea:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	58c0      	ldr	r0, [r0, r3]
 8004bf0:	f7ff fc56 	bl	80044a0 <USBD_LL_SOF>
}
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004bf6:	6883      	ldr	r3, [r0, #8]
{
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d001      	beq.n	8004c04 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004c00:	f7fc fc34 	bl	800146c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004c04:	259c      	movs	r5, #156	; 0x9c
 8004c06:	00ad      	lsls	r5, r5, #2
 8004c08:	2101      	movs	r1, #1
 8004c0a:	5960      	ldr	r0, [r4, r5]
 8004c0c:	f7ff fc2d 	bl	800446a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004c10:	5960      	ldr	r0, [r4, r5]
 8004c12:	f7ff fc00 	bl	8004416 <USBD_LL_Reset>
}
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004c18:	239c      	movs	r3, #156	; 0x9c
{
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	58c0      	ldr	r0, [r0, r3]
 8004c22:	f7ff fc25 	bl	8004470 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004c26:	69a3      	ldr	r3, [r4, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004c2c:	2306      	movs	r3, #6
 8004c2e:	4a02      	ldr	r2, [pc, #8]	; (8004c38 <HAL_PCD_SuspendCallback+0x20>)
 8004c30:	6911      	ldr	r1, [r2, #16]
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004c36:	bd10      	pop	{r4, pc}
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8004c3c:	6983      	ldr	r3, [r0, #24]
{
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d006      	beq.n	8004c54 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004c46:	2106      	movs	r1, #6
 8004c48:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <HAL_PCD_ResumeCallback+0x24>)
 8004c4a:	6913      	ldr	r3, [r2, #16]
 8004c4c:	438b      	bics	r3, r1
 8004c4e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8004c50:	f7fc fa54 	bl	80010fc <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004c54:	239c      	movs	r3, #156	; 0x9c
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	58e0      	ldr	r0, [r4, r3]
 8004c5a:	f7ff fc15 	bl	8004488 <USBD_LL_Resume>
}
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8004c64:	239c      	movs	r3, #156	; 0x9c
{
 8004c66:	b570      	push	{r4, r5, r6, lr}
 8004c68:	0005      	movs	r5, r0
  hpcd_USB_FS.pData = pdev;
 8004c6a:	481c      	ldr	r0, [pc, #112]	; (8004cdc <USBD_LL_Init+0x78>)
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	50c5      	str	r5, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8004c72:	24b0      	movs	r4, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 8004c74:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004c76:	2308      	movs	r3, #8
 8004c78:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004c7a:	3b06      	subs	r3, #6
 8004c7c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004c7e:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004c80:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8004c82:	00a4      	lsls	r4, r4, #2
 8004c84:	5128      	str	r0, [r5, r4]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004c86:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004c88:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004c8a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004c8c:	f7fd fdde 	bl	800284c <HAL_PCD_Init>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d001      	beq.n	8004c98 <USBD_LL_Init+0x34>
    Error_Handler( );
 8004c94:	f7fc fbea 	bl	800146c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004c98:	2200      	movs	r2, #0
 8004c9a:	5928      	ldr	r0, [r5, r4]
 8004c9c:	0011      	movs	r1, r2
 8004c9e:	2318      	movs	r3, #24
 8004ca0:	f7fe f995 	bl	8002fce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004ca4:	5928      	ldr	r0, [r5, r4]
 8004ca6:	2358      	movs	r3, #88	; 0x58
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2180      	movs	r1, #128	; 0x80
 8004cac:	f7fe f98f 	bl	8002fce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004cb0:	5928      	ldr	r0, [r5, r4]
 8004cb2:	23c0      	movs	r3, #192	; 0xc0
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2181      	movs	r1, #129	; 0x81
 8004cb8:	f7fe f989 	bl	8002fce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004cbc:	2388      	movs	r3, #136	; 0x88
 8004cbe:	5928      	ldr	r0, [r5, r4]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	f7fe f982 	bl	8002fce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	5928      	ldr	r0, [r5, r4]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2182      	movs	r1, #130	; 0x82
 8004cd4:	f7fe f97b 	bl	8002fce <HAL_PCDEx_PMAConfig>
}
 8004cd8:	2000      	movs	r0, #0
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	20000f3c 	.word	0x20000f3c
 8004ce0:	40005c00 	.word	0x40005c00

08004ce4 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8004ce4:	23b0      	movs	r3, #176	; 0xb0
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	58c0      	ldr	r0, [r0, r3]
{
 8004cea:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004cec:	f7fd fe10 	bl	8002910 <HAL_PCD_Start>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	2803      	cmp	r0, #3
 8004cf4:	d801      	bhi.n	8004cfa <USBD_LL_Start+0x16>
 8004cf6:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <USBD_LL_Start+0x1c>)
 8004cf8:	5c1b      	ldrb	r3, [r3, r0]
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	bd10      	pop	{r4, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	08006c6b 	.word	0x08006c6b

08004d04 <USBD_LL_OpenEP>:
{
 8004d04:	b510      	push	{r4, lr}
 8004d06:	0014      	movs	r4, r2
 8004d08:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004d0a:	0023      	movs	r3, r4
 8004d0c:	24b0      	movs	r4, #176	; 0xb0
 8004d0e:	00a4      	lsls	r4, r4, #2
 8004d10:	5900      	ldr	r0, [r0, r4]
 8004d12:	f7fd fe22 	bl	800295a <HAL_PCD_EP_Open>
 8004d16:	2302      	movs	r3, #2
 8004d18:	2803      	cmp	r0, #3
 8004d1a:	d801      	bhi.n	8004d20 <USBD_LL_OpenEP+0x1c>
 8004d1c:	4b01      	ldr	r3, [pc, #4]	; (8004d24 <USBD_LL_OpenEP+0x20>)
 8004d1e:	5c1b      	ldrb	r3, [r3, r0]
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	08006c6b 	.word	0x08006c6b

08004d28 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004d28:	23b0      	movs	r3, #176	; 0xb0
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	58c0      	ldr	r0, [r0, r3]
{
 8004d2e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004d30:	f7fd fe43 	bl	80029ba <HAL_PCD_EP_Close>
 8004d34:	2302      	movs	r3, #2
 8004d36:	2803      	cmp	r0, #3
 8004d38:	d801      	bhi.n	8004d3e <USBD_LL_CloseEP+0x16>
 8004d3a:	4b02      	ldr	r3, [pc, #8]	; (8004d44 <USBD_LL_CloseEP+0x1c>)
 8004d3c:	5c1b      	ldrb	r3, [r3, r0]
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	08006c6b 	.word	0x08006c6b

08004d48 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004d48:	23b0      	movs	r3, #176	; 0xb0
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	58c0      	ldr	r0, [r0, r3]
{
 8004d4e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004d50:	f7fe f8dc 	bl	8002f0c <HAL_PCD_EP_SetStall>
 8004d54:	2302      	movs	r3, #2
 8004d56:	2803      	cmp	r0, #3
 8004d58:	d801      	bhi.n	8004d5e <USBD_LL_StallEP+0x16>
 8004d5a:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <USBD_LL_StallEP+0x1c>)
 8004d5c:	5c1b      	ldrb	r3, [r3, r0]
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	bd10      	pop	{r4, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	08006c6b 	.word	0x08006c6b

08004d68 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004d68:	23b0      	movs	r3, #176	; 0xb0
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	58c0      	ldr	r0, [r0, r3]
{
 8004d6e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004d70:	f7fe f901 	bl	8002f76 <HAL_PCD_EP_ClrStall>
 8004d74:	2302      	movs	r3, #2
 8004d76:	2803      	cmp	r0, #3
 8004d78:	d801      	bhi.n	8004d7e <USBD_LL_ClearStallEP+0x16>
 8004d7a:	4b02      	ldr	r3, [pc, #8]	; (8004d84 <USBD_LL_ClearStallEP+0x1c>)
 8004d7c:	5c1b      	ldrb	r3, [r3, r0]
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	08006c6b 	.word	0x08006c6b

08004d88 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004d88:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 8004d8a:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	da06      	bge.n	8004da2 <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004d94:	227f      	movs	r2, #127	; 0x7f
 8004d96:	4011      	ands	r1, r2
 8004d98:	0149      	lsls	r1, r1, #5
 8004d9a:	185b      	adds	r3, r3, r1
 8004d9c:	332a      	adds	r3, #42	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004d9e:	7818      	ldrb	r0, [r3, #0]
}
 8004da0:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004da2:	0149      	lsls	r1, r1, #5
 8004da4:	185b      	adds	r3, r3, r1
 8004da6:	332b      	adds	r3, #43	; 0x2b
 8004da8:	33ff      	adds	r3, #255	; 0xff
 8004daa:	e7f8      	b.n	8004d9e <USBD_LL_IsStallEP+0x16>

08004dac <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004dac:	23b0      	movs	r3, #176	; 0xb0
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	58c0      	ldr	r0, [r0, r3]
{
 8004db2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004db4:	f7fd fdbf 	bl	8002936 <HAL_PCD_SetAddress>
 8004db8:	2302      	movs	r3, #2
 8004dba:	2803      	cmp	r0, #3
 8004dbc:	d801      	bhi.n	8004dc2 <USBD_LL_SetUSBAddress+0x16>
 8004dbe:	4b02      	ldr	r3, [pc, #8]	; (8004dc8 <USBD_LL_SetUSBAddress+0x1c>)
 8004dc0:	5c1b      	ldrb	r3, [r3, r0]
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	bd10      	pop	{r4, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	08006c6b 	.word	0x08006c6b

08004dcc <USBD_LL_Transmit>:
{
 8004dcc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004dce:	24b0      	movs	r4, #176	; 0xb0
 8004dd0:	00a4      	lsls	r4, r4, #2
 8004dd2:	5900      	ldr	r0, [r0, r4]
 8004dd4:	f7fd fe37 	bl	8002a46 <HAL_PCD_EP_Transmit>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	2803      	cmp	r0, #3
 8004ddc:	d801      	bhi.n	8004de2 <USBD_LL_Transmit+0x16>
 8004dde:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <USBD_LL_Transmit+0x1c>)
 8004de0:	5c1b      	ldrb	r3, [r3, r0]
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	bd10      	pop	{r4, pc}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	08006c6b 	.word	0x08006c6b

08004dec <USBD_LL_PrepareReceive>:
{
 8004dec:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004dee:	24b0      	movs	r4, #176	; 0xb0
 8004df0:	00a4      	lsls	r4, r4, #2
 8004df2:	5900      	ldr	r0, [r0, r4]
 8004df4:	f7fd fe05 	bl	8002a02 <HAL_PCD_EP_Receive>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	2803      	cmp	r0, #3
 8004dfc:	d801      	bhi.n	8004e02 <USBD_LL_PrepareReceive+0x16>
 8004dfe:	4b02      	ldr	r3, [pc, #8]	; (8004e08 <USBD_LL_PrepareReceive+0x1c>)
 8004e00:	5c1b      	ldrb	r3, [r3, r0]
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	08006c6b 	.word	0x08006c6b

08004e0c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004e0c:	23b0      	movs	r3, #176	; 0xb0
{
 8004e0e:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	58c0      	ldr	r0, [r0, r3]
 8004e14:	f7fd fe10 	bl	8002a38 <HAL_PCD_EP_GetRxCount>
}
 8004e18:	bd10      	pop	{r4, pc}
	...

08004e1c <USBD_static_malloc>:
}
 8004e1c:	4800      	ldr	r0, [pc, #0]	; (8004e20 <USBD_static_malloc+0x4>)
 8004e1e:	4770      	bx	lr
 8004e20:	2000069c 	.word	0x2000069c

08004e24 <USBD_static_free>:
}
 8004e24:	4770      	bx	lr
	...

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	2000018c 	.word	0x2000018c

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	2600      	movs	r6, #0
 8004e38:	4d0c      	ldr	r5, [pc, #48]	; (8004e6c <__libc_init_array+0x38>)
 8004e3a:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3c:	1b64      	subs	r4, r4, r5
 8004e3e:	10a4      	asrs	r4, r4, #2
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	2600      	movs	r6, #0
 8004e46:	f000 fc31 	bl	80056ac <_init>
 8004e4a:	4d0a      	ldr	r5, [pc, #40]	; (8004e74 <__libc_init_array+0x40>)
 8004e4c:	4c0a      	ldr	r4, [pc, #40]	; (8004e78 <__libc_init_array+0x44>)
 8004e4e:	1b64      	subs	r4, r4, r5
 8004e50:	10a4      	asrs	r4, r4, #2
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	00b3      	lsls	r3, r6, #2
 8004e5a:	58eb      	ldr	r3, [r5, r3]
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	00b3      	lsls	r3, r6, #2
 8004e64:	58eb      	ldr	r3, [r5, r3]
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08006ca4 	.word	0x08006ca4
 8004e70:	08006ca4 	.word	0x08006ca4
 8004e74:	08006ca4 	.word	0x08006ca4
 8004e78:	08006ca8 	.word	0x08006ca8

08004e7c <memcpy>:
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d100      	bne.n	8004e86 <memcpy+0xa>
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	5ccc      	ldrb	r4, [r1, r3]
 8004e88:	54c4      	strb	r4, [r0, r3]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	e7f8      	b.n	8004e80 <memcpy+0x4>

08004e8e <memset>:
 8004e8e:	0003      	movs	r3, r0
 8004e90:	1812      	adds	r2, r2, r0
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d100      	bne.n	8004e98 <memset+0xa>
 8004e96:	4770      	bx	lr
 8004e98:	7019      	strb	r1, [r3, #0]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	e7f9      	b.n	8004e92 <memset+0x4>
	...

08004ea0 <siprintf>:
 8004ea0:	b40e      	push	{r1, r2, r3}
 8004ea2:	b500      	push	{lr}
 8004ea4:	490b      	ldr	r1, [pc, #44]	; (8004ed4 <siprintf+0x34>)
 8004ea6:	b09c      	sub	sp, #112	; 0x70
 8004ea8:	ab1d      	add	r3, sp, #116	; 0x74
 8004eaa:	9002      	str	r0, [sp, #8]
 8004eac:	9006      	str	r0, [sp, #24]
 8004eae:	9107      	str	r1, [sp, #28]
 8004eb0:	9104      	str	r1, [sp, #16]
 8004eb2:	4809      	ldr	r0, [pc, #36]	; (8004ed8 <siprintf+0x38>)
 8004eb4:	4909      	ldr	r1, [pc, #36]	; (8004edc <siprintf+0x3c>)
 8004eb6:	cb04      	ldmia	r3!, {r2}
 8004eb8:	9105      	str	r1, [sp, #20]
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	a902      	add	r1, sp, #8
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	f000 f878 	bl	8004fb4 <_svfiprintf_r>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9a02      	ldr	r2, [sp, #8]
 8004ec8:	7013      	strb	r3, [r2, #0]
 8004eca:	b01c      	add	sp, #112	; 0x70
 8004ecc:	bc08      	pop	{r3}
 8004ece:	b003      	add	sp, #12
 8004ed0:	4718      	bx	r3
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	7fffffff 	.word	0x7fffffff
 8004ed8:	2000018c 	.word	0x2000018c
 8004edc:	ffff0208 	.word	0xffff0208

08004ee0 <strcpy>:
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	780a      	ldrb	r2, [r1, #0]
 8004ee4:	3101      	adds	r1, #1
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	2a00      	cmp	r2, #0
 8004eec:	d1f9      	bne.n	8004ee2 <strcpy+0x2>
 8004eee:	4770      	bx	lr

08004ef0 <__ssputs_r>:
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	688e      	ldr	r6, [r1, #8]
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	0007      	movs	r7, r0
 8004ef8:	000c      	movs	r4, r1
 8004efa:	9203      	str	r2, [sp, #12]
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	429e      	cmp	r6, r3
 8004f00:	d83c      	bhi.n	8004f7c <__ssputs_r+0x8c>
 8004f02:	2390      	movs	r3, #144	; 0x90
 8004f04:	898a      	ldrh	r2, [r1, #12]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	421a      	tst	r2, r3
 8004f0a:	d034      	beq.n	8004f76 <__ssputs_r+0x86>
 8004f0c:	2503      	movs	r5, #3
 8004f0e:	6909      	ldr	r1, [r1, #16]
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	1a5b      	subs	r3, r3, r1
 8004f14:	9302      	str	r3, [sp, #8]
 8004f16:	6963      	ldr	r3, [r4, #20]
 8004f18:	9802      	ldr	r0, [sp, #8]
 8004f1a:	435d      	muls	r5, r3
 8004f1c:	0feb      	lsrs	r3, r5, #31
 8004f1e:	195d      	adds	r5, r3, r5
 8004f20:	9b01      	ldr	r3, [sp, #4]
 8004f22:	106d      	asrs	r5, r5, #1
 8004f24:	3301      	adds	r3, #1
 8004f26:	181b      	adds	r3, r3, r0
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	d900      	bls.n	8004f2e <__ssputs_r+0x3e>
 8004f2c:	001d      	movs	r5, r3
 8004f2e:	0553      	lsls	r3, r2, #21
 8004f30:	d532      	bpl.n	8004f98 <__ssputs_r+0xa8>
 8004f32:	0029      	movs	r1, r5
 8004f34:	0038      	movs	r0, r7
 8004f36:	f000 fb19 	bl	800556c <_malloc_r>
 8004f3a:	1e06      	subs	r6, r0, #0
 8004f3c:	d109      	bne.n	8004f52 <__ssputs_r+0x62>
 8004f3e:	230c      	movs	r3, #12
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	2340      	movs	r3, #64	; 0x40
 8004f44:	2001      	movs	r0, #1
 8004f46:	89a2      	ldrh	r2, [r4, #12]
 8004f48:	4240      	negs	r0, r0
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	81a3      	strh	r3, [r4, #12]
 8004f4e:	b005      	add	sp, #20
 8004f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f52:	9a02      	ldr	r2, [sp, #8]
 8004f54:	6921      	ldr	r1, [r4, #16]
 8004f56:	f7ff ff91 	bl	8004e7c <memcpy>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <__ssputs_r+0xc0>)
 8004f5e:	401a      	ands	r2, r3
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	4313      	orrs	r3, r2
 8004f64:	81a3      	strh	r3, [r4, #12]
 8004f66:	9b02      	ldr	r3, [sp, #8]
 8004f68:	6126      	str	r6, [r4, #16]
 8004f6a:	18f6      	adds	r6, r6, r3
 8004f6c:	6026      	str	r6, [r4, #0]
 8004f6e:	6165      	str	r5, [r4, #20]
 8004f70:	9e01      	ldr	r6, [sp, #4]
 8004f72:	1aed      	subs	r5, r5, r3
 8004f74:	60a5      	str	r5, [r4, #8]
 8004f76:	9b01      	ldr	r3, [sp, #4]
 8004f78:	429e      	cmp	r6, r3
 8004f7a:	d900      	bls.n	8004f7e <__ssputs_r+0x8e>
 8004f7c:	9e01      	ldr	r6, [sp, #4]
 8004f7e:	0032      	movs	r2, r6
 8004f80:	9903      	ldr	r1, [sp, #12]
 8004f82:	6820      	ldr	r0, [r4, #0]
 8004f84:	f000 fa95 	bl	80054b2 <memmove>
 8004f88:	68a3      	ldr	r3, [r4, #8]
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	1b9b      	subs	r3, r3, r6
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	199e      	adds	r6, r3, r6
 8004f94:	6026      	str	r6, [r4, #0]
 8004f96:	e7da      	b.n	8004f4e <__ssputs_r+0x5e>
 8004f98:	002a      	movs	r2, r5
 8004f9a:	0038      	movs	r0, r7
 8004f9c:	f000 fb44 	bl	8005628 <_realloc_r>
 8004fa0:	1e06      	subs	r6, r0, #0
 8004fa2:	d1e0      	bne.n	8004f66 <__ssputs_r+0x76>
 8004fa4:	6921      	ldr	r1, [r4, #16]
 8004fa6:	0038      	movs	r0, r7
 8004fa8:	f000 fa96 	bl	80054d8 <_free_r>
 8004fac:	e7c7      	b.n	8004f3e <__ssputs_r+0x4e>
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	fffffb7f 	.word	0xfffffb7f

08004fb4 <_svfiprintf_r>:
 8004fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb6:	b0a1      	sub	sp, #132	; 0x84
 8004fb8:	9003      	str	r0, [sp, #12]
 8004fba:	001d      	movs	r5, r3
 8004fbc:	898b      	ldrh	r3, [r1, #12]
 8004fbe:	000f      	movs	r7, r1
 8004fc0:	0016      	movs	r6, r2
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	d511      	bpl.n	8004fea <_svfiprintf_r+0x36>
 8004fc6:	690b      	ldr	r3, [r1, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10e      	bne.n	8004fea <_svfiprintf_r+0x36>
 8004fcc:	2140      	movs	r1, #64	; 0x40
 8004fce:	f000 facd 	bl	800556c <_malloc_r>
 8004fd2:	6038      	str	r0, [r7, #0]
 8004fd4:	6138      	str	r0, [r7, #16]
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d105      	bne.n	8004fe6 <_svfiprintf_r+0x32>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	9a03      	ldr	r2, [sp, #12]
 8004fde:	3801      	subs	r0, #1
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	b021      	add	sp, #132	; 0x84
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	2340      	movs	r3, #64	; 0x40
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	2300      	movs	r3, #0
 8004fec:	ac08      	add	r4, sp, #32
 8004fee:	6163      	str	r3, [r4, #20]
 8004ff0:	3320      	adds	r3, #32
 8004ff2:	7663      	strb	r3, [r4, #25]
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	76a3      	strb	r3, [r4, #26]
 8004ff8:	9507      	str	r5, [sp, #28]
 8004ffa:	0035      	movs	r5, r6
 8004ffc:	782b      	ldrb	r3, [r5, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <_svfiprintf_r+0x52>
 8005002:	2b25      	cmp	r3, #37	; 0x25
 8005004:	d146      	bne.n	8005094 <_svfiprintf_r+0xe0>
 8005006:	1bab      	subs	r3, r5, r6
 8005008:	9305      	str	r3, [sp, #20]
 800500a:	d00c      	beq.n	8005026 <_svfiprintf_r+0x72>
 800500c:	0032      	movs	r2, r6
 800500e:	0039      	movs	r1, r7
 8005010:	9803      	ldr	r0, [sp, #12]
 8005012:	f7ff ff6d 	bl	8004ef0 <__ssputs_r>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d100      	bne.n	800501c <_svfiprintf_r+0x68>
 800501a:	e0ae      	b.n	800517a <_svfiprintf_r+0x1c6>
 800501c:	6962      	ldr	r2, [r4, #20]
 800501e:	9b05      	ldr	r3, [sp, #20]
 8005020:	4694      	mov	ip, r2
 8005022:	4463      	add	r3, ip
 8005024:	6163      	str	r3, [r4, #20]
 8005026:	782b      	ldrb	r3, [r5, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d100      	bne.n	800502e <_svfiprintf_r+0x7a>
 800502c:	e0a5      	b.n	800517a <_svfiprintf_r+0x1c6>
 800502e:	2201      	movs	r2, #1
 8005030:	2300      	movs	r3, #0
 8005032:	4252      	negs	r2, r2
 8005034:	6062      	str	r2, [r4, #4]
 8005036:	a904      	add	r1, sp, #16
 8005038:	3254      	adds	r2, #84	; 0x54
 800503a:	1852      	adds	r2, r2, r1
 800503c:	1c6e      	adds	r6, r5, #1
 800503e:	6023      	str	r3, [r4, #0]
 8005040:	60e3      	str	r3, [r4, #12]
 8005042:	60a3      	str	r3, [r4, #8]
 8005044:	7013      	strb	r3, [r2, #0]
 8005046:	65a3      	str	r3, [r4, #88]	; 0x58
 8005048:	7831      	ldrb	r1, [r6, #0]
 800504a:	2205      	movs	r2, #5
 800504c:	4853      	ldr	r0, [pc, #332]	; (800519c <_svfiprintf_r+0x1e8>)
 800504e:	f000 fa25 	bl	800549c <memchr>
 8005052:	1c75      	adds	r5, r6, #1
 8005054:	2800      	cmp	r0, #0
 8005056:	d11f      	bne.n	8005098 <_svfiprintf_r+0xe4>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	06d3      	lsls	r3, r2, #27
 800505c:	d504      	bpl.n	8005068 <_svfiprintf_r+0xb4>
 800505e:	2353      	movs	r3, #83	; 0x53
 8005060:	a904      	add	r1, sp, #16
 8005062:	185b      	adds	r3, r3, r1
 8005064:	2120      	movs	r1, #32
 8005066:	7019      	strb	r1, [r3, #0]
 8005068:	0713      	lsls	r3, r2, #28
 800506a:	d504      	bpl.n	8005076 <_svfiprintf_r+0xc2>
 800506c:	2353      	movs	r3, #83	; 0x53
 800506e:	a904      	add	r1, sp, #16
 8005070:	185b      	adds	r3, r3, r1
 8005072:	212b      	movs	r1, #43	; 0x2b
 8005074:	7019      	strb	r1, [r3, #0]
 8005076:	7833      	ldrb	r3, [r6, #0]
 8005078:	2b2a      	cmp	r3, #42	; 0x2a
 800507a:	d016      	beq.n	80050aa <_svfiprintf_r+0xf6>
 800507c:	0035      	movs	r5, r6
 800507e:	2100      	movs	r1, #0
 8005080:	200a      	movs	r0, #10
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	782a      	ldrb	r2, [r5, #0]
 8005086:	1c6e      	adds	r6, r5, #1
 8005088:	3a30      	subs	r2, #48	; 0x30
 800508a:	2a09      	cmp	r2, #9
 800508c:	d94e      	bls.n	800512c <_svfiprintf_r+0x178>
 800508e:	2900      	cmp	r1, #0
 8005090:	d018      	beq.n	80050c4 <_svfiprintf_r+0x110>
 8005092:	e010      	b.n	80050b6 <_svfiprintf_r+0x102>
 8005094:	3501      	adds	r5, #1
 8005096:	e7b1      	b.n	8004ffc <_svfiprintf_r+0x48>
 8005098:	4b40      	ldr	r3, [pc, #256]	; (800519c <_svfiprintf_r+0x1e8>)
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	1ac0      	subs	r0, r0, r3
 800509e:	2301      	movs	r3, #1
 80050a0:	4083      	lsls	r3, r0
 80050a2:	4313      	orrs	r3, r2
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	002e      	movs	r6, r5
 80050a8:	e7ce      	b.n	8005048 <_svfiprintf_r+0x94>
 80050aa:	9b07      	ldr	r3, [sp, #28]
 80050ac:	1d19      	adds	r1, r3, #4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	9107      	str	r1, [sp, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	db01      	blt.n	80050ba <_svfiprintf_r+0x106>
 80050b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b8:	e004      	b.n	80050c4 <_svfiprintf_r+0x110>
 80050ba:	425b      	negs	r3, r3
 80050bc:	60e3      	str	r3, [r4, #12]
 80050be:	2302      	movs	r3, #2
 80050c0:	4313      	orrs	r3, r2
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	782b      	ldrb	r3, [r5, #0]
 80050c6:	2b2e      	cmp	r3, #46	; 0x2e
 80050c8:	d10a      	bne.n	80050e0 <_svfiprintf_r+0x12c>
 80050ca:	786b      	ldrb	r3, [r5, #1]
 80050cc:	2b2a      	cmp	r3, #42	; 0x2a
 80050ce:	d135      	bne.n	800513c <_svfiprintf_r+0x188>
 80050d0:	9b07      	ldr	r3, [sp, #28]
 80050d2:	3502      	adds	r5, #2
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	9207      	str	r2, [sp, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	db2b      	blt.n	8005136 <_svfiprintf_r+0x182>
 80050de:	9309      	str	r3, [sp, #36]	; 0x24
 80050e0:	4e2f      	ldr	r6, [pc, #188]	; (80051a0 <_svfiprintf_r+0x1ec>)
 80050e2:	7829      	ldrb	r1, [r5, #0]
 80050e4:	2203      	movs	r2, #3
 80050e6:	0030      	movs	r0, r6
 80050e8:	f000 f9d8 	bl	800549c <memchr>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d006      	beq.n	80050fe <_svfiprintf_r+0x14a>
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	1b80      	subs	r0, r0, r6
 80050f4:	4083      	lsls	r3, r0
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	3501      	adds	r5, #1
 80050fa:	4313      	orrs	r3, r2
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	7829      	ldrb	r1, [r5, #0]
 8005100:	2206      	movs	r2, #6
 8005102:	4828      	ldr	r0, [pc, #160]	; (80051a4 <_svfiprintf_r+0x1f0>)
 8005104:	1c6e      	adds	r6, r5, #1
 8005106:	7621      	strb	r1, [r4, #24]
 8005108:	f000 f9c8 	bl	800549c <memchr>
 800510c:	2800      	cmp	r0, #0
 800510e:	d03c      	beq.n	800518a <_svfiprintf_r+0x1d6>
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <_svfiprintf_r+0x1f4>)
 8005112:	2b00      	cmp	r3, #0
 8005114:	d125      	bne.n	8005162 <_svfiprintf_r+0x1ae>
 8005116:	2207      	movs	r2, #7
 8005118:	9b07      	ldr	r3, [sp, #28]
 800511a:	3307      	adds	r3, #7
 800511c:	4393      	bics	r3, r2
 800511e:	3308      	adds	r3, #8
 8005120:	9307      	str	r3, [sp, #28]
 8005122:	6963      	ldr	r3, [r4, #20]
 8005124:	9a04      	ldr	r2, [sp, #16]
 8005126:	189b      	adds	r3, r3, r2
 8005128:	6163      	str	r3, [r4, #20]
 800512a:	e766      	b.n	8004ffa <_svfiprintf_r+0x46>
 800512c:	4343      	muls	r3, r0
 800512e:	2101      	movs	r1, #1
 8005130:	189b      	adds	r3, r3, r2
 8005132:	0035      	movs	r5, r6
 8005134:	e7a6      	b.n	8005084 <_svfiprintf_r+0xd0>
 8005136:	2301      	movs	r3, #1
 8005138:	425b      	negs	r3, r3
 800513a:	e7d0      	b.n	80050de <_svfiprintf_r+0x12a>
 800513c:	2300      	movs	r3, #0
 800513e:	200a      	movs	r0, #10
 8005140:	001a      	movs	r2, r3
 8005142:	3501      	adds	r5, #1
 8005144:	6063      	str	r3, [r4, #4]
 8005146:	7829      	ldrb	r1, [r5, #0]
 8005148:	1c6e      	adds	r6, r5, #1
 800514a:	3930      	subs	r1, #48	; 0x30
 800514c:	2909      	cmp	r1, #9
 800514e:	d903      	bls.n	8005158 <_svfiprintf_r+0x1a4>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0c5      	beq.n	80050e0 <_svfiprintf_r+0x12c>
 8005154:	9209      	str	r2, [sp, #36]	; 0x24
 8005156:	e7c3      	b.n	80050e0 <_svfiprintf_r+0x12c>
 8005158:	4342      	muls	r2, r0
 800515a:	2301      	movs	r3, #1
 800515c:	1852      	adds	r2, r2, r1
 800515e:	0035      	movs	r5, r6
 8005160:	e7f1      	b.n	8005146 <_svfiprintf_r+0x192>
 8005162:	ab07      	add	r3, sp, #28
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	003a      	movs	r2, r7
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <_svfiprintf_r+0x1f8>)
 800516a:	0021      	movs	r1, r4
 800516c:	9803      	ldr	r0, [sp, #12]
 800516e:	e000      	b.n	8005172 <_svfiprintf_r+0x1be>
 8005170:	bf00      	nop
 8005172:	9004      	str	r0, [sp, #16]
 8005174:	9b04      	ldr	r3, [sp, #16]
 8005176:	3301      	adds	r3, #1
 8005178:	d1d3      	bne.n	8005122 <_svfiprintf_r+0x16e>
 800517a:	89bb      	ldrh	r3, [r7, #12]
 800517c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800517e:	065b      	lsls	r3, r3, #25
 8005180:	d400      	bmi.n	8005184 <_svfiprintf_r+0x1d0>
 8005182:	e72e      	b.n	8004fe2 <_svfiprintf_r+0x2e>
 8005184:	2001      	movs	r0, #1
 8005186:	4240      	negs	r0, r0
 8005188:	e72b      	b.n	8004fe2 <_svfiprintf_r+0x2e>
 800518a:	ab07      	add	r3, sp, #28
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	003a      	movs	r2, r7
 8005190:	4b06      	ldr	r3, [pc, #24]	; (80051ac <_svfiprintf_r+0x1f8>)
 8005192:	0021      	movs	r1, r4
 8005194:	9803      	ldr	r0, [sp, #12]
 8005196:	f000 f879 	bl	800528c <_printf_i>
 800519a:	e7ea      	b.n	8005172 <_svfiprintf_r+0x1be>
 800519c:	08006c6f 	.word	0x08006c6f
 80051a0:	08006c75 	.word	0x08006c75
 80051a4:	08006c79 	.word	0x08006c79
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004ef1 	.word	0x08004ef1

080051b0 <_printf_common>:
 80051b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051b2:	0015      	movs	r5, r2
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	688a      	ldr	r2, [r1, #8]
 80051b8:	690b      	ldr	r3, [r1, #16]
 80051ba:	9000      	str	r0, [sp, #0]
 80051bc:	000c      	movs	r4, r1
 80051be:	4293      	cmp	r3, r2
 80051c0:	da00      	bge.n	80051c4 <_printf_common+0x14>
 80051c2:	0013      	movs	r3, r2
 80051c4:	0022      	movs	r2, r4
 80051c6:	602b      	str	r3, [r5, #0]
 80051c8:	3243      	adds	r2, #67	; 0x43
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d001      	beq.n	80051d4 <_printf_common+0x24>
 80051d0:	3301      	adds	r3, #1
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	069b      	lsls	r3, r3, #26
 80051d8:	d502      	bpl.n	80051e0 <_printf_common+0x30>
 80051da:	682b      	ldr	r3, [r5, #0]
 80051dc:	3302      	adds	r3, #2
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	2706      	movs	r7, #6
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	401f      	ands	r7, r3
 80051e6:	d027      	beq.n	8005238 <_printf_common+0x88>
 80051e8:	0023      	movs	r3, r4
 80051ea:	3343      	adds	r3, #67	; 0x43
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	1e5a      	subs	r2, r3, #1
 80051f0:	4193      	sbcs	r3, r2
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	0692      	lsls	r2, r2, #26
 80051f6:	d430      	bmi.n	800525a <_printf_common+0xaa>
 80051f8:	0022      	movs	r2, r4
 80051fa:	9901      	ldr	r1, [sp, #4]
 80051fc:	3243      	adds	r2, #67	; 0x43
 80051fe:	9800      	ldr	r0, [sp, #0]
 8005200:	9e08      	ldr	r6, [sp, #32]
 8005202:	47b0      	blx	r6
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d025      	beq.n	8005254 <_printf_common+0xa4>
 8005208:	2306      	movs	r3, #6
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	682a      	ldr	r2, [r5, #0]
 800520e:	68e1      	ldr	r1, [r4, #12]
 8005210:	4003      	ands	r3, r0
 8005212:	2500      	movs	r5, #0
 8005214:	2b04      	cmp	r3, #4
 8005216:	d103      	bne.n	8005220 <_printf_common+0x70>
 8005218:	1a8d      	subs	r5, r1, r2
 800521a:	43eb      	mvns	r3, r5
 800521c:	17db      	asrs	r3, r3, #31
 800521e:	401d      	ands	r5, r3
 8005220:	68a3      	ldr	r3, [r4, #8]
 8005222:	6922      	ldr	r2, [r4, #16]
 8005224:	4293      	cmp	r3, r2
 8005226:	dd01      	ble.n	800522c <_printf_common+0x7c>
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	18ed      	adds	r5, r5, r3
 800522c:	2700      	movs	r7, #0
 800522e:	42bd      	cmp	r5, r7
 8005230:	d120      	bne.n	8005274 <_printf_common+0xc4>
 8005232:	2000      	movs	r0, #0
 8005234:	e010      	b.n	8005258 <_printf_common+0xa8>
 8005236:	3701      	adds	r7, #1
 8005238:	68e3      	ldr	r3, [r4, #12]
 800523a:	682a      	ldr	r2, [r5, #0]
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	42bb      	cmp	r3, r7
 8005240:	ddd2      	ble.n	80051e8 <_printf_common+0x38>
 8005242:	0022      	movs	r2, r4
 8005244:	2301      	movs	r3, #1
 8005246:	3219      	adds	r2, #25
 8005248:	9901      	ldr	r1, [sp, #4]
 800524a:	9800      	ldr	r0, [sp, #0]
 800524c:	9e08      	ldr	r6, [sp, #32]
 800524e:	47b0      	blx	r6
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d1f0      	bne.n	8005236 <_printf_common+0x86>
 8005254:	2001      	movs	r0, #1
 8005256:	4240      	negs	r0, r0
 8005258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800525a:	2030      	movs	r0, #48	; 0x30
 800525c:	18e1      	adds	r1, r4, r3
 800525e:	3143      	adds	r1, #67	; 0x43
 8005260:	7008      	strb	r0, [r1, #0]
 8005262:	0021      	movs	r1, r4
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	3145      	adds	r1, #69	; 0x45
 8005268:	7809      	ldrb	r1, [r1, #0]
 800526a:	18a2      	adds	r2, r4, r2
 800526c:	3243      	adds	r2, #67	; 0x43
 800526e:	3302      	adds	r3, #2
 8005270:	7011      	strb	r1, [r2, #0]
 8005272:	e7c1      	b.n	80051f8 <_printf_common+0x48>
 8005274:	0022      	movs	r2, r4
 8005276:	2301      	movs	r3, #1
 8005278:	321a      	adds	r2, #26
 800527a:	9901      	ldr	r1, [sp, #4]
 800527c:	9800      	ldr	r0, [sp, #0]
 800527e:	9e08      	ldr	r6, [sp, #32]
 8005280:	47b0      	blx	r6
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	d0e6      	beq.n	8005254 <_printf_common+0xa4>
 8005286:	3701      	adds	r7, #1
 8005288:	e7d1      	b.n	800522e <_printf_common+0x7e>
	...

0800528c <_printf_i>:
 800528c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	9204      	str	r2, [sp, #16]
 8005292:	000a      	movs	r2, r1
 8005294:	3243      	adds	r2, #67	; 0x43
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	9003      	str	r0, [sp, #12]
 800529a:	9202      	str	r2, [sp, #8]
 800529c:	7e0a      	ldrb	r2, [r1, #24]
 800529e:	000c      	movs	r4, r1
 80052a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a2:	2a6e      	cmp	r2, #110	; 0x6e
 80052a4:	d100      	bne.n	80052a8 <_printf_i+0x1c>
 80052a6:	e086      	b.n	80053b6 <_printf_i+0x12a>
 80052a8:	d81f      	bhi.n	80052ea <_printf_i+0x5e>
 80052aa:	2a63      	cmp	r2, #99	; 0x63
 80052ac:	d033      	beq.n	8005316 <_printf_i+0x8a>
 80052ae:	d808      	bhi.n	80052c2 <_printf_i+0x36>
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d100      	bne.n	80052b6 <_printf_i+0x2a>
 80052b4:	e08c      	b.n	80053d0 <_printf_i+0x144>
 80052b6:	2a58      	cmp	r2, #88	; 0x58
 80052b8:	d04d      	beq.n	8005356 <_printf_i+0xca>
 80052ba:	0025      	movs	r5, r4
 80052bc:	3542      	adds	r5, #66	; 0x42
 80052be:	702a      	strb	r2, [r5, #0]
 80052c0:	e030      	b.n	8005324 <_printf_i+0x98>
 80052c2:	2a64      	cmp	r2, #100	; 0x64
 80052c4:	d001      	beq.n	80052ca <_printf_i+0x3e>
 80052c6:	2a69      	cmp	r2, #105	; 0x69
 80052c8:	d1f7      	bne.n	80052ba <_printf_i+0x2e>
 80052ca:	6819      	ldr	r1, [r3, #0]
 80052cc:	6825      	ldr	r5, [r4, #0]
 80052ce:	1d0a      	adds	r2, r1, #4
 80052d0:	0628      	lsls	r0, r5, #24
 80052d2:	d529      	bpl.n	8005328 <_printf_i+0x9c>
 80052d4:	6808      	ldr	r0, [r1, #0]
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	2800      	cmp	r0, #0
 80052da:	da03      	bge.n	80052e4 <_printf_i+0x58>
 80052dc:	232d      	movs	r3, #45	; 0x2d
 80052de:	9a02      	ldr	r2, [sp, #8]
 80052e0:	4240      	negs	r0, r0
 80052e2:	7013      	strb	r3, [r2, #0]
 80052e4:	4e6b      	ldr	r6, [pc, #428]	; (8005494 <_printf_i+0x208>)
 80052e6:	270a      	movs	r7, #10
 80052e8:	e04f      	b.n	800538a <_printf_i+0xfe>
 80052ea:	2a73      	cmp	r2, #115	; 0x73
 80052ec:	d074      	beq.n	80053d8 <_printf_i+0x14c>
 80052ee:	d808      	bhi.n	8005302 <_printf_i+0x76>
 80052f0:	2a6f      	cmp	r2, #111	; 0x6f
 80052f2:	d01f      	beq.n	8005334 <_printf_i+0xa8>
 80052f4:	2a70      	cmp	r2, #112	; 0x70
 80052f6:	d1e0      	bne.n	80052ba <_printf_i+0x2e>
 80052f8:	2220      	movs	r2, #32
 80052fa:	6809      	ldr	r1, [r1, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	6022      	str	r2, [r4, #0]
 8005300:	e003      	b.n	800530a <_printf_i+0x7e>
 8005302:	2a75      	cmp	r2, #117	; 0x75
 8005304:	d016      	beq.n	8005334 <_printf_i+0xa8>
 8005306:	2a78      	cmp	r2, #120	; 0x78
 8005308:	d1d7      	bne.n	80052ba <_printf_i+0x2e>
 800530a:	0022      	movs	r2, r4
 800530c:	2178      	movs	r1, #120	; 0x78
 800530e:	3245      	adds	r2, #69	; 0x45
 8005310:	7011      	strb	r1, [r2, #0]
 8005312:	4e61      	ldr	r6, [pc, #388]	; (8005498 <_printf_i+0x20c>)
 8005314:	e022      	b.n	800535c <_printf_i+0xd0>
 8005316:	0025      	movs	r5, r4
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	3542      	adds	r5, #66	; 0x42
 800531c:	1d11      	adds	r1, r2, #4
 800531e:	6019      	str	r1, [r3, #0]
 8005320:	6813      	ldr	r3, [r2, #0]
 8005322:	702b      	strb	r3, [r5, #0]
 8005324:	2301      	movs	r3, #1
 8005326:	e065      	b.n	80053f4 <_printf_i+0x168>
 8005328:	6808      	ldr	r0, [r1, #0]
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	0669      	lsls	r1, r5, #25
 800532e:	d5d3      	bpl.n	80052d8 <_printf_i+0x4c>
 8005330:	b200      	sxth	r0, r0
 8005332:	e7d1      	b.n	80052d8 <_printf_i+0x4c>
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	1d08      	adds	r0, r1, #4
 800533a:	6018      	str	r0, [r3, #0]
 800533c:	6808      	ldr	r0, [r1, #0]
 800533e:	062e      	lsls	r6, r5, #24
 8005340:	d505      	bpl.n	800534e <_printf_i+0xc2>
 8005342:	4e54      	ldr	r6, [pc, #336]	; (8005494 <_printf_i+0x208>)
 8005344:	2708      	movs	r7, #8
 8005346:	2a6f      	cmp	r2, #111	; 0x6f
 8005348:	d01b      	beq.n	8005382 <_printf_i+0xf6>
 800534a:	270a      	movs	r7, #10
 800534c:	e019      	b.n	8005382 <_printf_i+0xf6>
 800534e:	066d      	lsls	r5, r5, #25
 8005350:	d5f7      	bpl.n	8005342 <_printf_i+0xb6>
 8005352:	b280      	uxth	r0, r0
 8005354:	e7f5      	b.n	8005342 <_printf_i+0xb6>
 8005356:	3145      	adds	r1, #69	; 0x45
 8005358:	4e4e      	ldr	r6, [pc, #312]	; (8005494 <_printf_i+0x208>)
 800535a:	700a      	strb	r2, [r1, #0]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	1d01      	adds	r1, r0, #4
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	6019      	str	r1, [r3, #0]
 8005366:	0615      	lsls	r5, r2, #24
 8005368:	d521      	bpl.n	80053ae <_printf_i+0x122>
 800536a:	07d3      	lsls	r3, r2, #31
 800536c:	d502      	bpl.n	8005374 <_printf_i+0xe8>
 800536e:	2320      	movs	r3, #32
 8005370:	431a      	orrs	r2, r3
 8005372:	6022      	str	r2, [r4, #0]
 8005374:	2710      	movs	r7, #16
 8005376:	2800      	cmp	r0, #0
 8005378:	d103      	bne.n	8005382 <_printf_i+0xf6>
 800537a:	2320      	movs	r3, #32
 800537c:	6822      	ldr	r2, [r4, #0]
 800537e:	439a      	bics	r2, r3
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	0023      	movs	r3, r4
 8005384:	2200      	movs	r2, #0
 8005386:	3343      	adds	r3, #67	; 0x43
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	60a3      	str	r3, [r4, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	db58      	blt.n	8005444 <_printf_i+0x1b8>
 8005392:	2204      	movs	r2, #4
 8005394:	6821      	ldr	r1, [r4, #0]
 8005396:	4391      	bics	r1, r2
 8005398:	6021      	str	r1, [r4, #0]
 800539a:	2800      	cmp	r0, #0
 800539c:	d154      	bne.n	8005448 <_printf_i+0x1bc>
 800539e:	9d02      	ldr	r5, [sp, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d05a      	beq.n	800545a <_printf_i+0x1ce>
 80053a4:	0025      	movs	r5, r4
 80053a6:	7833      	ldrb	r3, [r6, #0]
 80053a8:	3542      	adds	r5, #66	; 0x42
 80053aa:	702b      	strb	r3, [r5, #0]
 80053ac:	e055      	b.n	800545a <_printf_i+0x1ce>
 80053ae:	0655      	lsls	r5, r2, #25
 80053b0:	d5db      	bpl.n	800536a <_printf_i+0xde>
 80053b2:	b280      	uxth	r0, r0
 80053b4:	e7d9      	b.n	800536a <_printf_i+0xde>
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	680d      	ldr	r5, [r1, #0]
 80053ba:	1d10      	adds	r0, r2, #4
 80053bc:	6949      	ldr	r1, [r1, #20]
 80053be:	6018      	str	r0, [r3, #0]
 80053c0:	6813      	ldr	r3, [r2, #0]
 80053c2:	062e      	lsls	r6, r5, #24
 80053c4:	d501      	bpl.n	80053ca <_printf_i+0x13e>
 80053c6:	6019      	str	r1, [r3, #0]
 80053c8:	e002      	b.n	80053d0 <_printf_i+0x144>
 80053ca:	066d      	lsls	r5, r5, #25
 80053cc:	d5fb      	bpl.n	80053c6 <_printf_i+0x13a>
 80053ce:	8019      	strh	r1, [r3, #0]
 80053d0:	2300      	movs	r3, #0
 80053d2:	9d02      	ldr	r5, [sp, #8]
 80053d4:	6123      	str	r3, [r4, #16]
 80053d6:	e04f      	b.n	8005478 <_printf_i+0x1ec>
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	1d11      	adds	r1, r2, #4
 80053dc:	6019      	str	r1, [r3, #0]
 80053de:	6815      	ldr	r5, [r2, #0]
 80053e0:	2100      	movs	r1, #0
 80053e2:	6862      	ldr	r2, [r4, #4]
 80053e4:	0028      	movs	r0, r5
 80053e6:	f000 f859 	bl	800549c <memchr>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d001      	beq.n	80053f2 <_printf_i+0x166>
 80053ee:	1b40      	subs	r0, r0, r5
 80053f0:	6060      	str	r0, [r4, #4]
 80053f2:	6863      	ldr	r3, [r4, #4]
 80053f4:	6123      	str	r3, [r4, #16]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9a02      	ldr	r2, [sp, #8]
 80053fa:	7013      	strb	r3, [r2, #0]
 80053fc:	e03c      	b.n	8005478 <_printf_i+0x1ec>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	002a      	movs	r2, r5
 8005402:	9904      	ldr	r1, [sp, #16]
 8005404:	9803      	ldr	r0, [sp, #12]
 8005406:	9d05      	ldr	r5, [sp, #20]
 8005408:	47a8      	blx	r5
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	d03e      	beq.n	800548c <_printf_i+0x200>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	079b      	lsls	r3, r3, #30
 8005412:	d415      	bmi.n	8005440 <_printf_i+0x1b4>
 8005414:	9b07      	ldr	r3, [sp, #28]
 8005416:	68e0      	ldr	r0, [r4, #12]
 8005418:	4298      	cmp	r0, r3
 800541a:	da39      	bge.n	8005490 <_printf_i+0x204>
 800541c:	0018      	movs	r0, r3
 800541e:	e037      	b.n	8005490 <_printf_i+0x204>
 8005420:	0022      	movs	r2, r4
 8005422:	2301      	movs	r3, #1
 8005424:	3219      	adds	r2, #25
 8005426:	9904      	ldr	r1, [sp, #16]
 8005428:	9803      	ldr	r0, [sp, #12]
 800542a:	9e05      	ldr	r6, [sp, #20]
 800542c:	47b0      	blx	r6
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	d02c      	beq.n	800548c <_printf_i+0x200>
 8005432:	3501      	adds	r5, #1
 8005434:	68e3      	ldr	r3, [r4, #12]
 8005436:	9a07      	ldr	r2, [sp, #28]
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	42ab      	cmp	r3, r5
 800543c:	dcf0      	bgt.n	8005420 <_printf_i+0x194>
 800543e:	e7e9      	b.n	8005414 <_printf_i+0x188>
 8005440:	2500      	movs	r5, #0
 8005442:	e7f7      	b.n	8005434 <_printf_i+0x1a8>
 8005444:	2800      	cmp	r0, #0
 8005446:	d0ad      	beq.n	80053a4 <_printf_i+0x118>
 8005448:	9d02      	ldr	r5, [sp, #8]
 800544a:	0039      	movs	r1, r7
 800544c:	f7fa fef6 	bl	800023c <__aeabi_uidivmod>
 8005450:	5c73      	ldrb	r3, [r6, r1]
 8005452:	3d01      	subs	r5, #1
 8005454:	702b      	strb	r3, [r5, #0]
 8005456:	2800      	cmp	r0, #0
 8005458:	d1f7      	bne.n	800544a <_printf_i+0x1be>
 800545a:	2f08      	cmp	r7, #8
 800545c:	d109      	bne.n	8005472 <_printf_i+0x1e6>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	07db      	lsls	r3, r3, #31
 8005462:	d506      	bpl.n	8005472 <_printf_i+0x1e6>
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	6922      	ldr	r2, [r4, #16]
 8005468:	4293      	cmp	r3, r2
 800546a:	dc02      	bgt.n	8005472 <_printf_i+0x1e6>
 800546c:	2330      	movs	r3, #48	; 0x30
 800546e:	3d01      	subs	r5, #1
 8005470:	702b      	strb	r3, [r5, #0]
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	1b5b      	subs	r3, r3, r5
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	9b05      	ldr	r3, [sp, #20]
 800547a:	aa07      	add	r2, sp, #28
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	0021      	movs	r1, r4
 8005480:	9b04      	ldr	r3, [sp, #16]
 8005482:	9803      	ldr	r0, [sp, #12]
 8005484:	f7ff fe94 	bl	80051b0 <_printf_common>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d1b8      	bne.n	80053fe <_printf_i+0x172>
 800548c:	2001      	movs	r0, #1
 800548e:	4240      	negs	r0, r0
 8005490:	b009      	add	sp, #36	; 0x24
 8005492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005494:	08006c80 	.word	0x08006c80
 8005498:	08006c91 	.word	0x08006c91

0800549c <memchr>:
 800549c:	b2c9      	uxtb	r1, r1
 800549e:	1882      	adds	r2, r0, r2
 80054a0:	4290      	cmp	r0, r2
 80054a2:	d101      	bne.n	80054a8 <memchr+0xc>
 80054a4:	2000      	movs	r0, #0
 80054a6:	4770      	bx	lr
 80054a8:	7803      	ldrb	r3, [r0, #0]
 80054aa:	428b      	cmp	r3, r1
 80054ac:	d0fb      	beq.n	80054a6 <memchr+0xa>
 80054ae:	3001      	adds	r0, #1
 80054b0:	e7f6      	b.n	80054a0 <memchr+0x4>

080054b2 <memmove>:
 80054b2:	b510      	push	{r4, lr}
 80054b4:	4288      	cmp	r0, r1
 80054b6:	d902      	bls.n	80054be <memmove+0xc>
 80054b8:	188b      	adds	r3, r1, r2
 80054ba:	4298      	cmp	r0, r3
 80054bc:	d303      	bcc.n	80054c6 <memmove+0x14>
 80054be:	2300      	movs	r3, #0
 80054c0:	e007      	b.n	80054d2 <memmove+0x20>
 80054c2:	5c8b      	ldrb	r3, [r1, r2]
 80054c4:	5483      	strb	r3, [r0, r2]
 80054c6:	3a01      	subs	r2, #1
 80054c8:	d2fb      	bcs.n	80054c2 <memmove+0x10>
 80054ca:	bd10      	pop	{r4, pc}
 80054cc:	5ccc      	ldrb	r4, [r1, r3]
 80054ce:	54c4      	strb	r4, [r0, r3]
 80054d0:	3301      	adds	r3, #1
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d1fa      	bne.n	80054cc <memmove+0x1a>
 80054d6:	e7f8      	b.n	80054ca <memmove+0x18>

080054d8 <_free_r>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	0005      	movs	r5, r0
 80054dc:	2900      	cmp	r1, #0
 80054de:	d010      	beq.n	8005502 <_free_r+0x2a>
 80054e0:	1f0c      	subs	r4, r1, #4
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da00      	bge.n	80054ea <_free_r+0x12>
 80054e8:	18e4      	adds	r4, r4, r3
 80054ea:	0028      	movs	r0, r5
 80054ec:	f000 f8d4 	bl	8005698 <__malloc_lock>
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <_free_r+0x90>)
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <_free_r+0x2c>
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	6014      	str	r4, [r2, #0]
 80054fc:	0028      	movs	r0, r5
 80054fe:	f000 f8cc 	bl	800569a <__malloc_unlock>
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	42a3      	cmp	r3, r4
 8005506:	d909      	bls.n	800551c <_free_r+0x44>
 8005508:	6821      	ldr	r1, [r4, #0]
 800550a:	1860      	adds	r0, r4, r1
 800550c:	4283      	cmp	r3, r0
 800550e:	d1f3      	bne.n	80054f8 <_free_r+0x20>
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	1841      	adds	r1, r0, r1
 8005516:	6021      	str	r1, [r4, #0]
 8005518:	e7ee      	b.n	80054f8 <_free_r+0x20>
 800551a:	0013      	movs	r3, r2
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	2a00      	cmp	r2, #0
 8005520:	d001      	beq.n	8005526 <_free_r+0x4e>
 8005522:	42a2      	cmp	r2, r4
 8005524:	d9f9      	bls.n	800551a <_free_r+0x42>
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	1858      	adds	r0, r3, r1
 800552a:	42a0      	cmp	r0, r4
 800552c:	d10b      	bne.n	8005546 <_free_r+0x6e>
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	1809      	adds	r1, r1, r0
 8005532:	1858      	adds	r0, r3, r1
 8005534:	6019      	str	r1, [r3, #0]
 8005536:	4282      	cmp	r2, r0
 8005538:	d1e0      	bne.n	80054fc <_free_r+0x24>
 800553a:	6810      	ldr	r0, [r2, #0]
 800553c:	6852      	ldr	r2, [r2, #4]
 800553e:	1841      	adds	r1, r0, r1
 8005540:	6019      	str	r1, [r3, #0]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	e7da      	b.n	80054fc <_free_r+0x24>
 8005546:	42a0      	cmp	r0, r4
 8005548:	d902      	bls.n	8005550 <_free_r+0x78>
 800554a:	230c      	movs	r3, #12
 800554c:	602b      	str	r3, [r5, #0]
 800554e:	e7d5      	b.n	80054fc <_free_r+0x24>
 8005550:	6821      	ldr	r1, [r4, #0]
 8005552:	1860      	adds	r0, r4, r1
 8005554:	4282      	cmp	r2, r0
 8005556:	d103      	bne.n	8005560 <_free_r+0x88>
 8005558:	6810      	ldr	r0, [r2, #0]
 800555a:	6852      	ldr	r2, [r2, #4]
 800555c:	1841      	adds	r1, r0, r1
 800555e:	6021      	str	r1, [r4, #0]
 8005560:	6062      	str	r2, [r4, #4]
 8005562:	605c      	str	r4, [r3, #4]
 8005564:	e7ca      	b.n	80054fc <_free_r+0x24>
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	200008bc 	.word	0x200008bc

0800556c <_malloc_r>:
 800556c:	2303      	movs	r3, #3
 800556e:	b570      	push	{r4, r5, r6, lr}
 8005570:	1ccd      	adds	r5, r1, #3
 8005572:	439d      	bics	r5, r3
 8005574:	3508      	adds	r5, #8
 8005576:	0006      	movs	r6, r0
 8005578:	2d0c      	cmp	r5, #12
 800557a:	d21e      	bcs.n	80055ba <_malloc_r+0x4e>
 800557c:	250c      	movs	r5, #12
 800557e:	42a9      	cmp	r1, r5
 8005580:	d81d      	bhi.n	80055be <_malloc_r+0x52>
 8005582:	0030      	movs	r0, r6
 8005584:	f000 f888 	bl	8005698 <__malloc_lock>
 8005588:	4a25      	ldr	r2, [pc, #148]	; (8005620 <_malloc_r+0xb4>)
 800558a:	6814      	ldr	r4, [r2, #0]
 800558c:	0021      	movs	r1, r4
 800558e:	2900      	cmp	r1, #0
 8005590:	d119      	bne.n	80055c6 <_malloc_r+0x5a>
 8005592:	4c24      	ldr	r4, [pc, #144]	; (8005624 <_malloc_r+0xb8>)
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <_malloc_r+0x36>
 800559a:	0030      	movs	r0, r6
 800559c:	f000 f86a 	bl	8005674 <_sbrk_r>
 80055a0:	6020      	str	r0, [r4, #0]
 80055a2:	0029      	movs	r1, r5
 80055a4:	0030      	movs	r0, r6
 80055a6:	f000 f865 	bl	8005674 <_sbrk_r>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d12b      	bne.n	8005606 <_malloc_r+0x9a>
 80055ae:	230c      	movs	r3, #12
 80055b0:	0030      	movs	r0, r6
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f000 f871 	bl	800569a <__malloc_unlock>
 80055b8:	e003      	b.n	80055c2 <_malloc_r+0x56>
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	dadf      	bge.n	800557e <_malloc_r+0x12>
 80055be:	230c      	movs	r3, #12
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	2000      	movs	r0, #0
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	680b      	ldr	r3, [r1, #0]
 80055c8:	1b5b      	subs	r3, r3, r5
 80055ca:	d419      	bmi.n	8005600 <_malloc_r+0x94>
 80055cc:	2b0b      	cmp	r3, #11
 80055ce:	d903      	bls.n	80055d8 <_malloc_r+0x6c>
 80055d0:	600b      	str	r3, [r1, #0]
 80055d2:	18cc      	adds	r4, r1, r3
 80055d4:	6025      	str	r5, [r4, #0]
 80055d6:	e003      	b.n	80055e0 <_malloc_r+0x74>
 80055d8:	684b      	ldr	r3, [r1, #4]
 80055da:	428c      	cmp	r4, r1
 80055dc:	d10d      	bne.n	80055fa <_malloc_r+0x8e>
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	0030      	movs	r0, r6
 80055e2:	f000 f85a 	bl	800569a <__malloc_unlock>
 80055e6:	0020      	movs	r0, r4
 80055e8:	2207      	movs	r2, #7
 80055ea:	300b      	adds	r0, #11
 80055ec:	1d23      	adds	r3, r4, #4
 80055ee:	4390      	bics	r0, r2
 80055f0:	1ac3      	subs	r3, r0, r3
 80055f2:	d0e7      	beq.n	80055c4 <_malloc_r+0x58>
 80055f4:	425a      	negs	r2, r3
 80055f6:	50e2      	str	r2, [r4, r3]
 80055f8:	e7e4      	b.n	80055c4 <_malloc_r+0x58>
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	000c      	movs	r4, r1
 80055fe:	e7ef      	b.n	80055e0 <_malloc_r+0x74>
 8005600:	000c      	movs	r4, r1
 8005602:	6849      	ldr	r1, [r1, #4]
 8005604:	e7c3      	b.n	800558e <_malloc_r+0x22>
 8005606:	2303      	movs	r3, #3
 8005608:	1cc4      	adds	r4, r0, #3
 800560a:	439c      	bics	r4, r3
 800560c:	42a0      	cmp	r0, r4
 800560e:	d0e1      	beq.n	80055d4 <_malloc_r+0x68>
 8005610:	1a21      	subs	r1, r4, r0
 8005612:	0030      	movs	r0, r6
 8005614:	f000 f82e 	bl	8005674 <_sbrk_r>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d1db      	bne.n	80055d4 <_malloc_r+0x68>
 800561c:	e7c7      	b.n	80055ae <_malloc_r+0x42>
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	200008bc 	.word	0x200008bc
 8005624:	200008c0 	.word	0x200008c0

08005628 <_realloc_r>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	0007      	movs	r7, r0
 800562c:	000d      	movs	r5, r1
 800562e:	0016      	movs	r6, r2
 8005630:	2900      	cmp	r1, #0
 8005632:	d105      	bne.n	8005640 <_realloc_r+0x18>
 8005634:	0011      	movs	r1, r2
 8005636:	f7ff ff99 	bl	800556c <_malloc_r>
 800563a:	0004      	movs	r4, r0
 800563c:	0020      	movs	r0, r4
 800563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005640:	2a00      	cmp	r2, #0
 8005642:	d103      	bne.n	800564c <_realloc_r+0x24>
 8005644:	f7ff ff48 	bl	80054d8 <_free_r>
 8005648:	0034      	movs	r4, r6
 800564a:	e7f7      	b.n	800563c <_realloc_r+0x14>
 800564c:	f000 f826 	bl	800569c <_malloc_usable_size_r>
 8005650:	002c      	movs	r4, r5
 8005652:	42b0      	cmp	r0, r6
 8005654:	d2f2      	bcs.n	800563c <_realloc_r+0x14>
 8005656:	0031      	movs	r1, r6
 8005658:	0038      	movs	r0, r7
 800565a:	f7ff ff87 	bl	800556c <_malloc_r>
 800565e:	1e04      	subs	r4, r0, #0
 8005660:	d0ec      	beq.n	800563c <_realloc_r+0x14>
 8005662:	0029      	movs	r1, r5
 8005664:	0032      	movs	r2, r6
 8005666:	f7ff fc09 	bl	8004e7c <memcpy>
 800566a:	0029      	movs	r1, r5
 800566c:	0038      	movs	r0, r7
 800566e:	f7ff ff33 	bl	80054d8 <_free_r>
 8005672:	e7e3      	b.n	800563c <_realloc_r+0x14>

08005674 <_sbrk_r>:
 8005674:	2300      	movs	r3, #0
 8005676:	b570      	push	{r4, r5, r6, lr}
 8005678:	4c06      	ldr	r4, [pc, #24]	; (8005694 <_sbrk_r+0x20>)
 800567a:	0005      	movs	r5, r0
 800567c:	0008      	movs	r0, r1
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	f7fb ffac 	bl	80015dc <_sbrk>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d103      	bne.n	8005690 <_sbrk_r+0x1c>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d000      	beq.n	8005690 <_sbrk_r+0x1c>
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	bd70      	pop	{r4, r5, r6, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	200011b0 	.word	0x200011b0

08005698 <__malloc_lock>:
 8005698:	4770      	bx	lr

0800569a <__malloc_unlock>:
 800569a:	4770      	bx	lr

0800569c <_malloc_usable_size_r>:
 800569c:	1f0b      	subs	r3, r1, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1f18      	subs	r0, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da01      	bge.n	80056aa <_malloc_usable_size_r+0xe>
 80056a6:	580b      	ldr	r3, [r1, r0]
 80056a8:	18c0      	adds	r0, r0, r3
 80056aa:	4770      	bx	lr

080056ac <_init>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	469e      	mov	lr, r3
 80056b6:	4770      	bx	lr

080056b8 <_fini>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr
